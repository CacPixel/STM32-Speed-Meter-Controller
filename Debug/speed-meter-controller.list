
speed-meter-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007950  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08007a60  08007a60  00017a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f9c  08007f9c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007f9c  08007f9c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f9c  08007f9c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001e4  08008188  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08008188  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f911  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002874  00000000  00000000  0002fb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00032398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00033218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b15  00000000  00000000  00033f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011afa  00000000  00000000  0004da85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090fd3  00000000  00000000  0005f57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0552  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e1c  00000000  00000000  000f05a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a48 	.word	0x08007a48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08007a48 	.word	0x08007a48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_f2uiz>:
 8000d08:	0042      	lsls	r2, r0, #1
 8000d0a:	d20e      	bcs.n	8000d2a <__aeabi_f2uiz+0x22>
 8000d0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d10:	d30b      	bcc.n	8000d2a <__aeabi_f2uiz+0x22>
 8000d12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d1a:	d409      	bmi.n	8000d30 <__aeabi_f2uiz+0x28>
 8000d1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d24:	fa23 f002 	lsr.w	r0, r3, r2
 8000d28:	4770      	bx	lr
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	4770      	bx	lr
 8000d30:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d34:	d101      	bne.n	8000d3a <__aeabi_f2uiz+0x32>
 8000d36:	0242      	lsls	r2, r0, #9
 8000d38:	d102      	bne.n	8000d40 <__aeabi_f2uiz+0x38>
 8000d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3e:	4770      	bx	lr
 8000d40:	f04f 0000 	mov.w	r0, #0
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2lz>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	4605      	mov	r5, r0
 8000d4c:	460c      	mov	r4, r1
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2300      	movs	r3, #0
 8000d52:	4628      	mov	r0, r5
 8000d54:	4621      	mov	r1, r4
 8000d56:	f7ff fe31 	bl	80009bc <__aeabi_dcmplt>
 8000d5a:	b928      	cbnz	r0, 8000d68 <__aeabi_d2lz+0x20>
 8000d5c:	4628      	mov	r0, r5
 8000d5e:	4621      	mov	r1, r4
 8000d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d64:	f000 b80a 	b.w	8000d7c <__aeabi_d2ulz>
 8000d68:	4628      	mov	r0, r5
 8000d6a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000d6e:	f000 f805 	bl	8000d7c <__aeabi_d2ulz>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	bd38      	pop	{r3, r4, r5, pc}
 8000d7a:	bf00      	nop

08000d7c <__aeabi_d2ulz>:
 8000d7c:	b5d0      	push	{r4, r6, r7, lr}
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <__aeabi_d2ulz+0x34>)
 8000d82:	4606      	mov	r6, r0
 8000d84:	460f      	mov	r7, r1
 8000d86:	f7ff fba7 	bl	80004d8 <__aeabi_dmul>
 8000d8a:	f7ff fe3f 	bl	8000a0c <__aeabi_d2uiz>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	f7ff fb28 	bl	80003e4 <__aeabi_ui2d>
 8000d94:	2200      	movs	r2, #0
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <__aeabi_d2ulz+0x38>)
 8000d98:	f7ff fb9e 	bl	80004d8 <__aeabi_dmul>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4630      	mov	r0, r6
 8000da2:	4639      	mov	r1, r7
 8000da4:	f7ff f9e0 	bl	8000168 <__aeabi_dsub>
 8000da8:	f7ff fe30 	bl	8000a0c <__aeabi_d2uiz>
 8000dac:	4621      	mov	r1, r4
 8000dae:	bdd0      	pop	{r4, r6, r7, pc}
 8000db0:	3df00000 	.word	0x3df00000
 8000db4:	41f00000 	.word	0x41f00000

08000db8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_ADC1_Init+0x74>)
 8000dca:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <MX_ADC1_Init+0x78>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_ADC1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_ADC1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_ADC1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_ADC1_Init+0x74>)
 8000de2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000de6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_ADC1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_ADC1_Init+0x74>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_ADC1_Init+0x74>)
 8000df6:	f001 f8fb 	bl	8001ff0 <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e00:	f000 f9a3 	bl	800114a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_ADC1_Init+0x74>)
 8000e16:	f001 f9c3 	bl	80021a0 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e20:	f000 f993 	bl	800114a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000200 	.word	0x20000200
 8000e30:	40012400 	.word	0x40012400

08000e34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_ADC_MspInit+0x6c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d121      	bne.n	8000e98 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e84:	2302      	movs	r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_ADC_MspInit+0x74>)
 8000e94:	f001 fc7e 	bl	8002794 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40012400 	.word	0x40012400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800

08000eac <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec0:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a3e      	ldr	r2, [pc, #248]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000ec6:	f043 0310 	orr.w	r3, r3, #16
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0310 	and.w	r3, r3, #16
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed8:	4b39      	ldr	r3, [pc, #228]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a38      	ldr	r2, [pc, #224]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0320 	and.w	r3, r3, #32
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a2c      	ldr	r2, [pc, #176]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000f0e:	f043 0308 	orr.w	r3, r3, #8
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <MX_GPIO_Init+0x114>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f26:	4827      	ldr	r0, [pc, #156]	; (8000fc4 <MX_GPIO_Init+0x118>)
 8000f28:	f001 fdb8 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f32:	4825      	ldr	r0, [pc, #148]	; (8000fc8 <MX_GPIO_Init+0x11c>)
 8000f34:	f001 fdb2 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <MX_GPIO_Init+0x118>)
 8000f52:	f001 fc1f 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f56:	2301      	movs	r3, #1
 8000f58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <MX_GPIO_Init+0x120>)
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	4817      	ldr	r0, [pc, #92]	; (8000fc8 <MX_GPIO_Init+0x11c>)
 8000f6a:	f001 fc13 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA11 PA12
                           PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000f6e:	f64f 03fc 	movw	r3, #63740	; 0xf8fc
 8000f72:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f74:	2303      	movs	r3, #3
 8000f76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4812      	ldr	r0, [pc, #72]	; (8000fc8 <MX_GPIO_Init+0x11c>)
 8000f80:	f001 fc08 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000f84:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8000f88:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <MX_GPIO_Init+0x124>)
 8000f96:	f001 fbfd 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0310 	add.w	r3, r7, #16
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_GPIO_Init+0x11c>)
 8000fb4:	f001 fbee 	bl	8002794 <HAL_GPIO_Init>

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40011000 	.word	0x40011000
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	10110000 	.word	0x10110000
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b0a6      	sub	sp, #152	; 0x98
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //MCP4725_RDDataTypeDef data = { 0 };
  uint8_t msg[128] = { 0 };
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	227c      	movs	r2, #124	; 0x7c
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 fdd6 	bl	8004b98 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fec:	f000 ff7a 	bl	8001ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff0:	f000 f850 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff4:	f7ff ff5a 	bl	8000eac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ff8:	f000 fed0 	bl	8001d9c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000ffc:	f7ff fedc 	bl	8000db8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001000:	f000 fe22 	bl	8001c48 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 8001004:	481d      	ldr	r0, [pc, #116]	; (800107c <main+0xa8>)
 8001006:	f002 fa27 	bl	8003458 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 800100a:	2100      	movs	r1, #0
 800100c:	481b      	ldr	r0, [pc, #108]	; (800107c <main+0xa8>)
 800100e:	f002 fac5 	bl	800359c <HAL_TIM_PWM_Start_IT>
  uint8_t uartStartMsg[] = "/MeterUARTStart;\r\n";
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <main+0xac>)
 8001014:	1d3c      	adds	r4, r7, #4
 8001016:	461d      	mov	r5, r3
 8001018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	8022      	strh	r2, [r4, #0]
 8001022:	3402      	adds	r4, #2
 8001024:	0c1b      	lsrs	r3, r3, #16
 8001026:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit_IT(&huart1, uartStartMsg, sizeof(uartStartMsg));
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2213      	movs	r2, #19
 800102c:	4619      	mov	r1, r3
 800102e:	4815      	ldr	r0, [pc, #84]	; (8001084 <main+0xb0>)
 8001030:	f002 ffa5 	bl	8003f7e <HAL_UART_Transmit_IT>
  speed = 0.0;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <main+0xb4>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
  SetMeterWithSpeed();
 800103c:	f000 f88a 	bl	8001154 <SetMeterWithSpeed>
  HAL_UART_Receive_IT(&huart1, rxbuf, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	4912      	ldr	r1, [pc, #72]	; (800108c <main+0xb8>)
 8001044:	480f      	ldr	r0, [pc, #60]	; (8001084 <main+0xb0>)
 8001046:	f002 ffcf 	bl	8003fe8 <HAL_UART_Receive_IT>

    // }
    /*sprintf((char*)msg, "/status:speed=%.2f,CCR=%lu,PSC=%lu,ARR=%lu;\r\n", \
      speed, TIM4->CCR1, TIM4->PSC, TIM4->ARR);*/

    getOutputMsg((char*)msg, "status");
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	4910      	ldr	r1, [pc, #64]	; (8001090 <main+0xbc>)
 8001050:	4618      	mov	r0, r3
 8001052:	f000 fb5f 	bl	8001714 <getOutputMsg>
    HAL_UART_Transmit_IT(&huart1, msg, strlen((char*)msg));
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff f878 	bl	8000150 <strlen>
 8001060:	4603      	mov	r3, r0
 8001062:	b29a      	uxth	r2, r3
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	4619      	mov	r1, r3
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <main+0xb0>)
 800106c:	f002 ff87 	bl	8003f7e <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 8001070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001074:	f000 ff98 	bl	8001fa8 <HAL_Delay>
    getOutputMsg((char*)msg, "status");
 8001078:	e7e7      	b.n	800104a <main+0x76>
 800107a:	bf00      	nop
 800107c:	2000025c 	.word	0x2000025c
 8001080:	08007a68 	.word	0x08007a68
 8001084:	200002a4 	.word	0x200002a4
 8001088:	20000254 	.word	0x20000254
 800108c:	20000230 	.word	0x20000230
 8001090:	08007a60 	.word	0x08007a60

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b094      	sub	sp, #80	; 0x50
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	2228      	movs	r2, #40	; 0x28
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fd78 	bl	8004b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d2:	2301      	movs	r3, #1
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fcee 	bl	8002acc <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010f6:	f000 f828 	bl	800114a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
 80010fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2302      	movs	r3, #2
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800110a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2102      	movs	r1, #2
 8001116:	4618      	mov	r0, r3
 8001118:	f001 ff5a 	bl	8002fd0 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001122:	f000 f812 	bl	800114a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001126:	2302      	movs	r3, #2
 8001128:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800112a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800112e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f8da 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800113e:	f000 f804 	bl	800114a <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	; 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114e:	b672      	cpsid	i
}
 8001150:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001152:	e7fe      	b.n	8001152 <Error_Handler+0x8>

08001154 <SetMeterWithSpeed>:
uint8_t rxbufPos = 0;
bool shouldSaveCommand = false;
float speed;
CommandTypeDef cmdtype = CMD_NULL;

void SetMeterWithSpeed(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    htim4.Instance->CCR1 = getCCR(speed);
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SetMeterWithSpeed+0x1c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f000 f80b 	bl	8001178 <getCCR>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	4b03      	ldr	r3, [pc, #12]	; (8001174 <SetMeterWithSpeed+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000254 	.word	0x20000254
 8001174:	2000025c 	.word	0x2000025c

08001178 <getCCR>:

uint16_t getCCR(float speed) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    return (float)(CCR_END_VAL - CCR_START_VAL) / MAX_SPEED * speed + CCR_START_VAL;
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff f951 	bl	8000428 <__aeabi_f2d>
 8001186:	a30e      	add	r3, pc, #56	; (adr r3, 80011c0 <getCCR+0x48>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <getCCR+0x50>)
 800119e:	f7fe ffe5 	bl	800016c <__adddf3>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fc2f 	bl	8000a0c <__aeabi_d2uiz>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29b      	uxth	r3, r3
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	f3af 8000 	nop.w
 80011c0:	55555555 	.word	0x55555555
 80011c4:	40395555 	.word	0x40395555
 80011c8:	40877000 	.word	0x40877000

080011cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <HAL_UART_RxCpltCallback+0x34>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10a      	bne.n	80011f4 <HAL_UART_RxCpltCallback+0x28>
        isRxCompleted = true;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_UART_RxCpltCallback+0x38>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
        __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0210 	orr.w	r2, r2, #16
 80011f2:	60da      	str	r2, [r3, #12]

    }
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40013800 	.word	0x40013800
 8001204:	20000250 	.word	0x20000250

08001208 <UART_IDLE_Callback>:

void UART_IDLE_Callback(UART_HandleTypeDef* huart) {
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    //if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == RESET)
    if (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE) == RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80ce 	beq.w	80013bc <UART_IDLE_Callback+0x1b4>
        return;

    uint8_t msg[32] = { 0 };
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	619a      	str	r2, [r3, #24]


    if (isRxCompleted) {
 8001238:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <UART_IDLE_Callback+0x1bc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80be 	beq.w	80013be <UART_IDLE_Callback+0x1b6>
        uint8_t data = rxbuf[0];
 8001242:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <UART_IDLE_Callback+0x1c0>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (data == '/') {
 800124a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800124e:	2b2f      	cmp	r3, #47	; 0x2f
 8001250:	d108      	bne.n	8001264 <UART_IDLE_Callback+0x5c>
            rxbufPos = 0;
 8001252:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <UART_IDLE_Callback+0x1c4>)
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
            shouldSaveCommand = true;
 8001258:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <UART_IDLE_Callback+0x1c8>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
            cmdtype = CMD_NULL;
 800125e:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <UART_IDLE_Callback+0x1cc>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
        }
        if (shouldSaveCommand) {
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <UART_IDLE_Callback+0x1c8>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d05b      	beq.n	8001324 <UART_IDLE_Callback+0x11c>
            if (rxbufPos < RX_LENGTH) {
 800126c:	4b57      	ldr	r3, [pc, #348]	; (80013cc <UART_IDLE_Callback+0x1c4>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d854      	bhi.n	800131e <UART_IDLE_Callback+0x116>
                command[rxbufPos] = data;
 8001274:	4b55      	ldr	r3, [pc, #340]	; (80013cc <UART_IDLE_Callback+0x1c4>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <UART_IDLE_Callback+0x1d0>)
 800127c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001280:	5453      	strb	r3, [r2, r1]
                rxbufPos++;
 8001282:	4b52      	ldr	r3, [pc, #328]	; (80013cc <UART_IDLE_Callback+0x1c4>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b50      	ldr	r3, [pc, #320]	; (80013cc <UART_IDLE_Callback+0x1c4>)
 800128c:	701a      	strb	r2, [r3, #0]
                if (data == ';') {
 800128e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001292:	2b3b      	cmp	r3, #59	; 0x3b
 8001294:	d146      	bne.n	8001324 <UART_IDLE_Callback+0x11c>
                    command[rxbufPos] = 0;
 8001296:	4b4d      	ldr	r3, [pc, #308]	; (80013cc <UART_IDLE_Callback+0x1c4>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	4b4e      	ldr	r3, [pc, #312]	; (80013d8 <UART_IDLE_Callback+0x1d0>)
 800129e:	2100      	movs	r1, #0
 80012a0:	5499      	strb	r1, [r3, r2]
                    clearMsg(msg, sizeof(msg));
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2220      	movs	r2, #32
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f003 fc74 	bl	8004b98 <memset>
                    strcat((char*)msg, "/issue_cmd:\"");
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7fe ff4b 	bl	8000150 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4413      	add	r3, r2
 80012c4:	4a45      	ldr	r2, [pc, #276]	; (80013dc <UART_IDLE_Callback+0x1d4>)
 80012c6:	461c      	mov	r4, r3
 80012c8:	4613      	mov	r3, r2
 80012ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012cc:	6020      	str	r0, [r4, #0]
 80012ce:	6061      	str	r1, [r4, #4]
 80012d0:	60a2      	str	r2, [r4, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	7323      	strb	r3, [r4, #12]
                    strcat((char*)msg, (char*)command);
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	493f      	ldr	r1, [pc, #252]	; (80013d8 <UART_IDLE_Callback+0x1d0>)
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 fc63 	bl	8004ba8 <strcat>
                    strcat((char*)msg, "\";\r\n");
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff32 	bl	8000150 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	4413      	add	r3, r2
 80012f6:	4a3a      	ldr	r2, [pc, #232]	; (80013e0 <UART_IDLE_Callback+0x1d8>)
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	6018      	str	r0, [r3, #0]
 80012fc:	7912      	ldrb	r2, [r2, #4]
 80012fe:	711a      	strb	r2, [r3, #4]
                    //sprintf((char*)msg, "/issue_cmd:\"%s\";\r\n", command);
                    //HAL_UART_Transmit(huart, msg, strlen((char*)msg), 5);
                    HAL_Delay(10);
 8001300:	200a      	movs	r0, #10
 8001302:	f000 fe51 	bl	8001fa8 <HAL_Delay>

                    cmdtype = runUARTCommand(huart, command);
 8001306:	4934      	ldr	r1, [pc, #208]	; (80013d8 <UART_IDLE_Callback+0x1d0>)
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f86d 	bl	80013e8 <runUARTCommand>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <UART_IDLE_Callback+0x1cc>)
 8001314:	701a      	strb	r2, [r3, #0]
                    shouldSaveCommand = false;
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <UART_IDLE_Callback+0x1c8>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	e002      	b.n	8001324 <UART_IDLE_Callback+0x11c>
                }
            } else {
                cmdtype = CMD_INVALID;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <UART_IDLE_Callback+0x1cc>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
            }
        }
        if (cmdtype == CMD_INVALID) {
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <UART_IDLE_Callback+0x1cc>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d12b      	bne.n	8001384 <UART_IDLE_Callback+0x17c>
            //command invalid
            clearMsg(msg, sizeof(msg));
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2220      	movs	r2, #32
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f003 fc2f 	bl	8004b98 <memset>
            strcat((char*)msg, "/cmd_invalid;\r\n");
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ff06 	bl	8000150 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	4413      	add	r3, r2
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <UART_IDLE_Callback+0x1dc>)
 8001350:	461c      	mov	r4, r3
 8001352:	4615      	mov	r5, r2
 8001354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001356:	6020      	str	r0, [r4, #0]
 8001358:	6061      	str	r1, [r4, #4]
 800135a:	60a2      	str	r2, [r4, #8]
 800135c:	60e3      	str	r3, [r4, #12]
            //sprintf((char*)msg, "/cmd_invalid;\r\n");
            HAL_UART_Transmit(huart, msg, strlen((char*)msg), 20);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe fef4 	bl	8000150 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	f107 010c 	add.w	r1, r7, #12
 8001370:	2314      	movs	r3, #20
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f002 fd80 	bl	8003e78 <HAL_UART_Transmit>
            shouldSaveCommand = false;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <UART_IDLE_Callback+0x1c8>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
            cmdtype = CMD_NULL;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <UART_IDLE_Callback+0x1cc>)
 8001380:	2201      	movs	r2, #1
 8001382:	701a      	strb	r2, [r3, #0]
        }
        isRxCompleted = false;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <UART_IDLE_Callback+0x1bc>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
        __HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0210 	bic.w	r2, r2, #16
 80013ae:	60da      	str	r2, [r3, #12]
        HAL_UART_Receive_IT(huart, rxbuf, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	4905      	ldr	r1, [pc, #20]	; (80013c8 <UART_IDLE_Callback+0x1c0>)
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f002 fe17 	bl	8003fe8 <HAL_UART_Receive_IT>
 80013ba:	e000      	b.n	80013be <UART_IDLE_Callback+0x1b6>
        return;
 80013bc:	bf00      	nop
    }
}
 80013be:	3730      	adds	r7, #48	; 0x30
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdb0      	pop	{r4, r5, r7, pc}
 80013c4:	20000250 	.word	0x20000250
 80013c8:	20000230 	.word	0x20000230
 80013cc:	20000251 	.word	0x20000251
 80013d0:	20000252 	.word	0x20000252
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000240 	.word	0x20000240
 80013dc:	08007a7c 	.word	0x08007a7c
 80013e0:	08007a8c 	.word	0x08007a8c
 80013e4:	08007a94 	.word	0x08007a94

080013e8 <runUARTCommand>:

CommandTypeDef runUARTCommand(UART_HandleTypeDef* huart, uint8_t* command) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ac      	sub	sp, #176	; 0xb0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
    uint8_t proc_str[RX_LENGTH];
    if (strstr((char*)command, "/get") != NULL) {
 80013f2:	49b7      	ldr	r1, [pc, #732]	; (80016d0 <runUARTCommand+0x2e8>)
 80013f4:	6838      	ldr	r0, [r7, #0]
 80013f6:	f003 fbfb 	bl	8004bf0 <strstr>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01f      	beq.n	8001440 <runUARTCommand+0x58>
        cmdtype = CMD_GET;
 8001400:	4bb4      	ldr	r3, [pc, #720]	; (80016d4 <runUARTCommand+0x2ec>)
 8001402:	2202      	movs	r2, #2
 8001404:	701a      	strb	r2, [r3, #0]

        char msg[128] = { 0 };
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	227c      	movs	r2, #124	; 0x7c
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fbc0 	bl	8004b98 <memset>
        getOutputMsg(msg, "get");
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	49ae      	ldr	r1, [pc, #696]	; (80016d8 <runUARTCommand+0x2f0>)
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f978 	bl	8001714 <getOutputMsg>

        /*
        sprintf((char*)msg, "/get:speed=%.2f,CCR=%lu,PSC=%lu,ARR=%lu;\r\n", \
             speed, TIM4->CCR1, TIM4->PSC, TIM4->ARR);
        */
        HAL_UART_Transmit(huart, (uint8_t*)msg, strlen((char*)msg), 10);
 8001424:	f107 0308 	add.w	r3, r7, #8
 8001428:	4618      	mov	r0, r3
 800142a:	f7fe fe91 	bl	8000150 <strlen>
 800142e:	4603      	mov	r3, r0
 8001430:	b29a      	uxth	r2, r3
 8001432:	f107 0108 	add.w	r1, r7, #8
 8001436:	230a      	movs	r3, #10
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f002 fd1d 	bl	8003e78 <HAL_UART_Transmit>
 800143e:	e140      	b.n	80016c2 <runUARTCommand+0x2da>


    } else if (strstr((char*)command, "/set:") != NULL) {
 8001440:	49a6      	ldr	r1, [pc, #664]	; (80016dc <runUARTCommand+0x2f4>)
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f003 fbd4 	bl	8004bf0 <strstr>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d022      	beq.n	8001494 <runUARTCommand+0xac>
        cmdtype = CMD_SET;
 800144e:	4ba1      	ldr	r3, [pc, #644]	; (80016d4 <runUARTCommand+0x2ec>)
 8001450:	2203      	movs	r2, #3
 8001452:	701a      	strb	r2, [r3, #0]
        char* speedPos = strstr((char*)command, ":") + 1;
 8001454:	213a      	movs	r1, #58	; 0x3a
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f003 fbb5 	bl	8004bc6 <strchr>
 800145c:	4603      	mov	r3, r0
 800145e:	3301      	adds	r3, #1
 8001460:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        strcpy((char*)proc_str, speedPos);
 8001464:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001468:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fbb7 	bl	8004be0 <strcpy>
        speed = (float)atof((char*)proc_str);
 8001472:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fb5c 	bl	8004b34 <atof>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fae2 	bl	8000a4c <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	4a95      	ldr	r2, [pc, #596]	; (80016e0 <runUARTCommand+0x2f8>)
 800148c:	6013      	str	r3, [r2, #0]
        SetMeterWithSpeed();
 800148e:	f7ff fe61 	bl	8001154 <SetMeterWithSpeed>
 8001492:	e116      	b.n	80016c2 <runUARTCommand+0x2da>

        //sprintf((char*)msg, "/speed_set:%.2f;\r\n", speed);
        //HAL_UART_Transmit(huart, msg, strlen((char*)msg), 20);

    } else if (strstr((char*)command, "/inc:") != NULL) {
 8001494:	4993      	ldr	r1, [pc, #588]	; (80016e4 <runUARTCommand+0x2fc>)
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f003 fbaa 	bl	8004bf0 <strstr>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d02a      	beq.n	80014f8 <runUARTCommand+0x110>
        cmdtype = CMD_INC;
 80014a2:	4b8c      	ldr	r3, [pc, #560]	; (80016d4 <runUARTCommand+0x2ec>)
 80014a4:	2204      	movs	r2, #4
 80014a6:	701a      	strb	r2, [r3, #0]
        char* speedPos = strstr((char*)command, ":") + 1;
 80014a8:	213a      	movs	r1, #58	; 0x3a
 80014aa:	6838      	ldr	r0, [r7, #0]
 80014ac:	f003 fb8b 	bl	8004bc6 <strchr>
 80014b0:	4603      	mov	r3, r0
 80014b2:	3301      	adds	r3, #1
 80014b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        strcpy((char*)proc_str, speedPos);
 80014b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014bc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 fb8d 	bl	8004be0 <strcpy>
        speed += (float)atof((char*)proc_str);
 80014c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80014ca:	4618      	mov	r0, r3
 80014cc:	f003 fb32 	bl	8004b34 <atof>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff fab8 	bl	8000a4c <__aeabi_d2f>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b80      	ldr	r3, [pc, #512]	; (80016e0 <runUARTCommand+0x2f8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4619      	mov	r1, r3
 80014e4:	4610      	mov	r0, r2
 80014e6:	f7ff fb07 	bl	8000af8 <__addsf3>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b7c      	ldr	r3, [pc, #496]	; (80016e0 <runUARTCommand+0x2f8>)
 80014f0:	601a      	str	r2, [r3, #0]
        SetMeterWithSpeed();
 80014f2:	f7ff fe2f 	bl	8001154 <SetMeterWithSpeed>
 80014f6:	e0e4      	b.n	80016c2 <runUARTCommand+0x2da>
    } else if (strstr((char*)command, "/dec:") != NULL) {
 80014f8:	497b      	ldr	r1, [pc, #492]	; (80016e8 <runUARTCommand+0x300>)
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f003 fb78 	bl	8004bf0 <strstr>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d02a      	beq.n	800155c <runUARTCommand+0x174>
        cmdtype = CMD_DEC;
 8001506:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <runUARTCommand+0x2ec>)
 8001508:	2205      	movs	r2, #5
 800150a:	701a      	strb	r2, [r3, #0]
        char* speedPos = strstr((char*)command, ":") + 1;
 800150c:	213a      	movs	r1, #58	; 0x3a
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f003 fb59 	bl	8004bc6 <strchr>
 8001514:	4603      	mov	r3, r0
 8001516:	3301      	adds	r3, #1
 8001518:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        strcpy((char*)proc_str, speedPos);
 800151c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001520:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fb5b 	bl	8004be0 <strcpy>
        speed -= (float)atof((char*)proc_str);
 800152a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fb00 	bl	8004b34 <atof>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff fa86 	bl	8000a4c <__aeabi_d2f>
 8001540:	4602      	mov	r2, r0
 8001542:	4b67      	ldr	r3, [pc, #412]	; (80016e0 <runUARTCommand+0x2f8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fad3 	bl	8000af4 <__aeabi_fsub>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <runUARTCommand+0x2f8>)
 8001554:	601a      	str	r2, [r3, #0]
        SetMeterWithSpeed();
 8001556:	f7ff fdfd 	bl	8001154 <SetMeterWithSpeed>
 800155a:	e0b2      	b.n	80016c2 <runUARTCommand+0x2da>
    } else if (strstr((char*)command, "/light_on;") != NULL) {
 800155c:	4963      	ldr	r1, [pc, #396]	; (80016ec <runUARTCommand+0x304>)
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f003 fb46 	bl	8004bf0 <strstr>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <runUARTCommand+0x196>
        cmdtype = CMD_LIGHTON;
 800156a:	4b5a      	ldr	r3, [pc, #360]	; (80016d4 <runUARTCommand+0x2ec>)
 800156c:	2206      	movs	r2, #6
 800156e:	701a      	strb	r2, [r3, #0]
        LIGHT_ON;
 8001570:	4b5f      	ldr	r3, [pc, #380]	; (80016f0 <runUARTCommand+0x308>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4a5e      	ldr	r2, [pc, #376]	; (80016f0 <runUARTCommand+0x308>)
 8001576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157a:	6113      	str	r3, [r2, #16]
 800157c:	e0a1      	b.n	80016c2 <runUARTCommand+0x2da>
    } else if (strstr((char*)command, "/light_off;") != NULL) {
 800157e:	495d      	ldr	r1, [pc, #372]	; (80016f4 <runUARTCommand+0x30c>)
 8001580:	6838      	ldr	r0, [r7, #0]
 8001582:	f003 fb35 	bl	8004bf0 <strstr>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d009      	beq.n	80015a0 <runUARTCommand+0x1b8>
        cmdtype = CMD_LIGHTOFF;
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <runUARTCommand+0x2ec>)
 800158e:	2207      	movs	r2, #7
 8001590:	701a      	strb	r2, [r3, #0]
        LIGHT_OFF;
 8001592:	4b57      	ldr	r3, [pc, #348]	; (80016f0 <runUARTCommand+0x308>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	4a56      	ldr	r2, [pc, #344]	; (80016f0 <runUARTCommand+0x308>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159c:	6113      	str	r3, [r2, #16]
 800159e:	e090      	b.n	80016c2 <runUARTCommand+0x2da>
    } else if (strstr((char*)command, "/led_on;") != NULL) {
 80015a0:	4955      	ldr	r1, [pc, #340]	; (80016f8 <runUARTCommand+0x310>)
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f003 fb24 	bl	8004bf0 <strstr>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <runUARTCommand+0x1da>
        cmdtype = CMD_LEDON;
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <runUARTCommand+0x2ec>)
 80015b0:	2208      	movs	r2, #8
 80015b2:	701a      	strb	r2, [r3, #0]
        LED_ON;
 80015b4:	4b51      	ldr	r3, [pc, #324]	; (80016fc <runUARTCommand+0x314>)
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	4a50      	ldr	r2, [pc, #320]	; (80016fc <runUARTCommand+0x314>)
 80015ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015be:	6113      	str	r3, [r2, #16]
 80015c0:	e07f      	b.n	80016c2 <runUARTCommand+0x2da>
    } else if (strstr((char*)command, "/led_off;") != NULL) {
 80015c2:	494f      	ldr	r1, [pc, #316]	; (8001700 <runUARTCommand+0x318>)
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f003 fb13 	bl	8004bf0 <strstr>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d009      	beq.n	80015e4 <runUARTCommand+0x1fc>
        cmdtype = CMD_LEDOFF;
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <runUARTCommand+0x2ec>)
 80015d2:	2209      	movs	r2, #9
 80015d4:	701a      	strb	r2, [r3, #0]
        LED_OFF;
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <runUARTCommand+0x314>)
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	4a48      	ldr	r2, [pc, #288]	; (80016fc <runUARTCommand+0x314>)
 80015dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015e0:	6113      	str	r3, [r2, #16]
 80015e2:	e06e      	b.n	80016c2 <runUARTCommand+0x2da>
    } else if (strstr((char*)command, "/ARR:") != NULL) {
 80015e4:	4947      	ldr	r1, [pc, #284]	; (8001704 <runUARTCommand+0x31c>)
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f003 fb02 	bl	8004bf0 <strstr>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <runUARTCommand+0x244>
        cmdtype = CMD_SET_ARR;
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <runUARTCommand+0x2ec>)
 80015f4:	220b      	movs	r2, #11
 80015f6:	701a      	strb	r2, [r3, #0]
        char* p = strstr((char*)command, ":") + 1;
 80015f8:	213a      	movs	r1, #58	; 0x3a
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f003 fae3 	bl	8004bc6 <strchr>
 8001600:	4603      	mov	r3, r0
 8001602:	3301      	adds	r3, #1
 8001604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        strcpy((char*)proc_str, p);
 8001608:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800160c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fae5 	bl	8004be0 <strcpy>
        htim4.Instance->ARR = (uint16_t)atoi((char*)proc_str);
 8001616:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fa8d 	bl	8004b3a <atoi>
 8001620:	4603      	mov	r3, r0
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <runUARTCommand+0x320>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
 800162a:	e04a      	b.n	80016c2 <runUARTCommand+0x2da>
    } else if (strstr((char*)command, "/PSC:") != NULL) {
 800162c:	4937      	ldr	r1, [pc, #220]	; (800170c <runUARTCommand+0x324>)
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f003 fade 	bl	8004bf0 <strstr>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d01c      	beq.n	8001674 <runUARTCommand+0x28c>
        cmdtype = CMD_SET_PSC;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <runUARTCommand+0x2ec>)
 800163c:	220c      	movs	r2, #12
 800163e:	701a      	strb	r2, [r3, #0]
        char* p = strstr((char*)command, ":") + 1;
 8001640:	213a      	movs	r1, #58	; 0x3a
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f003 fabf 	bl	8004bc6 <strchr>
 8001648:	4603      	mov	r3, r0
 800164a:	3301      	adds	r3, #1
 800164c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        strcpy((char*)proc_str, p);
 8001650:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001654:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001658:	4618      	mov	r0, r3
 800165a:	f003 fac1 	bl	8004be0 <strcpy>
        htim4.Instance->PSC = (uint16_t)atoi((char*)proc_str);
 800165e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001662:	4618      	mov	r0, r3
 8001664:	f003 fa69 	bl	8004b3a <atoi>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <runUARTCommand+0x320>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
 8001672:	e026      	b.n	80016c2 <runUARTCommand+0x2da>
    } else if (strstr((char*)command, "/CCR:") != NULL) {
 8001674:	4926      	ldr	r1, [pc, #152]	; (8001710 <runUARTCommand+0x328>)
 8001676:	6838      	ldr	r0, [r7, #0]
 8001678:	f003 faba 	bl	8004bf0 <strstr>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01c      	beq.n	80016bc <runUARTCommand+0x2d4>
        cmdtype = CMD_SET_CCR;
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <runUARTCommand+0x2ec>)
 8001684:	220a      	movs	r2, #10
 8001686:	701a      	strb	r2, [r3, #0]
        char* p = strstr((char*)command, ":") + 1;
 8001688:	213a      	movs	r1, #58	; 0x3a
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	f003 fa9b 	bl	8004bc6 <strchr>
 8001690:	4603      	mov	r3, r0
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        strcpy((char*)proc_str, p);
 8001698:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800169c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 fa9d 	bl	8004be0 <strcpy>
        htim4.Instance->CCR1 = (uint16_t)atoi((char*)proc_str);
 80016a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 fa45 	bl	8004b3a <atoi>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <runUARTCommand+0x320>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ba:	e002      	b.n	80016c2 <runUARTCommand+0x2da>
    }

    else {
        cmdtype = CMD_INVALID;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <runUARTCommand+0x2ec>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
    }
    return cmdtype;
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <runUARTCommand+0x2ec>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	37b0      	adds	r7, #176	; 0xb0
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	08007aa4 	.word	0x08007aa4
 80016d4:	20000000 	.word	0x20000000
 80016d8:	08007aac 	.word	0x08007aac
 80016dc:	08007ab0 	.word	0x08007ab0
 80016e0:	20000254 	.word	0x20000254
 80016e4:	08007ab8 	.word	0x08007ab8
 80016e8:	08007ac0 	.word	0x08007ac0
 80016ec:	08007ac8 	.word	0x08007ac8
 80016f0:	40010800 	.word	0x40010800
 80016f4:	08007ad4 	.word	0x08007ad4
 80016f8:	08007ae0 	.word	0x08007ae0
 80016fc:	40011000 	.word	0x40011000
 8001700:	08007aec 	.word	0x08007aec
 8001704:	08007af8 	.word	0x08007af8
 8001708:	2000025c 	.word	0x2000025c
 800170c:	08007b00 	.word	0x08007b00
 8001710:	08007b08 	.word	0x08007b08

08001714 <getOutputMsg>:

void getOutputMsg(char* msg, const char* startMsg) {
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
    char temp[16] = { 0 };
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
    uint8_t speedIntergerPart = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	77fb      	strb	r3, [r7, #31]
    uint16_t speedDecimalPart = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	83bb      	strh	r3, [r7, #28]
    uint8_t speedDecimalPartFinal = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	76fb      	strb	r3, [r7, #27]


    //sprintf(msg + strlen(msg), "%.2f", 114.514);
    //dont use sprintf in irqhandler
    speedIntergerPart = (uint8_t)speed;
 800173a:	4b79      	ldr	r3, [pc, #484]	; (8001920 <getOutputMsg+0x20c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fae2 	bl	8000d08 <__aeabi_f2uiz>
 8001744:	4603      	mov	r3, r0
 8001746:	77fb      	strb	r3, [r7, #31]
    speedDecimalPart = (uint16_t)((speed - (float)speedIntergerPart) * 1000.0);
 8001748:	4b75      	ldr	r3, [pc, #468]	; (8001920 <getOutputMsg+0x20c>)
 800174a:	681c      	ldr	r4, [r3, #0]
 800174c:	7ffb      	ldrb	r3, [r7, #31]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fa82 	bl	8000c58 <__aeabi_ui2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4619      	mov	r1, r3
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff f9cb 	bl	8000af4 <__aeabi_fsub>
 800175e:	4603      	mov	r3, r0
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fe61 	bl	8000428 <__aeabi_f2d>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b6e      	ldr	r3, [pc, #440]	; (8001924 <getOutputMsg+0x210>)
 800176c:	f7fe feb4 	bl	80004d8 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff f948 	bl	8000a0c <__aeabi_d2uiz>
 800177c:	4603      	mov	r3, r0
 800177e:	83bb      	strh	r3, [r7, #28]
    speedDecimalPartFinal = speedDecimalPart % 10;
 8001780:	8bba      	ldrh	r2, [r7, #28]
 8001782:	4b69      	ldr	r3, [pc, #420]	; (8001928 <getOutputMsg+0x214>)
 8001784:	fba3 1302 	umull	r1, r3, r3, r2
 8001788:	08d9      	lsrs	r1, r3, #3
 800178a:	460b      	mov	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	b29b      	uxth	r3, r3
 8001796:	76fb      	strb	r3, [r7, #27]
    speedDecimalPart = (speedDecimalPartFinal < 5) ? \
 8001798:	7efb      	ldrb	r3, [r7, #27]
 800179a:	2b04      	cmp	r3, #4
 800179c:	d806      	bhi.n	80017ac <getOutputMsg+0x98>
 800179e:	8bbb      	ldrh	r3, [r7, #28]
 80017a0:	4a61      	ldr	r2, [pc, #388]	; (8001928 <getOutputMsg+0x214>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	08db      	lsrs	r3, r3, #3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	e007      	b.n	80017bc <getOutputMsg+0xa8>
        speedDecimalPart / 10 : \
        speedDecimalPart / 10 + 1;
 80017ac:	8bbb      	ldrh	r3, [r7, #28]
 80017ae:	4a5e      	ldr	r2, [pc, #376]	; (8001928 <getOutputMsg+0x214>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	08db      	lsrs	r3, r3, #3
 80017b6:	b29b      	uxth	r3, r3
    speedDecimalPart = (speedDecimalPartFinal < 5) ? \
 80017b8:	3301      	adds	r3, #1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	83bb      	strh	r3, [r7, #28]

    clearMsg(msg, 128);
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	2100      	movs	r1, #0
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f003 f9e8 	bl	8004b98 <memset>
    strcat(msg, "/");
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7fe fcc1 	bl	8000150 <strlen>
 80017ce:	4603      	mov	r3, r0
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4955      	ldr	r1, [pc, #340]	; (800192c <getOutputMsg+0x218>)
 80017d8:	461a      	mov	r2, r3
 80017da:	460b      	mov	r3, r1
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	8013      	strh	r3, [r2, #0]
    strcat(msg, startMsg);
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f003 f9e0 	bl	8004ba8 <strcat>
    strcat(msg, ":speed=");
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7fe fcb1 	bl	8000150 <strlen>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	494e      	ldr	r1, [pc, #312]	; (8001930 <getOutputMsg+0x21c>)
 80017f8:	461a      	mov	r2, r3
 80017fa:	460b      	mov	r3, r1
 80017fc:	cb03      	ldmia	r3!, {r0, r1}
 80017fe:	6010      	str	r0, [r2, #0]
 8001800:	6051      	str	r1, [r2, #4]
    itoa_user((int)speedIntergerPart, temp, 10);
 8001802:	7ffb      	ldrb	r3, [r7, #31]
 8001804:	f107 0108 	add.w	r1, r7, #8
 8001808:	220a      	movs	r2, #10
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f89e 	bl	800194c <itoa_user>
    strcat(msg, temp);
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4619      	mov	r1, r3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f003 f9c6 	bl	8004ba8 <strcat>
    strcat(msg, ".");
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7fe fc97 	bl	8000150 <strlen>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4942      	ldr	r1, [pc, #264]	; (8001934 <getOutputMsg+0x220>)
 800182c:	461a      	mov	r2, r3
 800182e:	460b      	mov	r3, r1
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	8013      	strh	r3, [r2, #0]
    itoa_user((int)speedDecimalPart, temp, 10);
 8001834:	8bbb      	ldrh	r3, [r7, #28]
 8001836:	f107 0108 	add.w	r1, r7, #8
 800183a:	220a      	movs	r2, #10
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f885 	bl	800194c <itoa_user>
    if (speedDecimalPart < 10) {
 8001842:	8bbb      	ldrh	r3, [r7, #28]
 8001844:	2b09      	cmp	r3, #9
 8001846:	d805      	bhi.n	8001854 <getOutputMsg+0x140>
        temp[2] = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	72bb      	strb	r3, [r7, #10]
        temp[1] = temp[0];
 800184c:	7a3b      	ldrb	r3, [r7, #8]
 800184e:	727b      	strb	r3, [r7, #9]
        temp[0] = '0';
 8001850:	2330      	movs	r3, #48	; 0x30
 8001852:	723b      	strb	r3, [r7, #8]
    }
    strcat(msg, temp);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4619      	mov	r1, r3
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f003 f9a4 	bl	8004ba8 <strcat>
    strcat(msg, ",CCR=");
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7fe fc75 	bl	8000150 <strlen>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a32      	ldr	r2, [pc, #200]	; (8001938 <getOutputMsg+0x224>)
 8001870:	6810      	ldr	r0, [r2, #0]
 8001872:	6018      	str	r0, [r3, #0]
 8001874:	8892      	ldrh	r2, [r2, #4]
 8001876:	809a      	strh	r2, [r3, #4]
    itoa_user((int)TIM4->CCR1, temp, 10);
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <getOutputMsg+0x228>)
 800187a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187c:	4618      	mov	r0, r3
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	220a      	movs	r2, #10
 8001884:	4619      	mov	r1, r3
 8001886:	f000 f861 	bl	800194c <itoa_user>
    strcat(msg, temp);
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4619      	mov	r1, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f003 f989 	bl	8004ba8 <strcat>
    strcat(msg, ",PSC=");
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7fe fc5a 	bl	8000150 <strlen>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <getOutputMsg+0x22c>)
 80018a6:	6810      	ldr	r0, [r2, #0]
 80018a8:	6018      	str	r0, [r3, #0]
 80018aa:	8892      	ldrh	r2, [r2, #4]
 80018ac:	809a      	strh	r2, [r3, #4]
    itoa_user((int)TIM4->PSC, temp, 10);
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <getOutputMsg+0x228>)
 80018b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b2:	4618      	mov	r0, r3
 80018b4:	f107 0308 	add.w	r3, r7, #8
 80018b8:	220a      	movs	r2, #10
 80018ba:	4619      	mov	r1, r3
 80018bc:	f000 f846 	bl	800194c <itoa_user>
    strcat(msg, temp);
 80018c0:	f107 0308 	add.w	r3, r7, #8
 80018c4:	4619      	mov	r1, r3
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f003 f96e 	bl	8004ba8 <strcat>
    strcat(msg, ",ARR=");
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7fe fc3f 	bl	8000150 <strlen>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <getOutputMsg+0x230>)
 80018dc:	6810      	ldr	r0, [r2, #0]
 80018de:	6018      	str	r0, [r3, #0]
 80018e0:	8892      	ldrh	r2, [r2, #4]
 80018e2:	809a      	strh	r2, [r3, #4]
    itoa_user((int)TIM4->ARR, temp, 10);
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <getOutputMsg+0x228>)
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	4618      	mov	r0, r3
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	220a      	movs	r2, #10
 80018f0:	4619      	mov	r1, r3
 80018f2:	f000 f82b 	bl	800194c <itoa_user>
    strcat(msg, temp);
 80018f6:	f107 0308 	add.w	r3, r7, #8
 80018fa:	4619      	mov	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f003 f953 	bl	8004ba8 <strcat>
    strcat(msg, ";\r\n\0");
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe fc24 	bl	8000150 <strlen>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <getOutputMsg+0x234>)
 8001912:	6810      	ldr	r0, [r2, #0]
 8001914:	6018      	str	r0, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	20000254 	.word	0x20000254
 8001924:	408f4000 	.word	0x408f4000
 8001928:	cccccccd 	.word	0xcccccccd
 800192c:	08007b10 	.word	0x08007b10
 8001930:	08007b14 	.word	0x08007b14
 8001934:	08007b1c 	.word	0x08007b1c
 8001938:	08007b20 	.word	0x08007b20
 800193c:	40000800 	.word	0x40000800
 8001940:	08007b28 	.word	0x08007b28
 8001944:	08007b30 	.word	0x08007b30
 8001948:	08007b38 	.word	0x08007b38

0800194c <itoa_user>:

void itoa_user(int num_in, char* str, uint8_t useless) {
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	4613      	mov	r3, r2
 8001958:	71fb      	strb	r3, [r7, #7]
    UNUSED(useless);
    int num = num_in;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	61fb      	str	r3, [r7, #28]
    uint8_t i = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	76fb      	strb	r3, [r7, #27]
    uint8_t temp = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	74bb      	strb	r3, [r7, #18]
    uint32_t div = 10000000;
 8001966:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <itoa_user+0xb8>)
 8001968:	617b      	str	r3, [r7, #20]
    bool shouldStart = false;
 800196a:	2300      	movs	r3, #0
 800196c:	74fb      	strb	r3, [r7, #19]
    if (num == 0) {
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <itoa_user+0x38>
        str[0] = '0';
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2230      	movs	r2, #48	; 0x30
 8001978:	701a      	strb	r2, [r3, #0]
        str[1] = 0;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	3301      	adds	r3, #1
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
        return;
 8001982:	e03a      	b.n	80019fa <itoa_user+0xae>
    }
    if (num < 0) {
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	da2f      	bge.n	80019ea <itoa_user+0x9e>
        str[i] = '-';
 800198a:	7efb      	ldrb	r3, [r7, #27]
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4413      	add	r3, r2
 8001990:	222d      	movs	r2, #45	; 0x2d
 8001992:	701a      	strb	r2, [r3, #0]
        i++;
 8001994:	7efb      	ldrb	r3, [r7, #27]
 8001996:	3301      	adds	r3, #1
 8001998:	76fb      	strb	r3, [r7, #27]
        num = -num;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	425b      	negs	r3, r3
 800199e:	61fb      	str	r3, [r7, #28]
    }

    while (div != 0) {
 80019a0:	e023      	b.n	80019ea <itoa_user+0x9e>
        temp = num / div;
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	74bb      	strb	r3, [r7, #18]
        if (temp != 0 || shouldStart) {
 80019ac:	7cbb      	ldrb	r3, [r7, #18]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d102      	bne.n	80019b8 <itoa_user+0x6c>
 80019b2:	7cfb      	ldrb	r3, [r7, #19]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d012      	beq.n	80019de <itoa_user+0x92>
            shouldStart = true;
 80019b8:	2301      	movs	r3, #1
 80019ba:	74fb      	strb	r3, [r7, #19]
            str[i] = temp + '0';
 80019bc:	7efb      	ldrb	r3, [r7, #27]
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	4413      	add	r3, r2
 80019c2:	7cba      	ldrb	r2, [r7, #18]
 80019c4:	3230      	adds	r2, #48	; 0x30
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
            i++;
 80019ca:	7efb      	ldrb	r3, [r7, #27]
 80019cc:	3301      	adds	r3, #1
 80019ce:	76fb      	strb	r3, [r7, #27]
            num = num - temp * div;
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	7cbb      	ldrb	r3, [r7, #18]
 80019d4:	6979      	ldr	r1, [r7, #20]
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]
        }
        div /= 10;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	4a09      	ldr	r2, [pc, #36]	; (8001a08 <itoa_user+0xbc>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	08db      	lsrs	r3, r3, #3
 80019e8:	617b      	str	r3, [r7, #20]
    while (div != 0) {
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1d8      	bne.n	80019a2 <itoa_user+0x56>
    }

    str[i] = 0;
 80019f0:	7efb      	ldrb	r3, [r7, #27]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	4413      	add	r3, r2
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]

}
 80019fa:	3724      	adds	r7, #36	; 0x24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	00989680 	.word	0x00989680
 8001a08:	cccccccd 	.word	0xcccccccd

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_MspInit+0x44>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_MspInit+0x44>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6193      	str	r3, [r2, #24]
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_MspInit+0x44>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_MspInit+0x44>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_MspInit+0x44>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_MspInit+0x44>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001a42:	2005      	movs	r0, #5
 8001a44:	f000 fdb2 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000

08001a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001a58:	e7fe      	b.n	8001a58 <NMI_Handler+0x4>

08001a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <HardFault_Handler+0x4>

08001a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <MemManage_Handler+0x4>

08001a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 fa69 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001aa8:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <USART1_IRQHandler+0x14>)
 8001aaa:	f002 fac3 	bl	8004034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  UART_IDLE_Callback(&huart1);
 8001aae:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <USART1_IRQHandler+0x14>)
 8001ab0:	f7ff fbaa 	bl	8001208 <UART_IDLE_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200002a4 	.word	0x200002a4

08001abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <_kill>:

int _kill(int pid, int sig)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ad4:	f003 f836 	bl	8004b44 <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2216      	movs	r2, #22
 8001adc:	601a      	str	r2, [r3, #0]
  return -1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <_exit>:

void _exit (int status)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001af2:	f04f 31ff 	mov.w	r1, #4294967295
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffe7 	bl	8001aca <_kill>
  while (1) {}    /* Make sure we hang here */
 8001afc:	e7fe      	b.n	8001afc <_exit+0x12>

08001afe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e00a      	b.n	8001b26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b10:	f3af 8000 	nop.w
 8001b14:	4601      	mov	r1, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	60ba      	str	r2, [r7, #8]
 8001b1c:	b2ca      	uxtb	r2, r1
 8001b1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3301      	adds	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dbf0      	blt.n	8001b10 <_read+0x12>
  }

  return len;
 8001b2e:	687b      	ldr	r3, [r7, #4]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e009      	b.n	8001b5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	60ba      	str	r2, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf1      	blt.n	8001b4a <_write+0x12>
  }
  return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_close>:

int _close(int file)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b96:	605a      	str	r2, [r3, #4]
  return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr

08001ba4 <_isatty>:

int _isatty(int file)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <_sbrk+0x5c>)
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <_sbrk+0x60>)
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <_sbrk+0x64>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <_sbrk+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d207      	bcs.n	8001c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c00:	f002 ffa0 	bl	8004b44 <__errno>
 8001c04:	4603      	mov	r3, r0
 8001c06:	220c      	movs	r2, #12
 8001c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e009      	b.n	8001c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <_sbrk+0x64>)
 8001c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20005000 	.word	0x20005000
 8001c30:	00000400 	.word	0x00000400
 8001c34:	20000258 	.word	0x20000258
 8001c38:	20000300 	.word	0x20000300

08001c3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	615a      	str	r2, [r3, #20]
 8001c68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001c6c:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <MX_TIM4_Init+0xb0>)
 8001c6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8;
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001c72:	2208      	movs	r2, #8
 8001c74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4000;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001c7e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001c82:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c90:	4818      	ldr	r0, [pc, #96]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001c92:	f001 fc33 	bl	80034fc <HAL_TIM_PWM_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001c9c:	f7ff fa55 	bl	800114a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ca8:	f107 0320 	add.w	r3, r7, #32
 8001cac:	4619      	mov	r1, r3
 8001cae:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001cb0:	f002 f834 	bl	8003d1c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001cba:	f7ff fa46 	bl	800114a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001cc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001cc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001cd8:	f001 fd50 	bl	800377c <HAL_TIM_PWM_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001ce2:	f7ff fa32 	bl	800114a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ce6:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <MX_TIM4_Init+0xac>)
 8001ce8:	f000 f826 	bl	8001d38 <HAL_TIM_MspPostInit>

}
 8001cec:	bf00      	nop
 8001cee:	3728      	adds	r7, #40	; 0x28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000025c 	.word	0x2000025c
 8001cf8:	40000800 	.word	0x40000800

08001cfc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <HAL_TIM_PWM_MspInit+0x34>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10b      	bne.n	8001d26 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_TIM_PWM_MspInit+0x38>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_TIM_PWM_MspInit+0x38>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	61d3      	str	r3, [r2, #28]
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_TIM_PWM_MspInit+0x38>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	40000800 	.word	0x40000800
 8001d34:	40021000 	.word	0x40021000

08001d38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <HAL_TIM_MspPostInit+0x58>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d117      	bne.n	8001d88 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_TIM_MspPostInit+0x5c>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_TIM_MspPostInit+0x5c>)
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_TIM_MspPostInit+0x5c>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d70:	2340      	movs	r3, #64	; 0x40
 8001d72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_TIM_MspPostInit+0x60>)
 8001d84:	f000 fd06 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010c00 	.word	0x40010c00

08001d9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <MX_USART1_UART_Init+0x50>)
 8001da4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dd2:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_USART1_UART_Init+0x4c>)
 8001dd4:	f002 f800 	bl	8003dd8 <HAL_UART_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dde:	f7ff f9b4 	bl	800114a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200002a4 	.word	0x200002a4
 8001dec:	40013800 	.word	0x40013800

08001df0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <HAL_UART_MspInit+0x9c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d139      	bne.n	8001e84 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e10:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <HAL_UART_MspInit+0xa0>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a1e      	ldr	r2, [pc, #120]	; (8001e90 <HAL_UART_MspInit+0xa0>)
 8001e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <HAL_UART_MspInit+0xa0>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_UART_MspInit+0xa0>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_UART_MspInit+0xa0>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_UART_MspInit+0xa0>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	f107 0310 	add.w	r3, r7, #16
 8001e52:	4619      	mov	r1, r3
 8001e54:	480f      	ldr	r0, [pc, #60]	; (8001e94 <HAL_UART_MspInit+0xa4>)
 8001e56:	f000 fc9d 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4809      	ldr	r0, [pc, #36]	; (8001e94 <HAL_UART_MspInit+0xa4>)
 8001e70:	f000 fc90 	bl	8002794 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2101      	movs	r1, #1
 8001e78:	2025      	movs	r0, #37	; 0x25
 8001e7a:	f000 fba2 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e7e:	2025      	movs	r0, #37	; 0x25
 8001e80:	f000 fbbb 	bl	80025fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e84:	bf00      	nop
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010800 	.word	0x40010800

08001e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e98:	f7ff fed0 	bl	8001c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e9c:	480b      	ldr	r0, [pc, #44]	; (8001ecc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e9e:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001eb4:	4c09      	ldr	r4, [pc, #36]	; (8001edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f002 fe45 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ec6:	f7ff f885 	bl	8000fd4 <main>
  bx lr
 8001eca:	4770      	bx	lr
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ed4:	08007fa4 	.word	0x08007fa4
  ldr r2, =_sbss
 8001ed8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001edc:	20000300 	.word	0x20000300

08001ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC1_2_IRQHandler>
	...

08001ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_Init+0x28>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_Init+0x28>)
 8001eee:	f043 0310 	orr.w	r3, r3, #16
 8001ef2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 fb59 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f808 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff fd84 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40022000 	.word	0x40022000

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0x54>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x58>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 fb71 	bl	8002616 <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 fb39 	bl	80025c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <HAL_InitTick+0x5c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000004 	.word	0x20000004
 8001f68:	2000000c 	.word	0x2000000c
 8001f6c:	20000008 	.word	0x20000008

08001f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_IncTick+0x1c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_IncTick+0x20>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a03      	ldr	r2, [pc, #12]	; (8001f90 <HAL_IncTick+0x20>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	200002ec 	.word	0x200002ec

08001f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return uwTick;
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <HAL_GetTick+0x10>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	200002ec 	.word	0x200002ec

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff fff0 	bl	8001f94 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffe0 	bl	8001f94 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000000c 	.word	0x2000000c

08001ff0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0be      	b.n	8002190 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe ff00 	bl	8000e34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f9ab 	bl	8002390 <ADC_ConversionStop_Disable>
 800203a:	4603      	mov	r3, r0
 800203c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 8099 	bne.w	800217e <HAL_ADC_Init+0x18e>
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 8095 	bne.w	800217e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800205c:	f023 0302 	bic.w	r3, r3, #2
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002070:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7b1b      	ldrb	r3, [r3, #12]
 8002076:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002078:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	4313      	orrs	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002088:	d003      	beq.n	8002092 <HAL_ADC_Init+0xa2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d102      	bne.n	8002098 <HAL_ADC_Init+0xa8>
 8002092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002096:	e000      	b.n	800209a <HAL_ADC_Init+0xaa>
 8002098:	2300      	movs	r3, #0
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7d1b      	ldrb	r3, [r3, #20]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d119      	bne.n	80020dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7b1b      	ldrb	r3, [r3, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d109      	bne.n	80020c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	035a      	lsls	r2, r3, #13
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	e00b      	b.n	80020dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	f043 0220 	orr.w	r2, r3, #32
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	4b28      	ldr	r3, [pc, #160]	; (8002198 <HAL_ADC_Init+0x1a8>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	430b      	orrs	r3, r1
 8002102:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800210c:	d003      	beq.n	8002116 <HAL_ADC_Init+0x126>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d104      	bne.n	8002120 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	3b01      	subs	r3, #1
 800211c:	051b      	lsls	r3, r3, #20
 800211e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	430a      	orrs	r2, r1
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_ADC_Init+0x1ac>)
 800213c:	4013      	ands	r3, r2
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	429a      	cmp	r2, r3
 8002142:	d10b      	bne.n	800215c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	f043 0201 	orr.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800215a:	e018      	b.n	800218e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	f023 0312 	bic.w	r3, r3, #18
 8002164:	f043 0210 	orr.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	f043 0201 	orr.w	r2, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800217c:	e007      	b.n	800218e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	ffe1f7fd 	.word	0xffe1f7fd
 800219c:	ff1f0efe 	.word	0xff1f0efe

080021a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x20>
 80021bc:	2302      	movs	r3, #2
 80021be:	e0dc      	b.n	800237a <HAL_ADC_ConfigChannel+0x1da>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d81c      	bhi.n	800220a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3b05      	subs	r3, #5
 80021e2:	221f      	movs	r2, #31
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4019      	ands	r1, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	3b05      	subs	r3, #5
 80021fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	635a      	str	r2, [r3, #52]	; 0x34
 8002208:	e03c      	b.n	8002284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d81c      	bhi.n	800224c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b23      	subs	r3, #35	; 0x23
 8002224:	221f      	movs	r2, #31
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	4019      	ands	r1, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	3b23      	subs	r3, #35	; 0x23
 800223e:	fa00 f203 	lsl.w	r2, r0, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
 800224a:	e01b      	b.n	8002284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	3b41      	subs	r3, #65	; 0x41
 800225e:	221f      	movs	r2, #31
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	4019      	ands	r1, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b41      	subs	r3, #65	; 0x41
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b09      	cmp	r3, #9
 800228a:	d91c      	bls.n	80022c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68d9      	ldr	r1, [r3, #12]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	3b1e      	subs	r3, #30
 800229e:	2207      	movs	r2, #7
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4019      	ands	r1, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6898      	ldr	r0, [r3, #8]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	3b1e      	subs	r3, #30
 80022b8:	fa00 f203 	lsl.w	r2, r0, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	e019      	b.n	80022fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6919      	ldr	r1, [r3, #16]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	2207      	movs	r2, #7
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	4019      	ands	r1, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6898      	ldr	r0, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d003      	beq.n	800230a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002306:	2b11      	cmp	r3, #17
 8002308:	d132      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_ADC_ConfigChannel+0x1e4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d125      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d126      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002330:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b10      	cmp	r3, #16
 8002338:	d11a      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <HAL_ADC_ConfigChannel+0x1e8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <HAL_ADC_ConfigChannel+0x1ec>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	0c9a      	lsrs	r2, r3, #18
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002350:	e002      	b.n	8002358 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x1b2>
 800235e:	e007      	b.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40012400 	.word	0x40012400
 8002388:	20000004 	.word	0x20000004
 800238c:	431bde83 	.word	0x431bde83

08002390 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d12e      	bne.n	8002408 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0201 	bic.w	r2, r2, #1
 80023b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ba:	f7ff fdeb 	bl	8001f94 <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023c0:	e01b      	b.n	80023fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023c2:	f7ff fde7 	bl	8001f94 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d914      	bls.n	80023fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d10d      	bne.n	80023fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e2:	f043 0210 	orr.w	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e007      	b.n	800240a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d0dc      	beq.n	80023c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002430:	4013      	ands	r3, r2
 8002432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800243c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002446:	4a04      	ldr	r2, [pc, #16]	; (8002458 <__NVIC_SetPriorityGrouping+0x44>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	60d3      	str	r3, [r2, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <__NVIC_GetPriorityGrouping+0x18>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	f003 0307 	and.w	r3, r3, #7
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	2b00      	cmp	r3, #0
 8002488:	db0b      	blt.n	80024a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	4906      	ldr	r1, [pc, #24]	; (80024ac <__NVIC_EnableIRQ+0x34>)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	2001      	movs	r0, #1
 800249a:	fa00 f202 	lsl.w	r2, r0, r2
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	; (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	; 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002578:	d301      	bcc.n	800257e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e00f      	b.n	800259e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <SysTick_Config+0x40>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	210f      	movs	r1, #15
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f7ff ff90 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002590:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <SysTick_Config+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002596:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <SysTick_Config+0x40>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff2d 	bl	8002414 <__NVIC_SetPriorityGrouping>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff42 	bl	800245c <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff90 	bl	8002504 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5f 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff35 	bl	8002478 <__NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa2 	bl	8002568 <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d008      	beq.n	8002658 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2204      	movs	r2, #4
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e020      	b.n	800269a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 020e 	bic.w	r2, r2, #14
 8002666:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f202 	lsl.w	r2, r1, r2
 8002686:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d005      	beq.n	80026c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2204      	movs	r2, #4
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	e051      	b.n	800276c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 020e 	bic.w	r2, r2, #14
 80026d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a22      	ldr	r2, [pc, #136]	; (8002778 <HAL_DMA_Abort_IT+0xd4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d029      	beq.n	8002746 <HAL_DMA_Abort_IT+0xa2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a21      	ldr	r2, [pc, #132]	; (800277c <HAL_DMA_Abort_IT+0xd8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d022      	beq.n	8002742 <HAL_DMA_Abort_IT+0x9e>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <HAL_DMA_Abort_IT+0xdc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01a      	beq.n	800273c <HAL_DMA_Abort_IT+0x98>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_DMA_Abort_IT+0xe0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d012      	beq.n	8002736 <HAL_DMA_Abort_IT+0x92>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <HAL_DMA_Abort_IT+0xe4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00a      	beq.n	8002730 <HAL_DMA_Abort_IT+0x8c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1b      	ldr	r2, [pc, #108]	; (800278c <HAL_DMA_Abort_IT+0xe8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d102      	bne.n	800272a <HAL_DMA_Abort_IT+0x86>
 8002724:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002728:	e00e      	b.n	8002748 <HAL_DMA_Abort_IT+0xa4>
 800272a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272e:	e00b      	b.n	8002748 <HAL_DMA_Abort_IT+0xa4>
 8002730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002734:	e008      	b.n	8002748 <HAL_DMA_Abort_IT+0xa4>
 8002736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273a:	e005      	b.n	8002748 <HAL_DMA_Abort_IT+0xa4>
 800273c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002740:	e002      	b.n	8002748 <HAL_DMA_Abort_IT+0xa4>
 8002742:	2310      	movs	r3, #16
 8002744:	e000      	b.n	8002748 <HAL_DMA_Abort_IT+0xa4>
 8002746:	2301      	movs	r3, #1
 8002748:	4a11      	ldr	r2, [pc, #68]	; (8002790 <HAL_DMA_Abort_IT+0xec>)
 800274a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
    } 
  }
  return status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40020008 	.word	0x40020008
 800277c:	4002001c 	.word	0x4002001c
 8002780:	40020030 	.word	0x40020030
 8002784:	40020044 	.word	0x40020044
 8002788:	40020058 	.word	0x40020058
 800278c:	4002006c 	.word	0x4002006c
 8002790:	40020000 	.word	0x40020000

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b08b      	sub	sp, #44	; 0x2c
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a6:	e169      	b.n	8002a7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027a8:	2201      	movs	r2, #1
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f040 8158 	bne.w	8002a76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a9a      	ldr	r2, [pc, #616]	; (8002a34 <HAL_GPIO_Init+0x2a0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d05e      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027d0:	4a98      	ldr	r2, [pc, #608]	; (8002a34 <HAL_GPIO_Init+0x2a0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d875      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027d6:	4a98      	ldr	r2, [pc, #608]	; (8002a38 <HAL_GPIO_Init+0x2a4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d058      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027dc:	4a96      	ldr	r2, [pc, #600]	; (8002a38 <HAL_GPIO_Init+0x2a4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d86f      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027e2:	4a96      	ldr	r2, [pc, #600]	; (8002a3c <HAL_GPIO_Init+0x2a8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d052      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027e8:	4a94      	ldr	r2, [pc, #592]	; (8002a3c <HAL_GPIO_Init+0x2a8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d869      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027ee:	4a94      	ldr	r2, [pc, #592]	; (8002a40 <HAL_GPIO_Init+0x2ac>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d04c      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 80027f4:	4a92      	ldr	r2, [pc, #584]	; (8002a40 <HAL_GPIO_Init+0x2ac>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d863      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 80027fa:	4a92      	ldr	r2, [pc, #584]	; (8002a44 <HAL_GPIO_Init+0x2b0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d046      	beq.n	800288e <HAL_GPIO_Init+0xfa>
 8002800:	4a90      	ldr	r2, [pc, #576]	; (8002a44 <HAL_GPIO_Init+0x2b0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d85d      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 8002806:	2b12      	cmp	r3, #18
 8002808:	d82a      	bhi.n	8002860 <HAL_GPIO_Init+0xcc>
 800280a:	2b12      	cmp	r3, #18
 800280c:	d859      	bhi.n	80028c2 <HAL_GPIO_Init+0x12e>
 800280e:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <HAL_GPIO_Init+0x80>)
 8002810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002814:	0800288f 	.word	0x0800288f
 8002818:	08002869 	.word	0x08002869
 800281c:	0800287b 	.word	0x0800287b
 8002820:	080028bd 	.word	0x080028bd
 8002824:	080028c3 	.word	0x080028c3
 8002828:	080028c3 	.word	0x080028c3
 800282c:	080028c3 	.word	0x080028c3
 8002830:	080028c3 	.word	0x080028c3
 8002834:	080028c3 	.word	0x080028c3
 8002838:	080028c3 	.word	0x080028c3
 800283c:	080028c3 	.word	0x080028c3
 8002840:	080028c3 	.word	0x080028c3
 8002844:	080028c3 	.word	0x080028c3
 8002848:	080028c3 	.word	0x080028c3
 800284c:	080028c3 	.word	0x080028c3
 8002850:	080028c3 	.word	0x080028c3
 8002854:	080028c3 	.word	0x080028c3
 8002858:	08002871 	.word	0x08002871
 800285c:	08002885 	.word	0x08002885
 8002860:	4a79      	ldr	r2, [pc, #484]	; (8002a48 <HAL_GPIO_Init+0x2b4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002866:	e02c      	b.n	80028c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	623b      	str	r3, [r7, #32]
          break;
 800286e:	e029      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	3304      	adds	r3, #4
 8002876:	623b      	str	r3, [r7, #32]
          break;
 8002878:	e024      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	3308      	adds	r3, #8
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e01f      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	330c      	adds	r3, #12
 800288a:	623b      	str	r3, [r7, #32]
          break;
 800288c:	e01a      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002896:	2304      	movs	r3, #4
 8002898:	623b      	str	r3, [r7, #32]
          break;
 800289a:	e013      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a4:	2308      	movs	r3, #8
 80028a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	611a      	str	r2, [r3, #16]
          break;
 80028ae:	e009      	b.n	80028c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b0:	2308      	movs	r3, #8
 80028b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	615a      	str	r2, [r3, #20]
          break;
 80028ba:	e003      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
          break;
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x130>
          break;
 80028c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	2bff      	cmp	r3, #255	; 0xff
 80028c8:	d801      	bhi.n	80028ce <HAL_GPIO_Init+0x13a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	e001      	b.n	80028d2 <HAL_GPIO_Init+0x13e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	2bff      	cmp	r3, #255	; 0xff
 80028d8:	d802      	bhi.n	80028e0 <HAL_GPIO_Init+0x14c>
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	e002      	b.n	80028e6 <HAL_GPIO_Init+0x152>
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3b08      	subs	r3, #8
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	210f      	movs	r1, #15
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	431a      	orrs	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 80b1 	beq.w	8002a76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002914:	4b4d      	ldr	r3, [pc, #308]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_GPIO_Init+0x2b8>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800292c:	4a48      	ldr	r2, [pc, #288]	; (8002a50 <HAL_GPIO_Init+0x2bc>)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a40      	ldr	r2, [pc, #256]	; (8002a54 <HAL_GPIO_Init+0x2c0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_GPIO_Init+0x1ec>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a3f      	ldr	r2, [pc, #252]	; (8002a58 <HAL_GPIO_Init+0x2c4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00d      	beq.n	800297c <HAL_GPIO_Init+0x1e8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a3e      	ldr	r2, [pc, #248]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d007      	beq.n	8002978 <HAL_GPIO_Init+0x1e4>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3d      	ldr	r2, [pc, #244]	; (8002a60 <HAL_GPIO_Init+0x2cc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_GPIO_Init+0x1e0>
 8002970:	2303      	movs	r3, #3
 8002972:	e006      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 8002974:	2304      	movs	r3, #4
 8002976:	e004      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 8002978:	2302      	movs	r3, #2
 800297a:	e002      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_GPIO_Init+0x1ee>
 8002980:	2300      	movs	r3, #0
 8002982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	4093      	lsls	r3, r2
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002992:	492f      	ldr	r1, [pc, #188]	; (8002a50 <HAL_GPIO_Init+0x2bc>)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	089b      	lsrs	r3, r3, #2
 8002998:	3302      	adds	r3, #2
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d006      	beq.n	80029ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	492c      	ldr	r1, [pc, #176]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]
 80029b8:	e006      	b.n	80029c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029ba:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	4928      	ldr	r1, [pc, #160]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d006      	beq.n	80029e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029d4:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	4922      	ldr	r1, [pc, #136]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60cb      	str	r3, [r1, #12]
 80029e0:	e006      	b.n	80029f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	491e      	ldr	r1, [pc, #120]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d006      	beq.n	8002a0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4918      	ldr	r1, [pc, #96]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	4914      	ldr	r1, [pc, #80]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d021      	beq.n	8002a68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	490e      	ldr	r1, [pc, #56]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e021      	b.n	8002a76 <HAL_GPIO_Init+0x2e2>
 8002a32:	bf00      	nop
 8002a34:	10320000 	.word	0x10320000
 8002a38:	10310000 	.word	0x10310000
 8002a3c:	10220000 	.word	0x10220000
 8002a40:	10210000 	.word	0x10210000
 8002a44:	10120000 	.word	0x10120000
 8002a48:	10110000 	.word	0x10110000
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40010800 	.word	0x40010800
 8002a58:	40010c00 	.word	0x40010c00
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40011400 	.word	0x40011400
 8002a64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_GPIO_Init+0x304>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	4909      	ldr	r1, [pc, #36]	; (8002a98 <HAL_GPIO_Init+0x304>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	3301      	adds	r3, #1
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f47f ae8e 	bne.w	80027a8 <HAL_GPIO_Init+0x14>
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	372c      	adds	r7, #44	; 0x2c
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ab8:	e003      	b.n	8002ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	041a      	lsls	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	611a      	str	r2, [r3, #16]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e272      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8087 	beq.w	8002bfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aec:	4b92      	ldr	r3, [pc, #584]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d00c      	beq.n	8002b12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af8:	4b8f      	ldr	r3, [pc, #572]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d112      	bne.n	8002b2a <HAL_RCC_OscConfig+0x5e>
 8002b04:	4b8c      	ldr	r3, [pc, #560]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b10:	d10b      	bne.n	8002b2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b12:	4b89      	ldr	r3, [pc, #548]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d06c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x12c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d168      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e24c      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x76>
 8002b34:	4b80      	ldr	r3, [pc, #512]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a7f      	ldr	r2, [pc, #508]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e02e      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x98>
 8002b4a:	4b7b      	ldr	r3, [pc, #492]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7a      	ldr	r2, [pc, #488]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	4b78      	ldr	r3, [pc, #480]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a77      	ldr	r2, [pc, #476]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e01d      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0xbc>
 8002b6e:	4b72      	ldr	r3, [pc, #456]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a71      	ldr	r2, [pc, #452]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a6e      	ldr	r2, [pc, #440]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0xd4>
 8002b88:	4b6b      	ldr	r3, [pc, #428]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a6a      	ldr	r2, [pc, #424]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a67      	ldr	r2, [pc, #412]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f9f4 	bl	8001f94 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7ff f9f0 	bl	8001f94 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e200      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc2:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xe4>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7ff f9e0 	bl	8001f94 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7ff f9dc 	bl	8001f94 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1ec      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bea:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x10c>
 8002bf6:	e000      	b.n	8002bfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d063      	beq.n	8002cce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c06:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00b      	beq.n	8002c2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c12:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d11c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x18c>
 8002c1e:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d116      	bne.n	8002c58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	4b43      	ldr	r3, [pc, #268]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d005      	beq.n	8002c42 <HAL_RCC_OscConfig+0x176>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d001      	beq.n	8002c42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e1c0      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c42:	4b3d      	ldr	r3, [pc, #244]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4939      	ldr	r1, [pc, #228]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	e03a      	b.n	8002cce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c60:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7ff f995 	bl	8001f94 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7ff f991 	bl	8001f94 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e1a1      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	4b2a      	ldr	r3, [pc, #168]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4927      	ldr	r1, [pc, #156]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	600b      	str	r3, [r1, #0]
 8002ca0:	e015      	b.n	8002cce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_RCC_OscConfig+0x270>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff f974 	bl	8001f94 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb0:	f7ff f970 	bl	8001f94 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e180      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d03a      	beq.n	8002d50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d019      	beq.n	8002d16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce2:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce8:	f7ff f954 	bl	8001f94 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf0:	f7ff f950 	bl	8001f94 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e160      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f000 face 	bl	80032b0 <RCC_Delay>
 8002d14:	e01c      	b.n	8002d50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_RCC_OscConfig+0x274>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7ff f93a 	bl	8001f94 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d22:	e00f      	b.n	8002d44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d24:	f7ff f936 	bl	8001f94 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d908      	bls.n	8002d44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e146      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	42420000 	.word	0x42420000
 8002d40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b92      	ldr	r3, [pc, #584]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e9      	bne.n	8002d24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80a6 	beq.w	8002eaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d62:	4b8b      	ldr	r3, [pc, #556]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	4b88      	ldr	r3, [pc, #544]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4a87      	ldr	r2, [pc, #540]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	61d3      	str	r3, [r2, #28]
 8002d7a:	4b85      	ldr	r3, [pc, #532]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b82      	ldr	r3, [pc, #520]	; (8002f94 <HAL_RCC_OscConfig+0x4c8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4b7f      	ldr	r3, [pc, #508]	; (8002f94 <HAL_RCC_OscConfig+0x4c8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a7e      	ldr	r2, [pc, #504]	; (8002f94 <HAL_RCC_OscConfig+0x4c8>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7ff f8f7 	bl	8001f94 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7ff f8f3 	bl	8001f94 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b64      	cmp	r3, #100	; 0x64
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e103      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	4b75      	ldr	r3, [pc, #468]	; (8002f94 <HAL_RCC_OscConfig+0x4c8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x312>
 8002dd0:	4b6f      	ldr	r3, [pc, #444]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	4a6e      	ldr	r2, [pc, #440]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6213      	str	r3, [r2, #32]
 8002ddc:	e02d      	b.n	8002e3a <HAL_RCC_OscConfig+0x36e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x334>
 8002de6:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a69      	ldr	r2, [pc, #420]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6213      	str	r3, [r2, #32]
 8002df2:	4b67      	ldr	r3, [pc, #412]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4a66      	ldr	r2, [pc, #408]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	6213      	str	r3, [r2, #32]
 8002dfe:	e01c      	b.n	8002e3a <HAL_RCC_OscConfig+0x36e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d10c      	bne.n	8002e22 <HAL_RCC_OscConfig+0x356>
 8002e08:	4b61      	ldr	r3, [pc, #388]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4a60      	ldr	r2, [pc, #384]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	f043 0304 	orr.w	r3, r3, #4
 8002e12:	6213      	str	r3, [r2, #32]
 8002e14:	4b5e      	ldr	r3, [pc, #376]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4a5d      	ldr	r2, [pc, #372]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6213      	str	r3, [r2, #32]
 8002e20:	e00b      	b.n	8002e3a <HAL_RCC_OscConfig+0x36e>
 8002e22:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	4a5a      	ldr	r2, [pc, #360]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	6213      	str	r3, [r2, #32]
 8002e2e:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	4a57      	ldr	r2, [pc, #348]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d015      	beq.n	8002e6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7ff f8a7 	bl	8001f94 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7ff f8a3 	bl	8001f94 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0b1      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	4b4b      	ldr	r3, [pc, #300]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ee      	beq.n	8002e4a <HAL_RCC_OscConfig+0x37e>
 8002e6c:	e014      	b.n	8002e98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7ff f891 	bl	8001f94 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7ff f88d 	bl	8001f94 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e09b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8c:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ee      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d105      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e9e:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4a3b      	ldr	r2, [pc, #236]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 8087 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb4:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d061      	beq.n	8002f84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d146      	bne.n	8002f56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec8:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7ff f861 	bl	8001f94 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7ff f85d 	bl	8001f94 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e06d      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee8:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d108      	bne.n	8002f10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4921      	ldr	r1, [pc, #132]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a19      	ldr	r1, [r3, #32]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	430b      	orrs	r3, r1
 8002f22:	491b      	ldr	r1, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_OscConfig+0x4cc>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7ff f831 	bl	8001f94 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f36:	f7ff f82d 	bl	8001f94 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e03d      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x46a>
 8002f54:	e035      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_RCC_OscConfig+0x4cc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7ff f81a 	bl	8001f94 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7ff f816 	bl	8001f94 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e026      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x498>
 8002f82:	e01e      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e019      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
 8002f98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_OscConfig+0x500>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d106      	bne.n	8002fbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0d0      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d910      	bls.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4965      	ldr	r1, [pc, #404]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b8      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800302c:	4b59      	ldr	r3, [pc, #356]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a58      	ldr	r2, [pc, #352]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800304e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	494d      	ldr	r1, [pc, #308]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d040      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b47      	ldr	r3, [pc, #284]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d115      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e073      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06b      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4936      	ldr	r1, [pc, #216]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7fe ff68 	bl	8001f94 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fe ff64 	bl	8001f94 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e053      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d210      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0207 	bic.w	r2, r3, #7
 8003106:	4922      	ldr	r1, [pc, #136]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e032      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4916      	ldr	r1, [pc, #88]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	490e      	ldr	r1, [pc, #56]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315e:	f000 f821 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003162:	4602      	mov	r2, r0
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	490a      	ldr	r1, [pc, #40]	; (8003198 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	5ccb      	ldrb	r3, [r1, r3]
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <HAL_RCC_ClockConfig+0x1cc>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_ClockConfig+0x1d0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fec6 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000
 8003194:	40021000 	.word	0x40021000
 8003198:	08007b40 	.word	0x08007b40
 800319c:	20000004 	.word	0x20000004
 80031a0:	20000008 	.word	0x20000008

080031a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	2300      	movs	r3, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <HAL_RCC_GetSysClockFreq+0x94>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d002      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x30>
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d003      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x36>
 80031d2:	e027      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_RCC_GetSysClockFreq+0x98>)
 80031d6:	613b      	str	r3, [r7, #16]
      break;
 80031d8:	e027      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	0c9b      	lsrs	r3, r3, #18
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d010      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_GetSysClockFreq+0x94>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	0c5b      	lsrs	r3, r3, #17
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a0d      	ldr	r2, [pc, #52]	; (800323c <HAL_RCC_GetSysClockFreq+0x98>)
 8003206:	fb03 f202 	mul.w	r2, r3, r2
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	e004      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	613b      	str	r3, [r7, #16]
      break;
 8003222:	e002      	b.n	800322a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetSysClockFreq+0x98>)
 8003226:	613b      	str	r3, [r7, #16]
      break;
 8003228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800322a:	693b      	ldr	r3, [r7, #16]
}
 800322c:	4618      	mov	r0, r3
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	007a1200 	.word	0x007a1200
 8003240:	08007b58 	.word	0x08007b58
 8003244:	08007b68 	.word	0x08007b68
 8003248:	003d0900 	.word	0x003d0900

0800324c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003250:	4b02      	ldr	r3, [pc, #8]	; (800325c <HAL_RCC_GetHCLKFreq+0x10>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr
 800325c:	20000004 	.word	0x20000004

08003260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003264:	f7ff fff2 	bl	800324c <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40021000 	.word	0x40021000
 8003284:	08007b50 	.word	0x08007b50

08003288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800328c:	f7ff ffde 	bl	800324c <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	0adb      	lsrs	r3, r3, #11
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	; (80032ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08007b50 	.word	0x08007b50

080032b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <RCC_Delay+0x34>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <RCC_Delay+0x38>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0a5b      	lsrs	r3, r3, #9
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	fb02 f303 	mul.w	r3, r2, r3
 80032ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032cc:	bf00      	nop
  }
  while (Delay --);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1e5a      	subs	r2, r3, #1
 80032d2:	60fa      	str	r2, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1f9      	bne.n	80032cc <RCC_Delay+0x1c>
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	20000004 	.word	0x20000004
 80032e8:	10624dd3 	.word	0x10624dd3

080032ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d07d      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003308:	2300      	movs	r3, #0
 800330a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330c:	4b4f      	ldr	r3, [pc, #316]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10d      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003318:	4b4c      	ldr	r3, [pc, #304]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4a4b      	ldr	r2, [pc, #300]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003322:	61d3      	str	r3, [r2, #28]
 8003324:	4b49      	ldr	r3, [pc, #292]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003330:	2301      	movs	r3, #1
 8003332:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	4b46      	ldr	r3, [pc, #280]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d118      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003340:	4b43      	ldr	r3, [pc, #268]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a42      	ldr	r2, [pc, #264]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334c:	f7fe fe22 	bl	8001f94 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003352:	e008      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003354:	f7fe fe1e 	bl	8001f94 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e06d      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003366:	4b3a      	ldr	r3, [pc, #232]	; (8003450 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003372:	4b36      	ldr	r3, [pc, #216]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d02e      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	429a      	cmp	r2, r3
 800338e:	d027      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003390:	4b2e      	ldr	r3, [pc, #184]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003398:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800339a:	4b2e      	ldr	r3, [pc, #184]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033a0:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033a6:	4a29      	ldr	r2, [pc, #164]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d014      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b6:	f7fe fded 	bl	8001f94 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe fde9 	bl	8001f94 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e036      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ee      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e0:	4b1a      	ldr	r3, [pc, #104]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4917      	ldr	r1, [pc, #92]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f8:	4b14      	ldr	r3, [pc, #80]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	4a13      	ldr	r2, [pc, #76]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003402:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	490b      	ldr	r1, [pc, #44]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341e:	4313      	orrs	r3, r2
 8003420:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	4904      	ldr	r1, [pc, #16]	; (800344c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
 8003450:	40007000 	.word	0x40007000
 8003454:	42420440 	.word	0x42420440

08003458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b01      	cmp	r3, #1
 800346a:	d001      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e03a      	b.n	80034e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_TIM_Base_Start_IT+0x98>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0x58>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349a:	d009      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0x58>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0x58>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d111      	bne.n	80034d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d010      	beq.n	80034e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d2:	e007      	b.n	80034e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800

080034fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e041      	b.n	8003592 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe fbea 	bl	8001cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f000 f9e0 	bl	8003900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <HAL_TIM_PWM_Start_IT+0x28>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	bf14      	ite	ne
 80035bc:	2301      	movne	r3, #1
 80035be:	2300      	moveq	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e022      	b.n	800360a <HAL_TIM_PWM_Start_IT+0x6e>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d109      	bne.n	80035de <HAL_TIM_PWM_Start_IT+0x42>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	e015      	b.n	800360a <HAL_TIM_PWM_Start_IT+0x6e>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d109      	bne.n	80035f8 <HAL_TIM_PWM_Start_IT+0x5c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e008      	b.n	800360a <HAL_TIM_PWM_Start_IT+0x6e>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0a9      	b.n	8003766 <HAL_TIM_PWM_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d104      	bne.n	8003622 <HAL_TIM_PWM_Start_IT+0x86>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003620:	e013      	b.n	800364a <HAL_TIM_PWM_Start_IT+0xae>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b04      	cmp	r3, #4
 8003626:	d104      	bne.n	8003632 <HAL_TIM_PWM_Start_IT+0x96>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003630:	e00b      	b.n	800364a <HAL_TIM_PWM_Start_IT+0xae>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d104      	bne.n	8003642 <HAL_TIM_PWM_Start_IT+0xa6>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003640:	e003      	b.n	800364a <HAL_TIM_PWM_Start_IT+0xae>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d841      	bhi.n	80036d4 <HAL_TIM_PWM_Start_IT+0x138>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	0800368d 	.word	0x0800368d
 800365c:	080036d5 	.word	0x080036d5
 8003660:	080036d5 	.word	0x080036d5
 8003664:	080036d5 	.word	0x080036d5
 8003668:	0800369f 	.word	0x0800369f
 800366c:	080036d5 	.word	0x080036d5
 8003670:	080036d5 	.word	0x080036d5
 8003674:	080036d5 	.word	0x080036d5
 8003678:	080036b1 	.word	0x080036b1
 800367c:	080036d5 	.word	0x080036d5
 8003680:	080036d5 	.word	0x080036d5
 8003684:	080036d5 	.word	0x080036d5
 8003688:	080036c3 	.word	0x080036c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0202 	orr.w	r2, r2, #2
 800369a:	60da      	str	r2, [r3, #12]
      break;
 800369c:	e01d      	b.n	80036da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0204 	orr.w	r2, r2, #4
 80036ac:	60da      	str	r2, [r3, #12]
      break;
 80036ae:	e014      	b.n	80036da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0208 	orr.w	r2, r2, #8
 80036be:	60da      	str	r2, [r3, #12]
      break;
 80036c0:	e00b      	b.n	80036da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0210 	orr.w	r2, r2, #16
 80036d0:	60da      	str	r2, [r3, #12]
      break;
 80036d2:	e002      	b.n	80036da <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d141      	bne.n	8003764 <HAL_TIM_PWM_Start_IT+0x1c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2201      	movs	r2, #1
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 faf3 	bl	8003cd4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <HAL_TIM_PWM_Start_IT+0x1d4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d107      	bne.n	8003708 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003706:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a18      	ldr	r2, [pc, #96]	; (8003770 <HAL_TIM_PWM_Start_IT+0x1d4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_TIM_PWM_Start_IT+0x194>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371a:	d009      	beq.n	8003730 <HAL_TIM_PWM_Start_IT+0x194>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_TIM_PWM_Start_IT+0x1d8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_TIM_PWM_Start_IT+0x194>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_TIM_PWM_Start_IT+0x1dc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d111      	bne.n	8003754 <HAL_TIM_PWM_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d010      	beq.n	8003764 <HAL_TIM_PWM_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	e007      	b.n	8003764 <HAL_TIM_PWM_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003764:	7bfb      	ldrb	r3, [r7, #15]
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800

0800377c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003796:	2302      	movs	r3, #2
 8003798:	e0ae      	b.n	80038f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	f200 809f 	bhi.w	80038e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037aa:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	080037e5 	.word	0x080037e5
 80037b4:	080038e9 	.word	0x080038e9
 80037b8:	080038e9 	.word	0x080038e9
 80037bc:	080038e9 	.word	0x080038e9
 80037c0:	08003825 	.word	0x08003825
 80037c4:	080038e9 	.word	0x080038e9
 80037c8:	080038e9 	.word	0x080038e9
 80037cc:	080038e9 	.word	0x080038e9
 80037d0:	08003867 	.word	0x08003867
 80037d4:	080038e9 	.word	0x080038e9
 80037d8:	080038e9 	.word	0x080038e9
 80037dc:	080038e9 	.word	0x080038e9
 80037e0:	080038a7 	.word	0x080038a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f8ea 	bl	80039c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0208 	orr.w	r2, r2, #8
 80037fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0204 	bic.w	r2, r2, #4
 800380e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6999      	ldr	r1, [r3, #24]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	619a      	str	r2, [r3, #24]
      break;
 8003822:	e064      	b.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f930 	bl	8003a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6999      	ldr	r1, [r3, #24]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	021a      	lsls	r2, r3, #8
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	619a      	str	r2, [r3, #24]
      break;
 8003864:	e043      	b.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 f979 	bl	8003b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0208 	orr.w	r2, r2, #8
 8003880:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0204 	bic.w	r2, r2, #4
 8003890:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69d9      	ldr	r1, [r3, #28]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	61da      	str	r2, [r3, #28]
      break;
 80038a4:	e023      	b.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 f9c3 	bl	8003c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69d9      	ldr	r1, [r3, #28]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	021a      	lsls	r2, r3, #8
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	61da      	str	r2, [r3, #28]
      break;
 80038e6:	e002      	b.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	75fb      	strb	r3, [r7, #23]
      break;
 80038ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a29      	ldr	r2, [pc, #164]	; (80039b8 <TIM_Base_SetConfig+0xb8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00b      	beq.n	8003930 <TIM_Base_SetConfig+0x30>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391e:	d007      	beq.n	8003930 <TIM_Base_SetConfig+0x30>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a26      	ldr	r2, [pc, #152]	; (80039bc <TIM_Base_SetConfig+0xbc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_Base_SetConfig+0x30>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a25      	ldr	r2, [pc, #148]	; (80039c0 <TIM_Base_SetConfig+0xc0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d108      	bne.n	8003942 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <TIM_Base_SetConfig+0xb8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00b      	beq.n	8003962 <TIM_Base_SetConfig+0x62>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d007      	beq.n	8003962 <TIM_Base_SetConfig+0x62>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <TIM_Base_SetConfig+0xbc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_Base_SetConfig+0x62>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <TIM_Base_SetConfig+0xc0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d108      	bne.n	8003974 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a07      	ldr	r2, [pc, #28]	; (80039b8 <TIM_Base_SetConfig+0xb8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d103      	bne.n	80039a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	615a      	str	r2, [r3, #20]
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800

080039c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f023 0201 	bic.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 0302 	bic.w	r3, r3, #2
 8003a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <TIM_OC1_SetConfig+0xc8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d10c      	bne.n	8003a3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f023 0308 	bic.w	r3, r3, #8
 8003a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <TIM_OC1_SetConfig+0xc8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d111      	bne.n	8003a66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00

08003a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f023 0210 	bic.w	r2, r3, #16
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0320 	bic.w	r3, r3, #32
 8003ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <TIM_OC2_SetConfig+0xd0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10d      	bne.n	8003b0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <TIM_OC2_SetConfig+0xd0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d113      	bne.n	8003b3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	40012c00 	.word	0x40012c00

08003b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <TIM_OC3_SetConfig+0xd0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10d      	bne.n	8003bde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <TIM_OC3_SetConfig+0xd0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d113      	bne.n	8003c0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00

08003c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	021b      	lsls	r3, r3, #8
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	031b      	lsls	r3, r3, #12
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0f      	ldr	r2, [pc, #60]	; (8003cd0 <TIM_OC4_SetConfig+0x98>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d109      	bne.n	8003cac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	019b      	lsls	r3, r3, #6
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	40012c00 	.word	0x40012c00

08003cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e046      	b.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a16      	ldr	r2, [pc, #88]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d80:	d009      	beq.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a10      	ldr	r2, [pc, #64]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10c      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800

08003dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e042      	b.n	8003e70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d106      	bne.n	8003e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd fff6 	bl	8001df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2224      	movs	r2, #36	; 0x24
 8003e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fdfb 	bl	8004a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08a      	sub	sp, #40	; 0x28
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d16d      	bne.n	8003f74 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_UART_Transmit+0x2c>
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e066      	b.n	8003f76 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2221      	movs	r2, #33	; 0x21
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eb6:	f7fe f86d 	bl	8001f94 <HAL_GetTick>
 8003eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	88fa      	ldrh	r2, [r7, #6]
 8003ec0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	88fa      	ldrh	r2, [r7, #6]
 8003ec6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed0:	d108      	bne.n	8003ee4 <HAL_UART_Transmit+0x6c>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d104      	bne.n	8003ee4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	e003      	b.n	8003eec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003eec:	e02a      	b.n	8003f44 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 fb4a 	bl	8004592 <UART_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e036      	b.n	8003f76 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	3302      	adds	r3, #2
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	e007      	b.n	8003f36 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1cf      	bne.n	8003eee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	2140      	movs	r1, #64	; 0x40
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fb1a 	bl	8004592 <UART_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e006      	b.n	8003f76 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	60f8      	str	r0, [r7, #12]
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d121      	bne.n	8003fdc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_UART_Transmit_IT+0x26>
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e01a      	b.n	8003fde <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2221      	movs	r2, #33	; 0x21
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fd6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e000      	b.n	8003fde <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003fdc:	2302      	movs	r3, #2
  }
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d112      	bne.n	8004028 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_UART_Receive_IT+0x26>
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e00b      	b.n	800402a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	461a      	mov	r2, r3
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fb25 	bl	800466e <UART_Start_Receive_IT>
 8004024:	4603      	mov	r3, r0
 8004026:	e000      	b.n	800402a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b0ba      	sub	sp, #232	; 0xe8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_UART_IRQHandler+0x66>
 8004086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fc01 	bl	800489a <UART_Receive_IT>
      return;
 8004098:	e25b      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800409a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80de 	beq.w	8004260 <HAL_UART_IRQHandler+0x22c>
 80040a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80d1 	beq.w	8004260 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_UART_IRQHandler+0xae>
 80040ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f043 0201 	orr.w	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_UART_IRQHandler+0xd2>
 80040ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f043 0202 	orr.w	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_UART_IRQHandler+0xf6>
 8004112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f043 0204 	orr.w	r2, r3, #4
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d011      	beq.n	800415a <HAL_UART_IRQHandler+0x126>
 8004136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d105      	bne.n	800414e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f043 0208 	orr.w	r2, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 81f2 	beq.w	8004548 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_UART_IRQHandler+0x14e>
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb8c 	bl	800489a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <HAL_UART_IRQHandler+0x17a>
 80041a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d04f      	beq.n	800424e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa96 	bl	80046e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d041      	beq.n	8004246 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3314      	adds	r3, #20
 80041c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1d9      	bne.n	80041c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d013      	beq.n	800423e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	4a7e      	ldr	r2, [pc, #504]	; (8004414 <HAL_UART_IRQHandler+0x3e0>)
 800421c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe fa3e 	bl	80026a4 <HAL_DMA_Abort_IT>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d016      	beq.n	800425c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004238:	4610      	mov	r0, r2
 800423a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	e00e      	b.n	800425c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f993 	bl	800456a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	e00a      	b.n	800425c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f98f 	bl	800456a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424c:	e006      	b.n	800425c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f98b 	bl	800456a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800425a:	e175      	b.n	8004548 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	bf00      	nop
    return;
 800425e:	e173      	b.n	8004548 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	f040 814f 	bne.w	8004508 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8148 	beq.w	8004508 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8141 	beq.w	8004508 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80b6 	beq.w	8004418 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8145 	beq.w	800454c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ca:	429a      	cmp	r2, r3
 80042cc:	f080 813e 	bcs.w	800454c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b20      	cmp	r3, #32
 80042e0:	f000 8088 	beq.w	80043f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004302:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004310:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800431c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1d9      	bne.n	80042e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3314      	adds	r3, #20
 8004350:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004354:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004358:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800435c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e1      	bne.n	8004330 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800437c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004390:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004392:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004396:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800439e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e3      	bne.n	800436c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c4:	f023 0310 	bic.w	r3, r3, #16
 80043c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80043d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e3      	bne.n	80043b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe f91d 	bl	800262e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004402:	b29b      	uxth	r3, r3
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	b29b      	uxth	r3, r3
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8b6 	bl	800457c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004410:	e09c      	b.n	800454c <HAL_UART_IRQHandler+0x518>
 8004412:	bf00      	nop
 8004414:	080047a5 	.word	0x080047a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004420:	b29b      	uxth	r3, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 808e 	beq.w	8004550 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8089 	beq.w	8004550 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	330c      	adds	r3, #12
 800445e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004462:	647a      	str	r2, [r7, #68]	; 0x44
 8004464:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e3      	bne.n	800443e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	623b      	str	r3, [r7, #32]
   return(result);
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800449a:	633a      	str	r2, [r7, #48]	; 0x30
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e3      	bne.n	8004476 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044e0:	61fa      	str	r2, [r7, #28]
 80044e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	69b9      	ldr	r1, [r7, #24]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	617b      	str	r3, [r7, #20]
   return(result);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e3      	bne.n	80044bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f83b 	bl	800457c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004506:	e023      	b.n	8004550 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004510:	2b00      	cmp	r3, #0
 8004512:	d009      	beq.n	8004528 <HAL_UART_IRQHandler+0x4f4>
 8004514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f953 	bl	80047cc <UART_Transmit_IT>
    return;
 8004526:	e014      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00e      	beq.n	8004552 <HAL_UART_IRQHandler+0x51e>
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f992 	bl	800486a <UART_EndTransmit_IT>
    return;
 8004546:	e004      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
    return;
 8004548:	bf00      	nop
 800454a:	e002      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
      return;
 800454c:	bf00      	nop
 800454e:	e000      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
      return;
 8004550:	bf00      	nop
  }
}
 8004552:	37e8      	adds	r7, #232	; 0xe8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr

08004592 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b090      	sub	sp, #64	; 0x40
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	4613      	mov	r3, r2
 80045a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a2:	e050      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d04c      	beq.n	8004646 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80045b2:	f7fd fcef 	bl	8001f94 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045be:	429a      	cmp	r2, r3
 80045c0:	d241      	bcs.n	8004646 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045e2:	637a      	str	r2, [r7, #52]	; 0x34
 80045e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e5      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3314      	adds	r3, #20
 80045fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	613b      	str	r3, [r7, #16]
   return(result);
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	63bb      	str	r3, [r7, #56]	; 0x38
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004616:	623a      	str	r2, [r7, #32]
 8004618:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	69f9      	ldr	r1, [r7, #28]
 800461c:	6a3a      	ldr	r2, [r7, #32]
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	61bb      	str	r3, [r7, #24]
   return(result);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e00f      	b.n	8004666 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4013      	ands	r3, r2
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	bf0c      	ite	eq
 8004656:	2301      	moveq	r3, #1
 8004658:	2300      	movne	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	429a      	cmp	r2, r3
 8004662:	d09f      	beq.n	80045a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3740      	adds	r7, #64	; 0x40
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	4613      	mov	r3, r2
 800467a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2222      	movs	r2, #34	; 0x22
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0220 	orr.w	r2, r2, #32
 80046d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr

080046e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b095      	sub	sp, #84	; 0x54
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	330c      	adds	r3, #12
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	330c      	adds	r3, #12
 8004706:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004708:	643a      	str	r2, [r7, #64]	; 0x40
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800470e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e5      	bne.n	80046e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3314      	adds	r3, #20
 8004722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	61fb      	str	r3, [r7, #28]
   return(result);
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	64bb      	str	r3, [r7, #72]	; 0x48
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3314      	adds	r3, #20
 800473a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800473c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e5      	bne.n	800471c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	2b01      	cmp	r3, #1
 8004756:	d119      	bne.n	800478c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	60bb      	str	r3, [r7, #8]
   return(result);
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f023 0310 	bic.w	r3, r3, #16
 800476e:	647b      	str	r3, [r7, #68]	; 0x44
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004778:	61ba      	str	r2, [r7, #24]
 800477a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6979      	ldr	r1, [r7, #20]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	613b      	str	r3, [r7, #16]
   return(result);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e5      	bne.n	8004758 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
}
 800479a:	bf00      	nop
 800479c:	3754      	adds	r7, #84	; 0x54
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7ff fed3 	bl	800456a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b21      	cmp	r3, #33	; 0x21
 80047de:	d13e      	bne.n	800485e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e8:	d114      	bne.n	8004814 <UART_Transmit_IT+0x48>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d110      	bne.n	8004814 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004806:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	1c9a      	adds	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]
 8004812:	e008      	b.n	8004826 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	1c59      	adds	r1, r3, #1
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6211      	str	r1, [r2, #32]
 800481e:	781a      	ldrb	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29b      	uxth	r3, r3
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4619      	mov	r1, r3
 8004834:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10f      	bne.n	800485a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004848:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004858:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	bc80      	pop	{r7}
 8004868:	4770      	bx	lr

0800486a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004880:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fe64 	bl	8004558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b08c      	sub	sp, #48	; 0x30
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b22      	cmp	r3, #34	; 0x22
 80048ac:	f040 80ae 	bne.w	8004a0c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b8:	d117      	bne.n	80048ea <UART_Receive_IT+0x50>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d113      	bne.n	80048ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d8:	b29a      	uxth	r2, r3
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	1c9a      	adds	r2, r3, #2
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28
 80048e8:	e026      	b.n	8004938 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fc:	d007      	beq.n	800490e <UART_Receive_IT+0x74>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <UART_Receive_IT+0x82>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	e008      	b.n	800492e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004928:	b2da      	uxtb	r2, r3
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29b      	uxth	r3, r3
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4619      	mov	r1, r3
 8004946:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004948:	2b00      	cmp	r3, #0
 800494a:	d15d      	bne.n	8004a08 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0220 	bic.w	r2, r2, #32
 800495a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800496a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	2b01      	cmp	r3, #1
 8004990:	d135      	bne.n	80049fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	613b      	str	r3, [r7, #16]
   return(result);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f023 0310 	bic.w	r3, r3, #16
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b8:	623a      	str	r2, [r7, #32]
 80049ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	69f9      	ldr	r1, [r7, #28]
 80049be:	6a3a      	ldr	r2, [r7, #32]
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e5      	bne.n	8004998 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d10a      	bne.n	80049f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff fdc0 	bl	800457c <HAL_UARTEx_RxEventCallback>
 80049fc:	e002      	b.n	8004a04 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fbe4 	bl	80011cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e002      	b.n	8004a0e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3730      	adds	r7, #48	; 0x30
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a52:	f023 030c 	bic.w	r3, r3, #12
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6812      	ldr	r2, [r2, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2c      	ldr	r2, [pc, #176]	; (8004b2c <UART_SetConfig+0x114>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fe fc02 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	e002      	b.n	8004a8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a88:	f7fe fbea 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 8004a8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	009a      	lsls	r2, r3, #2
 8004a98:	441a      	add	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	4a22      	ldr	r2, [pc, #136]	; (8004b30 <UART_SetConfig+0x118>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	0119      	lsls	r1, r3, #4
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009a      	lsls	r2, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ac4:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <UART_SetConfig+0x118>)
 8004ac6:	fba3 0302 	umull	r0, r3, r3, r2
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2064      	movs	r0, #100	; 0x64
 8004ace:	fb00 f303 	mul.w	r3, r0, r3
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	3332      	adds	r3, #50	; 0x32
 8004ad8:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <UART_SetConfig+0x118>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae4:	4419      	add	r1, r3
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009a      	lsls	r2, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004afc:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <UART_SetConfig+0x118>)
 8004afe:	fba3 0302 	umull	r0, r3, r3, r2
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	2064      	movs	r0, #100	; 0x64
 8004b06:	fb00 f303 	mul.w	r3, r0, r3
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	3332      	adds	r3, #50	; 0x32
 8004b10:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <UART_SetConfig+0x118>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	f003 020f 	and.w	r2, r3, #15
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	440a      	add	r2, r1
 8004b22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40013800 	.word	0x40013800
 8004b30:	51eb851f 	.word	0x51eb851f

08004b34 <atof>:
 8004b34:	2100      	movs	r1, #0
 8004b36:	f000 be7b 	b.w	8005830 <strtod>

08004b3a <atoi>:
 8004b3a:	220a      	movs	r2, #10
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	f000 beff 	b.w	8005940 <strtol>
	...

08004b44 <__errno>:
 8004b44:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <__errno+0x8>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000010 	.word	0x20000010

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	2600      	movs	r6, #0
 8004b54:	4d0c      	ldr	r5, [pc, #48]	; (8004b88 <__libc_init_array+0x38>)
 8004b56:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b58:	1b64      	subs	r4, r4, r5
 8004b5a:	10a4      	asrs	r4, r4, #2
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	f002 ff72 	bl	8007a48 <_init>
 8004b64:	2600      	movs	r6, #0
 8004b66:	4d0a      	ldr	r5, [pc, #40]	; (8004b90 <__libc_init_array+0x40>)
 8004b68:	4c0a      	ldr	r4, [pc, #40]	; (8004b94 <__libc_init_array+0x44>)
 8004b6a:	1b64      	subs	r4, r4, r5
 8004b6c:	10a4      	asrs	r4, r4, #2
 8004b6e:	42a6      	cmp	r6, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b78:	4798      	blx	r3
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b82:	4798      	blx	r3
 8004b84:	3601      	adds	r6, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	08007f9c 	.word	0x08007f9c
 8004b8c:	08007f9c 	.word	0x08007f9c
 8004b90:	08007f9c 	.word	0x08007f9c
 8004b94:	08007fa0 	.word	0x08007fa0

08004b98 <memset>:
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4402      	add	r2, r0
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d100      	bne.n	8004ba2 <memset+0xa>
 8004ba0:	4770      	bx	lr
 8004ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba6:	e7f9      	b.n	8004b9c <memset+0x4>

08004ba8 <strcat>:
 8004ba8:	4602      	mov	r2, r0
 8004baa:	b510      	push	{r4, lr}
 8004bac:	7814      	ldrb	r4, [r2, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	3201      	adds	r2, #1
 8004bb2:	2c00      	cmp	r4, #0
 8004bb4:	d1fa      	bne.n	8004bac <strcat+0x4>
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bc0:	2a00      	cmp	r2, #0
 8004bc2:	d1f9      	bne.n	8004bb8 <strcat+0x10>
 8004bc4:	bd10      	pop	{r4, pc}

08004bc6 <strchr>:
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	b2c9      	uxtb	r1, r1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd0:	b112      	cbz	r2, 8004bd8 <strchr+0x12>
 8004bd2:	428a      	cmp	r2, r1
 8004bd4:	d1f9      	bne.n	8004bca <strchr+0x4>
 8004bd6:	4770      	bx	lr
 8004bd8:	2900      	cmp	r1, #0
 8004bda:	bf18      	it	ne
 8004bdc:	2000      	movne	r0, #0
 8004bde:	4770      	bx	lr

08004be0 <strcpy>:
 8004be0:	4603      	mov	r3, r0
 8004be2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004be6:	f803 2b01 	strb.w	r2, [r3], #1
 8004bea:	2a00      	cmp	r2, #0
 8004bec:	d1f9      	bne.n	8004be2 <strcpy+0x2>
 8004bee:	4770      	bx	lr

08004bf0 <strstr>:
 8004bf0:	780a      	ldrb	r2, [r1, #0]
 8004bf2:	b570      	push	{r4, r5, r6, lr}
 8004bf4:	b96a      	cbnz	r2, 8004c12 <strstr+0x22>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d109      	bne.n	8004c10 <strstr+0x20>
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	4605      	mov	r5, r0
 8004c00:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f6      	beq.n	8004bf6 <strstr+0x6>
 8004c08:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004c0c:	429e      	cmp	r6, r3
 8004c0e:	d0f7      	beq.n	8004c00 <strstr+0x10>
 8004c10:	3001      	adds	r0, #1
 8004c12:	7803      	ldrb	r3, [r0, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ef      	bne.n	8004bf8 <strstr+0x8>
 8004c18:	4618      	mov	r0, r3
 8004c1a:	e7ec      	b.n	8004bf6 <strstr+0x6>

08004c1c <sulp>:
 8004c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c20:	460f      	mov	r7, r1
 8004c22:	4690      	mov	r8, r2
 8004c24:	f001 fd8c 	bl	8006740 <__ulp>
 8004c28:	4604      	mov	r4, r0
 8004c2a:	460d      	mov	r5, r1
 8004c2c:	f1b8 0f00 	cmp.w	r8, #0
 8004c30:	d011      	beq.n	8004c56 <sulp+0x3a>
 8004c32:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004c36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dd0b      	ble.n	8004c56 <sulp+0x3a>
 8004c3e:	2400      	movs	r4, #0
 8004c40:	051b      	lsls	r3, r3, #20
 8004c42:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	f7fb fc43 	bl	80004d8 <__aeabi_dmul>
 8004c52:	4604      	mov	r4, r0
 8004c54:	460d      	mov	r5, r1
 8004c56:	4620      	mov	r0, r4
 8004c58:	4629      	mov	r1, r5
 8004c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004c60 <_strtod_l>:
 8004c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	469b      	mov	fp, r3
 8004c66:	2300      	movs	r3, #0
 8004c68:	b09f      	sub	sp, #124	; 0x7c
 8004c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8004c6c:	4b9e      	ldr	r3, [pc, #632]	; (8004ee8 <_strtod_l+0x288>)
 8004c6e:	4682      	mov	sl, r0
 8004c70:	681f      	ldr	r7, [r3, #0]
 8004c72:	460e      	mov	r6, r1
 8004c74:	4638      	mov	r0, r7
 8004c76:	9215      	str	r2, [sp, #84]	; 0x54
 8004c78:	f7fb fa6a 	bl	8000150 <strlen>
 8004c7c:	f04f 0800 	mov.w	r8, #0
 8004c80:	4604      	mov	r4, r0
 8004c82:	f04f 0900 	mov.w	r9, #0
 8004c86:	9619      	str	r6, [sp, #100]	; 0x64
 8004c88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c8a:	781a      	ldrb	r2, [r3, #0]
 8004c8c:	2a2b      	cmp	r2, #43	; 0x2b
 8004c8e:	d04c      	beq.n	8004d2a <_strtod_l+0xca>
 8004c90:	d83a      	bhi.n	8004d08 <_strtod_l+0xa8>
 8004c92:	2a0d      	cmp	r2, #13
 8004c94:	d833      	bhi.n	8004cfe <_strtod_l+0x9e>
 8004c96:	2a08      	cmp	r2, #8
 8004c98:	d833      	bhi.n	8004d02 <_strtod_l+0xa2>
 8004c9a:	2a00      	cmp	r2, #0
 8004c9c:	d03d      	beq.n	8004d1a <_strtod_l+0xba>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ca2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004ca4:	782b      	ldrb	r3, [r5, #0]
 8004ca6:	2b30      	cmp	r3, #48	; 0x30
 8004ca8:	f040 80aa 	bne.w	8004e00 <_strtod_l+0x1a0>
 8004cac:	786b      	ldrb	r3, [r5, #1]
 8004cae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004cb2:	2b58      	cmp	r3, #88	; 0x58
 8004cb4:	d166      	bne.n	8004d84 <_strtod_l+0x124>
 8004cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cb8:	4650      	mov	r0, sl
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	ab1a      	add	r3, sp, #104	; 0x68
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	4a8a      	ldr	r2, [pc, #552]	; (8004eec <_strtod_l+0x28c>)
 8004cc2:	f8cd b008 	str.w	fp, [sp, #8]
 8004cc6:	ab1b      	add	r3, sp, #108	; 0x6c
 8004cc8:	a919      	add	r1, sp, #100	; 0x64
 8004cca:	f000 feab 	bl	8005a24 <__gethex>
 8004cce:	f010 0607 	ands.w	r6, r0, #7
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	d005      	beq.n	8004ce2 <_strtod_l+0x82>
 8004cd6:	2e06      	cmp	r6, #6
 8004cd8:	d129      	bne.n	8004d2e <_strtod_l+0xce>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	3501      	adds	r5, #1
 8004cde:	9519      	str	r5, [sp, #100]	; 0x64
 8004ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 858a 	bne.w	80057fe <_strtod_l+0xb9e>
 8004cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cec:	b1d3      	cbz	r3, 8004d24 <_strtod_l+0xc4>
 8004cee:	4642      	mov	r2, r8
 8004cf0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	b01f      	add	sp, #124	; 0x7c
 8004cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfe:	2a20      	cmp	r2, #32
 8004d00:	d1cd      	bne.n	8004c9e <_strtod_l+0x3e>
 8004d02:	3301      	adds	r3, #1
 8004d04:	9319      	str	r3, [sp, #100]	; 0x64
 8004d06:	e7bf      	b.n	8004c88 <_strtod_l+0x28>
 8004d08:	2a2d      	cmp	r2, #45	; 0x2d
 8004d0a:	d1c8      	bne.n	8004c9e <_strtod_l+0x3e>
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	920a      	str	r2, [sp, #40]	; 0x28
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	9219      	str	r2, [sp, #100]	; 0x64
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1c3      	bne.n	8004ca2 <_strtod_l+0x42>
 8004d1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d1c:	9619      	str	r6, [sp, #100]	; 0x64
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f040 856b 	bne.w	80057fa <_strtod_l+0xb9a>
 8004d24:	4642      	mov	r2, r8
 8004d26:	464b      	mov	r3, r9
 8004d28:	e7e4      	b.n	8004cf4 <_strtod_l+0x94>
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	e7ef      	b.n	8004d0e <_strtod_l+0xae>
 8004d2e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d30:	b13a      	cbz	r2, 8004d42 <_strtod_l+0xe2>
 8004d32:	2135      	movs	r1, #53	; 0x35
 8004d34:	a81c      	add	r0, sp, #112	; 0x70
 8004d36:	f001 fe07 	bl	8006948 <__copybits>
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004d3e:	f001 f9cf 	bl	80060e0 <_Bfree>
 8004d42:	3e01      	subs	r6, #1
 8004d44:	2e04      	cmp	r6, #4
 8004d46:	d806      	bhi.n	8004d56 <_strtod_l+0xf6>
 8004d48:	e8df f006 	tbb	[pc, r6]
 8004d4c:	1714030a 	.word	0x1714030a
 8004d50:	0a          	.byte	0x0a
 8004d51:	00          	.byte	0x00
 8004d52:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004d56:	0721      	lsls	r1, r4, #28
 8004d58:	d5c3      	bpl.n	8004ce2 <_strtod_l+0x82>
 8004d5a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004d5e:	e7c0      	b.n	8004ce2 <_strtod_l+0x82>
 8004d60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004d62:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004d66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d6e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004d72:	e7f0      	b.n	8004d56 <_strtod_l+0xf6>
 8004d74:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004ef0 <_strtod_l+0x290>
 8004d78:	e7ed      	b.n	8004d56 <_strtod_l+0xf6>
 8004d7a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004d7e:	f04f 38ff 	mov.w	r8, #4294967295
 8004d82:	e7e8      	b.n	8004d56 <_strtod_l+0xf6>
 8004d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d86:	1c5a      	adds	r2, r3, #1
 8004d88:	9219      	str	r2, [sp, #100]	; 0x64
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	2b30      	cmp	r3, #48	; 0x30
 8004d8e:	d0f9      	beq.n	8004d84 <_strtod_l+0x124>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0a6      	beq.n	8004ce2 <_strtod_l+0x82>
 8004d94:	2301      	movs	r3, #1
 8004d96:	9307      	str	r3, [sp, #28]
 8004d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004d9a:	220a      	movs	r2, #10
 8004d9c:	9308      	str	r3, [sp, #32]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	469b      	mov	fp, r3
 8004da2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004da6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004da8:	7805      	ldrb	r5, [r0, #0]
 8004daa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004dae:	b2d9      	uxtb	r1, r3
 8004db0:	2909      	cmp	r1, #9
 8004db2:	d927      	bls.n	8004e04 <_strtod_l+0x1a4>
 8004db4:	4622      	mov	r2, r4
 8004db6:	4639      	mov	r1, r7
 8004db8:	f001 fec8 	bl	8006b4c <strncmp>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d033      	beq.n	8004e28 <_strtod_l+0x1c8>
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	462a      	mov	r2, r5
 8004dc4:	465c      	mov	r4, fp
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	9004      	str	r0, [sp, #16]
 8004dca:	2a65      	cmp	r2, #101	; 0x65
 8004dcc:	d001      	beq.n	8004dd2 <_strtod_l+0x172>
 8004dce:	2a45      	cmp	r2, #69	; 0x45
 8004dd0:	d114      	bne.n	8004dfc <_strtod_l+0x19c>
 8004dd2:	b91c      	cbnz	r4, 8004ddc <_strtod_l+0x17c>
 8004dd4:	9a07      	ldr	r2, [sp, #28]
 8004dd6:	4302      	orrs	r2, r0
 8004dd8:	d09f      	beq.n	8004d1a <_strtod_l+0xba>
 8004dda:	2400      	movs	r4, #0
 8004ddc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004dde:	1c72      	adds	r2, r6, #1
 8004de0:	9219      	str	r2, [sp, #100]	; 0x64
 8004de2:	7872      	ldrb	r2, [r6, #1]
 8004de4:	2a2b      	cmp	r2, #43	; 0x2b
 8004de6:	d079      	beq.n	8004edc <_strtod_l+0x27c>
 8004de8:	2a2d      	cmp	r2, #45	; 0x2d
 8004dea:	f000 8083 	beq.w	8004ef4 <_strtod_l+0x294>
 8004dee:	2700      	movs	r7, #0
 8004df0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004df4:	2909      	cmp	r1, #9
 8004df6:	f240 8083 	bls.w	8004f00 <_strtod_l+0x2a0>
 8004dfa:	9619      	str	r6, [sp, #100]	; 0x64
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	e09f      	b.n	8004f40 <_strtod_l+0x2e0>
 8004e00:	2300      	movs	r3, #0
 8004e02:	e7c8      	b.n	8004d96 <_strtod_l+0x136>
 8004e04:	f1bb 0f08 	cmp.w	fp, #8
 8004e08:	bfd5      	itete	le
 8004e0a:	9906      	ldrle	r1, [sp, #24]
 8004e0c:	9905      	ldrgt	r1, [sp, #20]
 8004e0e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e12:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004e16:	f100 0001 	add.w	r0, r0, #1
 8004e1a:	bfd4      	ite	le
 8004e1c:	9306      	strle	r3, [sp, #24]
 8004e1e:	9305      	strgt	r3, [sp, #20]
 8004e20:	f10b 0b01 	add.w	fp, fp, #1
 8004e24:	9019      	str	r0, [sp, #100]	; 0x64
 8004e26:	e7be      	b.n	8004da6 <_strtod_l+0x146>
 8004e28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e2a:	191a      	adds	r2, r3, r4
 8004e2c:	9219      	str	r2, [sp, #100]	; 0x64
 8004e2e:	5d1a      	ldrb	r2, [r3, r4]
 8004e30:	f1bb 0f00 	cmp.w	fp, #0
 8004e34:	d036      	beq.n	8004ea4 <_strtod_l+0x244>
 8004e36:	465c      	mov	r4, fp
 8004e38:	9004      	str	r0, [sp, #16]
 8004e3a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004e3e:	2b09      	cmp	r3, #9
 8004e40:	d912      	bls.n	8004e68 <_strtod_l+0x208>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e7c1      	b.n	8004dca <_strtod_l+0x16a>
 8004e46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e48:	3001      	adds	r0, #1
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	9219      	str	r2, [sp, #100]	; 0x64
 8004e4e:	785a      	ldrb	r2, [r3, #1]
 8004e50:	2a30      	cmp	r2, #48	; 0x30
 8004e52:	d0f8      	beq.n	8004e46 <_strtod_l+0x1e6>
 8004e54:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	f200 84d5 	bhi.w	8005808 <_strtod_l+0xba8>
 8004e5e:	9004      	str	r0, [sp, #16]
 8004e60:	2000      	movs	r0, #0
 8004e62:	4604      	mov	r4, r0
 8004e64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e66:	9308      	str	r3, [sp, #32]
 8004e68:	3a30      	subs	r2, #48	; 0x30
 8004e6a:	f100 0301 	add.w	r3, r0, #1
 8004e6e:	d013      	beq.n	8004e98 <_strtod_l+0x238>
 8004e70:	9904      	ldr	r1, [sp, #16]
 8004e72:	1905      	adds	r5, r0, r4
 8004e74:	4419      	add	r1, r3
 8004e76:	9104      	str	r1, [sp, #16]
 8004e78:	4623      	mov	r3, r4
 8004e7a:	210a      	movs	r1, #10
 8004e7c:	42ab      	cmp	r3, r5
 8004e7e:	d113      	bne.n	8004ea8 <_strtod_l+0x248>
 8004e80:	1823      	adds	r3, r4, r0
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	f104 0401 	add.w	r4, r4, #1
 8004e88:	4404      	add	r4, r0
 8004e8a:	dc1b      	bgt.n	8004ec4 <_strtod_l+0x264>
 8004e8c:	230a      	movs	r3, #10
 8004e8e:	9906      	ldr	r1, [sp, #24]
 8004e90:	fb03 2301 	mla	r3, r3, r1, r2
 8004e94:	9306      	str	r3, [sp, #24]
 8004e96:	2300      	movs	r3, #0
 8004e98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	1c51      	adds	r1, r2, #1
 8004e9e:	9119      	str	r1, [sp, #100]	; 0x64
 8004ea0:	7852      	ldrb	r2, [r2, #1]
 8004ea2:	e7ca      	b.n	8004e3a <_strtod_l+0x1da>
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	e7d3      	b.n	8004e50 <_strtod_l+0x1f0>
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	dc04      	bgt.n	8004eb6 <_strtod_l+0x256>
 8004eac:	9f06      	ldr	r7, [sp, #24]
 8004eae:	434f      	muls	r7, r1
 8004eb0:	9706      	str	r7, [sp, #24]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	e7e2      	b.n	8004e7c <_strtod_l+0x21c>
 8004eb6:	1c5f      	adds	r7, r3, #1
 8004eb8:	2f10      	cmp	r7, #16
 8004eba:	bfde      	ittt	le
 8004ebc:	9f05      	ldrle	r7, [sp, #20]
 8004ebe:	434f      	mulle	r7, r1
 8004ec0:	9705      	strle	r7, [sp, #20]
 8004ec2:	e7f6      	b.n	8004eb2 <_strtod_l+0x252>
 8004ec4:	2c10      	cmp	r4, #16
 8004ec6:	bfdf      	itttt	le
 8004ec8:	230a      	movle	r3, #10
 8004eca:	9905      	ldrle	r1, [sp, #20]
 8004ecc:	fb03 2301 	mlale	r3, r3, r1, r2
 8004ed0:	9305      	strle	r3, [sp, #20]
 8004ed2:	e7e0      	b.n	8004e96 <_strtod_l+0x236>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e77b      	b.n	8004dd4 <_strtod_l+0x174>
 8004edc:	2700      	movs	r7, #0
 8004ede:	1cb2      	adds	r2, r6, #2
 8004ee0:	9219      	str	r2, [sp, #100]	; 0x64
 8004ee2:	78b2      	ldrb	r2, [r6, #2]
 8004ee4:	e784      	b.n	8004df0 <_strtod_l+0x190>
 8004ee6:	bf00      	nop
 8004ee8:	08007d48 	.word	0x08007d48
 8004eec:	08007b7c 	.word	0x08007b7c
 8004ef0:	7ff00000 	.word	0x7ff00000
 8004ef4:	2701      	movs	r7, #1
 8004ef6:	e7f2      	b.n	8004ede <_strtod_l+0x27e>
 8004ef8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004efa:	1c51      	adds	r1, r2, #1
 8004efc:	9119      	str	r1, [sp, #100]	; 0x64
 8004efe:	7852      	ldrb	r2, [r2, #1]
 8004f00:	2a30      	cmp	r2, #48	; 0x30
 8004f02:	d0f9      	beq.n	8004ef8 <_strtod_l+0x298>
 8004f04:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004f08:	2908      	cmp	r1, #8
 8004f0a:	f63f af77 	bhi.w	8004dfc <_strtod_l+0x19c>
 8004f0e:	f04f 0e0a 	mov.w	lr, #10
 8004f12:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8004f16:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f18:	9209      	str	r2, [sp, #36]	; 0x24
 8004f1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004f1c:	1c51      	adds	r1, r2, #1
 8004f1e:	9119      	str	r1, [sp, #100]	; 0x64
 8004f20:	7852      	ldrb	r2, [r2, #1]
 8004f22:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8004f26:	2d09      	cmp	r5, #9
 8004f28:	d935      	bls.n	8004f96 <_strtod_l+0x336>
 8004f2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f2c:	1b49      	subs	r1, r1, r5
 8004f2e:	2908      	cmp	r1, #8
 8004f30:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8004f34:	dc02      	bgt.n	8004f3c <_strtod_l+0x2dc>
 8004f36:	4565      	cmp	r5, ip
 8004f38:	bfa8      	it	ge
 8004f3a:	4665      	movge	r5, ip
 8004f3c:	b107      	cbz	r7, 8004f40 <_strtod_l+0x2e0>
 8004f3e:	426d      	negs	r5, r5
 8004f40:	2c00      	cmp	r4, #0
 8004f42:	d14c      	bne.n	8004fde <_strtod_l+0x37e>
 8004f44:	9907      	ldr	r1, [sp, #28]
 8004f46:	4301      	orrs	r1, r0
 8004f48:	f47f aecb 	bne.w	8004ce2 <_strtod_l+0x82>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f47f aee4 	bne.w	8004d1a <_strtod_l+0xba>
 8004f52:	2a69      	cmp	r2, #105	; 0x69
 8004f54:	d026      	beq.n	8004fa4 <_strtod_l+0x344>
 8004f56:	dc23      	bgt.n	8004fa0 <_strtod_l+0x340>
 8004f58:	2a49      	cmp	r2, #73	; 0x49
 8004f5a:	d023      	beq.n	8004fa4 <_strtod_l+0x344>
 8004f5c:	2a4e      	cmp	r2, #78	; 0x4e
 8004f5e:	f47f aedc 	bne.w	8004d1a <_strtod_l+0xba>
 8004f62:	499d      	ldr	r1, [pc, #628]	; (80051d8 <_strtod_l+0x578>)
 8004f64:	a819      	add	r0, sp, #100	; 0x64
 8004f66:	f000 ffab 	bl	8005ec0 <__match>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	f43f aed5 	beq.w	8004d1a <_strtod_l+0xba>
 8004f70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b28      	cmp	r3, #40	; 0x28
 8004f76:	d12c      	bne.n	8004fd2 <_strtod_l+0x372>
 8004f78:	4998      	ldr	r1, [pc, #608]	; (80051dc <_strtod_l+0x57c>)
 8004f7a:	aa1c      	add	r2, sp, #112	; 0x70
 8004f7c:	a819      	add	r0, sp, #100	; 0x64
 8004f7e:	f000 ffb3 	bl	8005ee8 <__hexnan>
 8004f82:	2805      	cmp	r0, #5
 8004f84:	d125      	bne.n	8004fd2 <_strtod_l+0x372>
 8004f86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004f88:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004f8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004f90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004f94:	e6a5      	b.n	8004ce2 <_strtod_l+0x82>
 8004f96:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004f9a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004f9e:	e7bc      	b.n	8004f1a <_strtod_l+0x2ba>
 8004fa0:	2a6e      	cmp	r2, #110	; 0x6e
 8004fa2:	e7dc      	b.n	8004f5e <_strtod_l+0x2fe>
 8004fa4:	498e      	ldr	r1, [pc, #568]	; (80051e0 <_strtod_l+0x580>)
 8004fa6:	a819      	add	r0, sp, #100	; 0x64
 8004fa8:	f000 ff8a 	bl	8005ec0 <__match>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f43f aeb4 	beq.w	8004d1a <_strtod_l+0xba>
 8004fb2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fb4:	498b      	ldr	r1, [pc, #556]	; (80051e4 <_strtod_l+0x584>)
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	a819      	add	r0, sp, #100	; 0x64
 8004fba:	9319      	str	r3, [sp, #100]	; 0x64
 8004fbc:	f000 ff80 	bl	8005ec0 <__match>
 8004fc0:	b910      	cbnz	r0, 8004fc8 <_strtod_l+0x368>
 8004fc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	9319      	str	r3, [sp, #100]	; 0x64
 8004fc8:	f04f 0800 	mov.w	r8, #0
 8004fcc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80051e8 <_strtod_l+0x588>
 8004fd0:	e687      	b.n	8004ce2 <_strtod_l+0x82>
 8004fd2:	4886      	ldr	r0, [pc, #536]	; (80051ec <_strtod_l+0x58c>)
 8004fd4:	f001 fda4 	bl	8006b20 <nan>
 8004fd8:	4680      	mov	r8, r0
 8004fda:	4689      	mov	r9, r1
 8004fdc:	e681      	b.n	8004ce2 <_strtod_l+0x82>
 8004fde:	9b04      	ldr	r3, [sp, #16]
 8004fe0:	f1bb 0f00 	cmp.w	fp, #0
 8004fe4:	bf08      	it	eq
 8004fe6:	46a3      	moveq	fp, r4
 8004fe8:	1aeb      	subs	r3, r5, r3
 8004fea:	2c10      	cmp	r4, #16
 8004fec:	9806      	ldr	r0, [sp, #24]
 8004fee:	4626      	mov	r6, r4
 8004ff0:	9307      	str	r3, [sp, #28]
 8004ff2:	bfa8      	it	ge
 8004ff4:	2610      	movge	r6, #16
 8004ff6:	f7fb f9f5 	bl	80003e4 <__aeabi_ui2d>
 8004ffa:	2c09      	cmp	r4, #9
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	4689      	mov	r9, r1
 8005000:	dd13      	ble.n	800502a <_strtod_l+0x3ca>
 8005002:	4b7b      	ldr	r3, [pc, #492]	; (80051f0 <_strtod_l+0x590>)
 8005004:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005008:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800500c:	f7fb fa64 	bl	80004d8 <__aeabi_dmul>
 8005010:	4680      	mov	r8, r0
 8005012:	9805      	ldr	r0, [sp, #20]
 8005014:	4689      	mov	r9, r1
 8005016:	f7fb f9e5 	bl	80003e4 <__aeabi_ui2d>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4640      	mov	r0, r8
 8005020:	4649      	mov	r1, r9
 8005022:	f7fb f8a3 	bl	800016c <__adddf3>
 8005026:	4680      	mov	r8, r0
 8005028:	4689      	mov	r9, r1
 800502a:	2c0f      	cmp	r4, #15
 800502c:	dc36      	bgt.n	800509c <_strtod_l+0x43c>
 800502e:	9b07      	ldr	r3, [sp, #28]
 8005030:	2b00      	cmp	r3, #0
 8005032:	f43f ae56 	beq.w	8004ce2 <_strtod_l+0x82>
 8005036:	dd22      	ble.n	800507e <_strtod_l+0x41e>
 8005038:	2b16      	cmp	r3, #22
 800503a:	dc09      	bgt.n	8005050 <_strtod_l+0x3f0>
 800503c:	496c      	ldr	r1, [pc, #432]	; (80051f0 <_strtod_l+0x590>)
 800503e:	4642      	mov	r2, r8
 8005040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005044:	464b      	mov	r3, r9
 8005046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800504a:	f7fb fa45 	bl	80004d8 <__aeabi_dmul>
 800504e:	e7c3      	b.n	8004fd8 <_strtod_l+0x378>
 8005050:	9a07      	ldr	r2, [sp, #28]
 8005052:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005056:	4293      	cmp	r3, r2
 8005058:	db20      	blt.n	800509c <_strtod_l+0x43c>
 800505a:	4d65      	ldr	r5, [pc, #404]	; (80051f0 <_strtod_l+0x590>)
 800505c:	f1c4 040f 	rsb	r4, r4, #15
 8005060:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005064:	4642      	mov	r2, r8
 8005066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800506a:	464b      	mov	r3, r9
 800506c:	f7fb fa34 	bl	80004d8 <__aeabi_dmul>
 8005070:	9b07      	ldr	r3, [sp, #28]
 8005072:	1b1c      	subs	r4, r3, r4
 8005074:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005078:	e9d5 2300 	ldrd	r2, r3, [r5]
 800507c:	e7e5      	b.n	800504a <_strtod_l+0x3ea>
 800507e:	9b07      	ldr	r3, [sp, #28]
 8005080:	3316      	adds	r3, #22
 8005082:	db0b      	blt.n	800509c <_strtod_l+0x43c>
 8005084:	9b04      	ldr	r3, [sp, #16]
 8005086:	4640      	mov	r0, r8
 8005088:	1b5d      	subs	r5, r3, r5
 800508a:	4b59      	ldr	r3, [pc, #356]	; (80051f0 <_strtod_l+0x590>)
 800508c:	4649      	mov	r1, r9
 800508e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005092:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005096:	f7fb fb49 	bl	800072c <__aeabi_ddiv>
 800509a:	e79d      	b.n	8004fd8 <_strtod_l+0x378>
 800509c:	9b07      	ldr	r3, [sp, #28]
 800509e:	1ba6      	subs	r6, r4, r6
 80050a0:	441e      	add	r6, r3
 80050a2:	2e00      	cmp	r6, #0
 80050a4:	dd74      	ble.n	8005190 <_strtod_l+0x530>
 80050a6:	f016 030f 	ands.w	r3, r6, #15
 80050aa:	d00a      	beq.n	80050c2 <_strtod_l+0x462>
 80050ac:	4950      	ldr	r1, [pc, #320]	; (80051f0 <_strtod_l+0x590>)
 80050ae:	4642      	mov	r2, r8
 80050b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b8:	464b      	mov	r3, r9
 80050ba:	f7fb fa0d 	bl	80004d8 <__aeabi_dmul>
 80050be:	4680      	mov	r8, r0
 80050c0:	4689      	mov	r9, r1
 80050c2:	f036 060f 	bics.w	r6, r6, #15
 80050c6:	d052      	beq.n	800516e <_strtod_l+0x50e>
 80050c8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80050cc:	dd27      	ble.n	800511e <_strtod_l+0x4be>
 80050ce:	f04f 0b00 	mov.w	fp, #0
 80050d2:	f8cd b010 	str.w	fp, [sp, #16]
 80050d6:	f8cd b020 	str.w	fp, [sp, #32]
 80050da:	f8cd b018 	str.w	fp, [sp, #24]
 80050de:	2322      	movs	r3, #34	; 0x22
 80050e0:	f04f 0800 	mov.w	r8, #0
 80050e4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80051e8 <_strtod_l+0x588>
 80050e8:	f8ca 3000 	str.w	r3, [sl]
 80050ec:	9b08      	ldr	r3, [sp, #32]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f43f adf7 	beq.w	8004ce2 <_strtod_l+0x82>
 80050f4:	4650      	mov	r0, sl
 80050f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80050f8:	f000 fff2 	bl	80060e0 <_Bfree>
 80050fc:	4650      	mov	r0, sl
 80050fe:	9906      	ldr	r1, [sp, #24]
 8005100:	f000 ffee 	bl	80060e0 <_Bfree>
 8005104:	4650      	mov	r0, sl
 8005106:	9904      	ldr	r1, [sp, #16]
 8005108:	f000 ffea 	bl	80060e0 <_Bfree>
 800510c:	4650      	mov	r0, sl
 800510e:	9908      	ldr	r1, [sp, #32]
 8005110:	f000 ffe6 	bl	80060e0 <_Bfree>
 8005114:	4659      	mov	r1, fp
 8005116:	4650      	mov	r0, sl
 8005118:	f000 ffe2 	bl	80060e0 <_Bfree>
 800511c:	e5e1      	b.n	8004ce2 <_strtod_l+0x82>
 800511e:	4b35      	ldr	r3, [pc, #212]	; (80051f4 <_strtod_l+0x594>)
 8005120:	4640      	mov	r0, r8
 8005122:	9305      	str	r3, [sp, #20]
 8005124:	2300      	movs	r3, #0
 8005126:	4649      	mov	r1, r9
 8005128:	461f      	mov	r7, r3
 800512a:	1136      	asrs	r6, r6, #4
 800512c:	2e01      	cmp	r6, #1
 800512e:	dc21      	bgt.n	8005174 <_strtod_l+0x514>
 8005130:	b10b      	cbz	r3, 8005136 <_strtod_l+0x4d6>
 8005132:	4680      	mov	r8, r0
 8005134:	4689      	mov	r9, r1
 8005136:	4b2f      	ldr	r3, [pc, #188]	; (80051f4 <_strtod_l+0x594>)
 8005138:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800513c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005140:	4642      	mov	r2, r8
 8005142:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005146:	464b      	mov	r3, r9
 8005148:	f7fb f9c6 	bl	80004d8 <__aeabi_dmul>
 800514c:	4b26      	ldr	r3, [pc, #152]	; (80051e8 <_strtod_l+0x588>)
 800514e:	460a      	mov	r2, r1
 8005150:	400b      	ands	r3, r1
 8005152:	4929      	ldr	r1, [pc, #164]	; (80051f8 <_strtod_l+0x598>)
 8005154:	4680      	mov	r8, r0
 8005156:	428b      	cmp	r3, r1
 8005158:	d8b9      	bhi.n	80050ce <_strtod_l+0x46e>
 800515a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800515e:	428b      	cmp	r3, r1
 8005160:	bf86      	itte	hi
 8005162:	f04f 38ff 	movhi.w	r8, #4294967295
 8005166:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80051fc <_strtod_l+0x59c>
 800516a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800516e:	2300      	movs	r3, #0
 8005170:	9305      	str	r3, [sp, #20]
 8005172:	e07f      	b.n	8005274 <_strtod_l+0x614>
 8005174:	07f2      	lsls	r2, r6, #31
 8005176:	d505      	bpl.n	8005184 <_strtod_l+0x524>
 8005178:	9b05      	ldr	r3, [sp, #20]
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f7fb f9ab 	bl	80004d8 <__aeabi_dmul>
 8005182:	2301      	movs	r3, #1
 8005184:	9a05      	ldr	r2, [sp, #20]
 8005186:	3701      	adds	r7, #1
 8005188:	3208      	adds	r2, #8
 800518a:	1076      	asrs	r6, r6, #1
 800518c:	9205      	str	r2, [sp, #20]
 800518e:	e7cd      	b.n	800512c <_strtod_l+0x4cc>
 8005190:	d0ed      	beq.n	800516e <_strtod_l+0x50e>
 8005192:	4276      	negs	r6, r6
 8005194:	f016 020f 	ands.w	r2, r6, #15
 8005198:	d00a      	beq.n	80051b0 <_strtod_l+0x550>
 800519a:	4b15      	ldr	r3, [pc, #84]	; (80051f0 <_strtod_l+0x590>)
 800519c:	4640      	mov	r0, r8
 800519e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051a2:	4649      	mov	r1, r9
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f7fb fac0 	bl	800072c <__aeabi_ddiv>
 80051ac:	4680      	mov	r8, r0
 80051ae:	4689      	mov	r9, r1
 80051b0:	1136      	asrs	r6, r6, #4
 80051b2:	d0dc      	beq.n	800516e <_strtod_l+0x50e>
 80051b4:	2e1f      	cmp	r6, #31
 80051b6:	dd23      	ble.n	8005200 <_strtod_l+0x5a0>
 80051b8:	f04f 0b00 	mov.w	fp, #0
 80051bc:	f8cd b010 	str.w	fp, [sp, #16]
 80051c0:	f8cd b020 	str.w	fp, [sp, #32]
 80051c4:	f8cd b018 	str.w	fp, [sp, #24]
 80051c8:	2322      	movs	r3, #34	; 0x22
 80051ca:	f04f 0800 	mov.w	r8, #0
 80051ce:	f04f 0900 	mov.w	r9, #0
 80051d2:	f8ca 3000 	str.w	r3, [sl]
 80051d6:	e789      	b.n	80050ec <_strtod_l+0x48c>
 80051d8:	08007b79 	.word	0x08007b79
 80051dc:	08007b90 	.word	0x08007b90
 80051e0:	08007b70 	.word	0x08007b70
 80051e4:	08007b73 	.word	0x08007b73
 80051e8:	7ff00000 	.word	0x7ff00000
 80051ec:	08007f07 	.word	0x08007f07
 80051f0:	08007df8 	.word	0x08007df8
 80051f4:	08007dd0 	.word	0x08007dd0
 80051f8:	7ca00000 	.word	0x7ca00000
 80051fc:	7fefffff 	.word	0x7fefffff
 8005200:	f016 0310 	ands.w	r3, r6, #16
 8005204:	bf18      	it	ne
 8005206:	236a      	movne	r3, #106	; 0x6a
 8005208:	4640      	mov	r0, r8
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	4649      	mov	r1, r9
 800520e:	2300      	movs	r3, #0
 8005210:	4fb0      	ldr	r7, [pc, #704]	; (80054d4 <_strtod_l+0x874>)
 8005212:	07f2      	lsls	r2, r6, #31
 8005214:	d504      	bpl.n	8005220 <_strtod_l+0x5c0>
 8005216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521a:	f7fb f95d 	bl	80004d8 <__aeabi_dmul>
 800521e:	2301      	movs	r3, #1
 8005220:	1076      	asrs	r6, r6, #1
 8005222:	f107 0708 	add.w	r7, r7, #8
 8005226:	d1f4      	bne.n	8005212 <_strtod_l+0x5b2>
 8005228:	b10b      	cbz	r3, 800522e <_strtod_l+0x5ce>
 800522a:	4680      	mov	r8, r0
 800522c:	4689      	mov	r9, r1
 800522e:	9b05      	ldr	r3, [sp, #20]
 8005230:	b1c3      	cbz	r3, 8005264 <_strtod_l+0x604>
 8005232:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005236:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800523a:	2b00      	cmp	r3, #0
 800523c:	4649      	mov	r1, r9
 800523e:	dd11      	ble.n	8005264 <_strtod_l+0x604>
 8005240:	2b1f      	cmp	r3, #31
 8005242:	f340 8127 	ble.w	8005494 <_strtod_l+0x834>
 8005246:	2b34      	cmp	r3, #52	; 0x34
 8005248:	bfd8      	it	le
 800524a:	f04f 33ff 	movle.w	r3, #4294967295
 800524e:	f04f 0800 	mov.w	r8, #0
 8005252:	bfcf      	iteee	gt
 8005254:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005258:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800525c:	fa03 f202 	lslle.w	r2, r3, r2
 8005260:	ea02 0901 	andle.w	r9, r2, r1
 8005264:	2200      	movs	r2, #0
 8005266:	2300      	movs	r3, #0
 8005268:	4640      	mov	r0, r8
 800526a:	4649      	mov	r1, r9
 800526c:	f7fb fb9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005270:	2800      	cmp	r0, #0
 8005272:	d1a1      	bne.n	80051b8 <_strtod_l+0x558>
 8005274:	9b06      	ldr	r3, [sp, #24]
 8005276:	465a      	mov	r2, fp
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	4650      	mov	r0, sl
 800527c:	4623      	mov	r3, r4
 800527e:	9908      	ldr	r1, [sp, #32]
 8005280:	f000 ff96 	bl	80061b0 <__s2b>
 8005284:	9008      	str	r0, [sp, #32]
 8005286:	2800      	cmp	r0, #0
 8005288:	f43f af21 	beq.w	80050ce <_strtod_l+0x46e>
 800528c:	9b04      	ldr	r3, [sp, #16]
 800528e:	f04f 0b00 	mov.w	fp, #0
 8005292:	1b5d      	subs	r5, r3, r5
 8005294:	9b07      	ldr	r3, [sp, #28]
 8005296:	f8cd b010 	str.w	fp, [sp, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	bfb4      	ite	lt
 800529e:	462b      	movlt	r3, r5
 80052a0:	2300      	movge	r3, #0
 80052a2:	930e      	str	r3, [sp, #56]	; 0x38
 80052a4:	9b07      	ldr	r3, [sp, #28]
 80052a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80052aa:	9314      	str	r3, [sp, #80]	; 0x50
 80052ac:	9b08      	ldr	r3, [sp, #32]
 80052ae:	4650      	mov	r0, sl
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	f000 fed5 	bl	8006060 <_Balloc>
 80052b6:	9006      	str	r0, [sp, #24]
 80052b8:	2800      	cmp	r0, #0
 80052ba:	f43f af10 	beq.w	80050de <_strtod_l+0x47e>
 80052be:	9b08      	ldr	r3, [sp, #32]
 80052c0:	300c      	adds	r0, #12
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	f103 010c 	add.w	r1, r3, #12
 80052c8:	3202      	adds	r2, #2
 80052ca:	0092      	lsls	r2, r2, #2
 80052cc:	f000 feba 	bl	8006044 <memcpy>
 80052d0:	ab1c      	add	r3, sp, #112	; 0x70
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	ab1b      	add	r3, sp, #108	; 0x6c
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	4650      	mov	r0, sl
 80052de:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80052e2:	f001 faa7 	bl	8006834 <__d2b>
 80052e6:	901a      	str	r0, [sp, #104]	; 0x68
 80052e8:	2800      	cmp	r0, #0
 80052ea:	f43f aef8 	beq.w	80050de <_strtod_l+0x47e>
 80052ee:	2101      	movs	r1, #1
 80052f0:	4650      	mov	r0, sl
 80052f2:	f000 fff5 	bl	80062e0 <__i2b>
 80052f6:	4603      	mov	r3, r0
 80052f8:	9004      	str	r0, [sp, #16]
 80052fa:	2800      	cmp	r0, #0
 80052fc:	f43f aeef 	beq.w	80050de <_strtod_l+0x47e>
 8005300:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005302:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005304:	2d00      	cmp	r5, #0
 8005306:	bfab      	itete	ge
 8005308:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800530a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800530c:	18ee      	addge	r6, r5, r3
 800530e:	1b5c      	sublt	r4, r3, r5
 8005310:	9b05      	ldr	r3, [sp, #20]
 8005312:	bfa8      	it	ge
 8005314:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005316:	eba5 0503 	sub.w	r5, r5, r3
 800531a:	4415      	add	r5, r2
 800531c:	4b6e      	ldr	r3, [pc, #440]	; (80054d8 <_strtod_l+0x878>)
 800531e:	f105 35ff 	add.w	r5, r5, #4294967295
 8005322:	bfb8      	it	lt
 8005324:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005326:	429d      	cmp	r5, r3
 8005328:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800532c:	f280 80c4 	bge.w	80054b8 <_strtod_l+0x858>
 8005330:	1b5b      	subs	r3, r3, r5
 8005332:	2b1f      	cmp	r3, #31
 8005334:	f04f 0701 	mov.w	r7, #1
 8005338:	eba2 0203 	sub.w	r2, r2, r3
 800533c:	f300 80b1 	bgt.w	80054a2 <_strtod_l+0x842>
 8005340:	2500      	movs	r5, #0
 8005342:	fa07 f303 	lsl.w	r3, r7, r3
 8005346:	930f      	str	r3, [sp, #60]	; 0x3c
 8005348:	18b7      	adds	r7, r6, r2
 800534a:	9b05      	ldr	r3, [sp, #20]
 800534c:	42be      	cmp	r6, r7
 800534e:	4414      	add	r4, r2
 8005350:	441c      	add	r4, r3
 8005352:	4633      	mov	r3, r6
 8005354:	bfa8      	it	ge
 8005356:	463b      	movge	r3, r7
 8005358:	42a3      	cmp	r3, r4
 800535a:	bfa8      	it	ge
 800535c:	4623      	movge	r3, r4
 800535e:	2b00      	cmp	r3, #0
 8005360:	bfc2      	ittt	gt
 8005362:	1aff      	subgt	r7, r7, r3
 8005364:	1ae4      	subgt	r4, r4, r3
 8005366:	1af6      	subgt	r6, r6, r3
 8005368:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800536a:	2b00      	cmp	r3, #0
 800536c:	dd17      	ble.n	800539e <_strtod_l+0x73e>
 800536e:	461a      	mov	r2, r3
 8005370:	4650      	mov	r0, sl
 8005372:	9904      	ldr	r1, [sp, #16]
 8005374:	f001 f872 	bl	800645c <__pow5mult>
 8005378:	9004      	str	r0, [sp, #16]
 800537a:	2800      	cmp	r0, #0
 800537c:	f43f aeaf 	beq.w	80050de <_strtod_l+0x47e>
 8005380:	4601      	mov	r1, r0
 8005382:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005384:	4650      	mov	r0, sl
 8005386:	f000 ffc1 	bl	800630c <__multiply>
 800538a:	9009      	str	r0, [sp, #36]	; 0x24
 800538c:	2800      	cmp	r0, #0
 800538e:	f43f aea6 	beq.w	80050de <_strtod_l+0x47e>
 8005392:	4650      	mov	r0, sl
 8005394:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005396:	f000 fea3 	bl	80060e0 <_Bfree>
 800539a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800539c:	931a      	str	r3, [sp, #104]	; 0x68
 800539e:	2f00      	cmp	r7, #0
 80053a0:	f300 808e 	bgt.w	80054c0 <_strtod_l+0x860>
 80053a4:	9b07      	ldr	r3, [sp, #28]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	dd08      	ble.n	80053bc <_strtod_l+0x75c>
 80053aa:	4650      	mov	r0, sl
 80053ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80053ae:	9906      	ldr	r1, [sp, #24]
 80053b0:	f001 f854 	bl	800645c <__pow5mult>
 80053b4:	9006      	str	r0, [sp, #24]
 80053b6:	2800      	cmp	r0, #0
 80053b8:	f43f ae91 	beq.w	80050de <_strtod_l+0x47e>
 80053bc:	2c00      	cmp	r4, #0
 80053be:	dd08      	ble.n	80053d2 <_strtod_l+0x772>
 80053c0:	4622      	mov	r2, r4
 80053c2:	4650      	mov	r0, sl
 80053c4:	9906      	ldr	r1, [sp, #24]
 80053c6:	f001 f8a3 	bl	8006510 <__lshift>
 80053ca:	9006      	str	r0, [sp, #24]
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f43f ae86 	beq.w	80050de <_strtod_l+0x47e>
 80053d2:	2e00      	cmp	r6, #0
 80053d4:	dd08      	ble.n	80053e8 <_strtod_l+0x788>
 80053d6:	4632      	mov	r2, r6
 80053d8:	4650      	mov	r0, sl
 80053da:	9904      	ldr	r1, [sp, #16]
 80053dc:	f001 f898 	bl	8006510 <__lshift>
 80053e0:	9004      	str	r0, [sp, #16]
 80053e2:	2800      	cmp	r0, #0
 80053e4:	f43f ae7b 	beq.w	80050de <_strtod_l+0x47e>
 80053e8:	4650      	mov	r0, sl
 80053ea:	9a06      	ldr	r2, [sp, #24]
 80053ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80053ee:	f001 f91b 	bl	8006628 <__mdiff>
 80053f2:	4683      	mov	fp, r0
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f43f ae72 	beq.w	80050de <_strtod_l+0x47e>
 80053fa:	2400      	movs	r4, #0
 80053fc:	68c3      	ldr	r3, [r0, #12]
 80053fe:	9904      	ldr	r1, [sp, #16]
 8005400:	60c4      	str	r4, [r0, #12]
 8005402:	930b      	str	r3, [sp, #44]	; 0x2c
 8005404:	f001 f8f4 	bl	80065f0 <__mcmp>
 8005408:	42a0      	cmp	r0, r4
 800540a:	da6b      	bge.n	80054e4 <_strtod_l+0x884>
 800540c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800540e:	ea53 0308 	orrs.w	r3, r3, r8
 8005412:	f040 8091 	bne.w	8005538 <_strtod_l+0x8d8>
 8005416:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800541a:	2b00      	cmp	r3, #0
 800541c:	f040 808c 	bne.w	8005538 <_strtod_l+0x8d8>
 8005420:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005424:	0d1b      	lsrs	r3, r3, #20
 8005426:	051b      	lsls	r3, r3, #20
 8005428:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800542c:	f240 8084 	bls.w	8005538 <_strtod_l+0x8d8>
 8005430:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005434:	b91b      	cbnz	r3, 800543e <_strtod_l+0x7de>
 8005436:	f8db 3010 	ldr.w	r3, [fp, #16]
 800543a:	2b01      	cmp	r3, #1
 800543c:	dd7c      	ble.n	8005538 <_strtod_l+0x8d8>
 800543e:	4659      	mov	r1, fp
 8005440:	2201      	movs	r2, #1
 8005442:	4650      	mov	r0, sl
 8005444:	f001 f864 	bl	8006510 <__lshift>
 8005448:	9904      	ldr	r1, [sp, #16]
 800544a:	4683      	mov	fp, r0
 800544c:	f001 f8d0 	bl	80065f0 <__mcmp>
 8005450:	2800      	cmp	r0, #0
 8005452:	dd71      	ble.n	8005538 <_strtod_l+0x8d8>
 8005454:	9905      	ldr	r1, [sp, #20]
 8005456:	464b      	mov	r3, r9
 8005458:	4a20      	ldr	r2, [pc, #128]	; (80054dc <_strtod_l+0x87c>)
 800545a:	2900      	cmp	r1, #0
 800545c:	f000 808c 	beq.w	8005578 <_strtod_l+0x918>
 8005460:	ea02 0109 	and.w	r1, r2, r9
 8005464:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005468:	f300 8086 	bgt.w	8005578 <_strtod_l+0x918>
 800546c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005470:	f77f aeaa 	ble.w	80051c8 <_strtod_l+0x568>
 8005474:	4640      	mov	r0, r8
 8005476:	4649      	mov	r1, r9
 8005478:	4b19      	ldr	r3, [pc, #100]	; (80054e0 <_strtod_l+0x880>)
 800547a:	2200      	movs	r2, #0
 800547c:	f7fb f82c 	bl	80004d8 <__aeabi_dmul>
 8005480:	460b      	mov	r3, r1
 8005482:	4303      	orrs	r3, r0
 8005484:	bf08      	it	eq
 8005486:	2322      	moveq	r3, #34	; 0x22
 8005488:	4680      	mov	r8, r0
 800548a:	4689      	mov	r9, r1
 800548c:	bf08      	it	eq
 800548e:	f8ca 3000 	streq.w	r3, [sl]
 8005492:	e62f      	b.n	80050f4 <_strtod_l+0x494>
 8005494:	f04f 32ff 	mov.w	r2, #4294967295
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	ea03 0808 	and.w	r8, r3, r8
 80054a0:	e6e0      	b.n	8005264 <_strtod_l+0x604>
 80054a2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80054a6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80054aa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80054ae:	35e2      	adds	r5, #226	; 0xe2
 80054b0:	fa07 f505 	lsl.w	r5, r7, r5
 80054b4:	970f      	str	r7, [sp, #60]	; 0x3c
 80054b6:	e747      	b.n	8005348 <_strtod_l+0x6e8>
 80054b8:	2301      	movs	r3, #1
 80054ba:	2500      	movs	r5, #0
 80054bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80054be:	e743      	b.n	8005348 <_strtod_l+0x6e8>
 80054c0:	463a      	mov	r2, r7
 80054c2:	4650      	mov	r0, sl
 80054c4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80054c6:	f001 f823 	bl	8006510 <__lshift>
 80054ca:	901a      	str	r0, [sp, #104]	; 0x68
 80054cc:	2800      	cmp	r0, #0
 80054ce:	f47f af69 	bne.w	80053a4 <_strtod_l+0x744>
 80054d2:	e604      	b.n	80050de <_strtod_l+0x47e>
 80054d4:	08007ba8 	.word	0x08007ba8
 80054d8:	fffffc02 	.word	0xfffffc02
 80054dc:	7ff00000 	.word	0x7ff00000
 80054e0:	39500000 	.word	0x39500000
 80054e4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80054e8:	d165      	bne.n	80055b6 <_strtod_l+0x956>
 80054ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054f0:	b35a      	cbz	r2, 800554a <_strtod_l+0x8ea>
 80054f2:	4a99      	ldr	r2, [pc, #612]	; (8005758 <_strtod_l+0xaf8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d12b      	bne.n	8005550 <_strtod_l+0x8f0>
 80054f8:	9b05      	ldr	r3, [sp, #20]
 80054fa:	4641      	mov	r1, r8
 80054fc:	b303      	cbz	r3, 8005540 <_strtod_l+0x8e0>
 80054fe:	464a      	mov	r2, r9
 8005500:	4b96      	ldr	r3, [pc, #600]	; (800575c <_strtod_l+0xafc>)
 8005502:	4013      	ands	r3, r2
 8005504:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005508:	f04f 32ff 	mov.w	r2, #4294967295
 800550c:	d81b      	bhi.n	8005546 <_strtod_l+0x8e6>
 800550e:	0d1b      	lsrs	r3, r3, #20
 8005510:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	4299      	cmp	r1, r3
 800551a:	d119      	bne.n	8005550 <_strtod_l+0x8f0>
 800551c:	4b90      	ldr	r3, [pc, #576]	; (8005760 <_strtod_l+0xb00>)
 800551e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005520:	429a      	cmp	r2, r3
 8005522:	d102      	bne.n	800552a <_strtod_l+0x8ca>
 8005524:	3101      	adds	r1, #1
 8005526:	f43f adda 	beq.w	80050de <_strtod_l+0x47e>
 800552a:	f04f 0800 	mov.w	r8, #0
 800552e:	4b8b      	ldr	r3, [pc, #556]	; (800575c <_strtod_l+0xafc>)
 8005530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005532:	401a      	ands	r2, r3
 8005534:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005538:	9b05      	ldr	r3, [sp, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d19a      	bne.n	8005474 <_strtod_l+0x814>
 800553e:	e5d9      	b.n	80050f4 <_strtod_l+0x494>
 8005540:	f04f 33ff 	mov.w	r3, #4294967295
 8005544:	e7e8      	b.n	8005518 <_strtod_l+0x8b8>
 8005546:	4613      	mov	r3, r2
 8005548:	e7e6      	b.n	8005518 <_strtod_l+0x8b8>
 800554a:	ea53 0308 	orrs.w	r3, r3, r8
 800554e:	d081      	beq.n	8005454 <_strtod_l+0x7f4>
 8005550:	b1e5      	cbz	r5, 800558c <_strtod_l+0x92c>
 8005552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005554:	421d      	tst	r5, r3
 8005556:	d0ef      	beq.n	8005538 <_strtod_l+0x8d8>
 8005558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555a:	4640      	mov	r0, r8
 800555c:	4649      	mov	r1, r9
 800555e:	9a05      	ldr	r2, [sp, #20]
 8005560:	b1c3      	cbz	r3, 8005594 <_strtod_l+0x934>
 8005562:	f7ff fb5b 	bl	8004c1c <sulp>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800556e:	f7fa fdfd 	bl	800016c <__adddf3>
 8005572:	4680      	mov	r8, r0
 8005574:	4689      	mov	r9, r1
 8005576:	e7df      	b.n	8005538 <_strtod_l+0x8d8>
 8005578:	4013      	ands	r3, r2
 800557a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800557e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005582:	f04f 38ff 	mov.w	r8, #4294967295
 8005586:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800558a:	e7d5      	b.n	8005538 <_strtod_l+0x8d8>
 800558c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800558e:	ea13 0f08 	tst.w	r3, r8
 8005592:	e7e0      	b.n	8005556 <_strtod_l+0x8f6>
 8005594:	f7ff fb42 	bl	8004c1c <sulp>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055a0:	f7fa fde2 	bl	8000168 <__aeabi_dsub>
 80055a4:	2200      	movs	r2, #0
 80055a6:	2300      	movs	r3, #0
 80055a8:	4680      	mov	r8, r0
 80055aa:	4689      	mov	r9, r1
 80055ac:	f7fb f9fc 	bl	80009a8 <__aeabi_dcmpeq>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	d0c1      	beq.n	8005538 <_strtod_l+0x8d8>
 80055b4:	e608      	b.n	80051c8 <_strtod_l+0x568>
 80055b6:	4658      	mov	r0, fp
 80055b8:	9904      	ldr	r1, [sp, #16]
 80055ba:	f001 f997 	bl	80068ec <__ratio>
 80055be:	2200      	movs	r2, #0
 80055c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	f7fb fa02 	bl	80009d0 <__aeabi_dcmple>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d070      	beq.n	80056b2 <_strtod_l+0xa52>
 80055d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d042      	beq.n	800565c <_strtod_l+0x9fc>
 80055d6:	2600      	movs	r6, #0
 80055d8:	4f62      	ldr	r7, [pc, #392]	; (8005764 <_strtod_l+0xb04>)
 80055da:	4d62      	ldr	r5, [pc, #392]	; (8005764 <_strtod_l+0xb04>)
 80055dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055e2:	0d1b      	lsrs	r3, r3, #20
 80055e4:	051b      	lsls	r3, r3, #20
 80055e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80055e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055ea:	4b5f      	ldr	r3, [pc, #380]	; (8005768 <_strtod_l+0xb08>)
 80055ec:	429a      	cmp	r2, r3
 80055ee:	f040 80c3 	bne.w	8005778 <_strtod_l+0xb18>
 80055f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f4:	4640      	mov	r0, r8
 80055f6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80055fa:	4649      	mov	r1, r9
 80055fc:	f001 f8a0 	bl	8006740 <__ulp>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4630      	mov	r0, r6
 8005606:	4639      	mov	r1, r7
 8005608:	f7fa ff66 	bl	80004d8 <__aeabi_dmul>
 800560c:	4642      	mov	r2, r8
 800560e:	464b      	mov	r3, r9
 8005610:	f7fa fdac 	bl	800016c <__adddf3>
 8005614:	460b      	mov	r3, r1
 8005616:	4951      	ldr	r1, [pc, #324]	; (800575c <_strtod_l+0xafc>)
 8005618:	4a54      	ldr	r2, [pc, #336]	; (800576c <_strtod_l+0xb0c>)
 800561a:	4019      	ands	r1, r3
 800561c:	4291      	cmp	r1, r2
 800561e:	4680      	mov	r8, r0
 8005620:	d95d      	bls.n	80056de <_strtod_l+0xa7e>
 8005622:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005624:	4b4e      	ldr	r3, [pc, #312]	; (8005760 <_strtod_l+0xb00>)
 8005626:	429a      	cmp	r2, r3
 8005628:	d103      	bne.n	8005632 <_strtod_l+0x9d2>
 800562a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800562c:	3301      	adds	r3, #1
 800562e:	f43f ad56 	beq.w	80050de <_strtod_l+0x47e>
 8005632:	f04f 38ff 	mov.w	r8, #4294967295
 8005636:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005760 <_strtod_l+0xb00>
 800563a:	4650      	mov	r0, sl
 800563c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800563e:	f000 fd4f 	bl	80060e0 <_Bfree>
 8005642:	4650      	mov	r0, sl
 8005644:	9906      	ldr	r1, [sp, #24]
 8005646:	f000 fd4b 	bl	80060e0 <_Bfree>
 800564a:	4650      	mov	r0, sl
 800564c:	9904      	ldr	r1, [sp, #16]
 800564e:	f000 fd47 	bl	80060e0 <_Bfree>
 8005652:	4659      	mov	r1, fp
 8005654:	4650      	mov	r0, sl
 8005656:	f000 fd43 	bl	80060e0 <_Bfree>
 800565a:	e627      	b.n	80052ac <_strtod_l+0x64c>
 800565c:	f1b8 0f00 	cmp.w	r8, #0
 8005660:	d119      	bne.n	8005696 <_strtod_l+0xa36>
 8005662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005668:	b9e3      	cbnz	r3, 80056a4 <_strtod_l+0xa44>
 800566a:	2200      	movs	r2, #0
 800566c:	4630      	mov	r0, r6
 800566e:	4639      	mov	r1, r7
 8005670:	4b3c      	ldr	r3, [pc, #240]	; (8005764 <_strtod_l+0xb04>)
 8005672:	f7fb f9a3 	bl	80009bc <__aeabi_dcmplt>
 8005676:	b9c8      	cbnz	r0, 80056ac <_strtod_l+0xa4c>
 8005678:	2200      	movs	r2, #0
 800567a:	4630      	mov	r0, r6
 800567c:	4639      	mov	r1, r7
 800567e:	4b3c      	ldr	r3, [pc, #240]	; (8005770 <_strtod_l+0xb10>)
 8005680:	f7fa ff2a 	bl	80004d8 <__aeabi_dmul>
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800568c:	9416      	str	r4, [sp, #88]	; 0x58
 800568e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005690:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005694:	e7a2      	b.n	80055dc <_strtod_l+0x97c>
 8005696:	f1b8 0f01 	cmp.w	r8, #1
 800569a:	d103      	bne.n	80056a4 <_strtod_l+0xa44>
 800569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f43f ad92 	beq.w	80051c8 <_strtod_l+0x568>
 80056a4:	2600      	movs	r6, #0
 80056a6:	2400      	movs	r4, #0
 80056a8:	4f32      	ldr	r7, [pc, #200]	; (8005774 <_strtod_l+0xb14>)
 80056aa:	e796      	b.n	80055da <_strtod_l+0x97a>
 80056ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80056ae:	4d30      	ldr	r5, [pc, #192]	; (8005770 <_strtod_l+0xb10>)
 80056b0:	e7ea      	b.n	8005688 <_strtod_l+0xa28>
 80056b2:	4b2f      	ldr	r3, [pc, #188]	; (8005770 <_strtod_l+0xb10>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	4630      	mov	r0, r6
 80056b8:	4639      	mov	r1, r7
 80056ba:	f7fa ff0d 	bl	80004d8 <__aeabi_dmul>
 80056be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c0:	4604      	mov	r4, r0
 80056c2:	460d      	mov	r5, r1
 80056c4:	b933      	cbnz	r3, 80056d4 <_strtod_l+0xa74>
 80056c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056ca:	9010      	str	r0, [sp, #64]	; 0x40
 80056cc:	9311      	str	r3, [sp, #68]	; 0x44
 80056ce:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80056d2:	e783      	b.n	80055dc <_strtod_l+0x97c>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80056dc:	e7f7      	b.n	80056ce <_strtod_l+0xa6e>
 80056de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80056e2:	9b05      	ldr	r3, [sp, #20]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1a8      	bne.n	800563a <_strtod_l+0x9da>
 80056e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056ee:	0d1b      	lsrs	r3, r3, #20
 80056f0:	051b      	lsls	r3, r3, #20
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d1a1      	bne.n	800563a <_strtod_l+0x9da>
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fb fb25 	bl	8000d48 <__aeabi_d2lz>
 80056fe:	f7fa febd 	bl	800047c <__aeabi_l2d>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4620      	mov	r0, r4
 8005708:	4629      	mov	r1, r5
 800570a:	f7fa fd2d 	bl	8000168 <__aeabi_dsub>
 800570e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005714:	ea43 0308 	orr.w	r3, r3, r8
 8005718:	4313      	orrs	r3, r2
 800571a:	4604      	mov	r4, r0
 800571c:	460d      	mov	r5, r1
 800571e:	d066      	beq.n	80057ee <_strtod_l+0xb8e>
 8005720:	a309      	add	r3, pc, #36	; (adr r3, 8005748 <_strtod_l+0xae8>)
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f7fb f949 	bl	80009bc <__aeabi_dcmplt>
 800572a:	2800      	cmp	r0, #0
 800572c:	f47f ace2 	bne.w	80050f4 <_strtod_l+0x494>
 8005730:	a307      	add	r3, pc, #28	; (adr r3, 8005750 <_strtod_l+0xaf0>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	4620      	mov	r0, r4
 8005738:	4629      	mov	r1, r5
 800573a:	f7fb f95d 	bl	80009f8 <__aeabi_dcmpgt>
 800573e:	2800      	cmp	r0, #0
 8005740:	f43f af7b 	beq.w	800563a <_strtod_l+0x9da>
 8005744:	e4d6      	b.n	80050f4 <_strtod_l+0x494>
 8005746:	bf00      	nop
 8005748:	94a03595 	.word	0x94a03595
 800574c:	3fdfffff 	.word	0x3fdfffff
 8005750:	35afe535 	.word	0x35afe535
 8005754:	3fe00000 	.word	0x3fe00000
 8005758:	000fffff 	.word	0x000fffff
 800575c:	7ff00000 	.word	0x7ff00000
 8005760:	7fefffff 	.word	0x7fefffff
 8005764:	3ff00000 	.word	0x3ff00000
 8005768:	7fe00000 	.word	0x7fe00000
 800576c:	7c9fffff 	.word	0x7c9fffff
 8005770:	3fe00000 	.word	0x3fe00000
 8005774:	bff00000 	.word	0xbff00000
 8005778:	9b05      	ldr	r3, [sp, #20]
 800577a:	b313      	cbz	r3, 80057c2 <_strtod_l+0xb62>
 800577c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800577e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005782:	d81e      	bhi.n	80057c2 <_strtod_l+0xb62>
 8005784:	a326      	add	r3, pc, #152	; (adr r3, 8005820 <_strtod_l+0xbc0>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	4620      	mov	r0, r4
 800578c:	4629      	mov	r1, r5
 800578e:	f7fb f91f 	bl	80009d0 <__aeabi_dcmple>
 8005792:	b190      	cbz	r0, 80057ba <_strtod_l+0xb5a>
 8005794:	4629      	mov	r1, r5
 8005796:	4620      	mov	r0, r4
 8005798:	f7fb f938 	bl	8000a0c <__aeabi_d2uiz>
 800579c:	2801      	cmp	r0, #1
 800579e:	bf38      	it	cc
 80057a0:	2001      	movcc	r0, #1
 80057a2:	f7fa fe1f 	bl	80003e4 <__aeabi_ui2d>
 80057a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057a8:	4604      	mov	r4, r0
 80057aa:	460d      	mov	r5, r1
 80057ac:	b9d3      	cbnz	r3, 80057e4 <_strtod_l+0xb84>
 80057ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80057b2:	9012      	str	r0, [sp, #72]	; 0x48
 80057b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80057b6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80057ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057bc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80057c0:	1a9f      	subs	r7, r3, r2
 80057c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057c6:	f000 ffbb 	bl	8006740 <__ulp>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4630      	mov	r0, r6
 80057d0:	4639      	mov	r1, r7
 80057d2:	f7fa fe81 	bl	80004d8 <__aeabi_dmul>
 80057d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80057da:	f7fa fcc7 	bl	800016c <__adddf3>
 80057de:	4680      	mov	r8, r0
 80057e0:	4689      	mov	r9, r1
 80057e2:	e77e      	b.n	80056e2 <_strtod_l+0xa82>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80057ec:	e7e3      	b.n	80057b6 <_strtod_l+0xb56>
 80057ee:	a30e      	add	r3, pc, #56	; (adr r3, 8005828 <_strtod_l+0xbc8>)
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f7fb f8e2 	bl	80009bc <__aeabi_dcmplt>
 80057f8:	e7a1      	b.n	800573e <_strtod_l+0xade>
 80057fa:	2300      	movs	r3, #0
 80057fc:	930a      	str	r3, [sp, #40]	; 0x28
 80057fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005800:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	f7ff ba71 	b.w	8004cea <_strtod_l+0x8a>
 8005808:	2a65      	cmp	r2, #101	; 0x65
 800580a:	f43f ab63 	beq.w	8004ed4 <_strtod_l+0x274>
 800580e:	2a45      	cmp	r2, #69	; 0x45
 8005810:	f43f ab60 	beq.w	8004ed4 <_strtod_l+0x274>
 8005814:	2301      	movs	r3, #1
 8005816:	f7ff bb95 	b.w	8004f44 <_strtod_l+0x2e4>
 800581a:	bf00      	nop
 800581c:	f3af 8000 	nop.w
 8005820:	ffc00000 	.word	0xffc00000
 8005824:	41dfffff 	.word	0x41dfffff
 8005828:	94a03595 	.word	0x94a03595
 800582c:	3fcfffff 	.word	0x3fcfffff

08005830 <strtod>:
 8005830:	460a      	mov	r2, r1
 8005832:	4601      	mov	r1, r0
 8005834:	4802      	ldr	r0, [pc, #8]	; (8005840 <strtod+0x10>)
 8005836:	4b03      	ldr	r3, [pc, #12]	; (8005844 <strtod+0x14>)
 8005838:	6800      	ldr	r0, [r0, #0]
 800583a:	f7ff ba11 	b.w	8004c60 <_strtod_l>
 800583e:	bf00      	nop
 8005840:	20000010 	.word	0x20000010
 8005844:	20000078 	.word	0x20000078

08005848 <_strtol_l.constprop.0>:
 8005848:	2b01      	cmp	r3, #1
 800584a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584e:	4680      	mov	r8, r0
 8005850:	d001      	beq.n	8005856 <_strtol_l.constprop.0+0xe>
 8005852:	2b24      	cmp	r3, #36	; 0x24
 8005854:	d906      	bls.n	8005864 <_strtol_l.constprop.0+0x1c>
 8005856:	f7ff f975 	bl	8004b44 <__errno>
 800585a:	2316      	movs	r3, #22
 800585c:	6003      	str	r3, [r0, #0]
 800585e:	2000      	movs	r0, #0
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	460d      	mov	r5, r1
 8005866:	4f35      	ldr	r7, [pc, #212]	; (800593c <_strtol_l.constprop.0+0xf4>)
 8005868:	4628      	mov	r0, r5
 800586a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800586e:	5de6      	ldrb	r6, [r4, r7]
 8005870:	f016 0608 	ands.w	r6, r6, #8
 8005874:	d1f8      	bne.n	8005868 <_strtol_l.constprop.0+0x20>
 8005876:	2c2d      	cmp	r4, #45	; 0x2d
 8005878:	d12f      	bne.n	80058da <_strtol_l.constprop.0+0x92>
 800587a:	2601      	movs	r6, #1
 800587c:	782c      	ldrb	r4, [r5, #0]
 800587e:	1c85      	adds	r5, r0, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d057      	beq.n	8005934 <_strtol_l.constprop.0+0xec>
 8005884:	2b10      	cmp	r3, #16
 8005886:	d109      	bne.n	800589c <_strtol_l.constprop.0+0x54>
 8005888:	2c30      	cmp	r4, #48	; 0x30
 800588a:	d107      	bne.n	800589c <_strtol_l.constprop.0+0x54>
 800588c:	7828      	ldrb	r0, [r5, #0]
 800588e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005892:	2858      	cmp	r0, #88	; 0x58
 8005894:	d149      	bne.n	800592a <_strtol_l.constprop.0+0xe2>
 8005896:	2310      	movs	r3, #16
 8005898:	786c      	ldrb	r4, [r5, #1]
 800589a:	3502      	adds	r5, #2
 800589c:	2700      	movs	r7, #0
 800589e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80058a2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80058a6:	fbbe f9f3 	udiv	r9, lr, r3
 80058aa:	4638      	mov	r0, r7
 80058ac:	fb03 ea19 	mls	sl, r3, r9, lr
 80058b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80058b4:	f1bc 0f09 	cmp.w	ip, #9
 80058b8:	d814      	bhi.n	80058e4 <_strtol_l.constprop.0+0x9c>
 80058ba:	4664      	mov	r4, ip
 80058bc:	42a3      	cmp	r3, r4
 80058be:	dd22      	ble.n	8005906 <_strtol_l.constprop.0+0xbe>
 80058c0:	2f00      	cmp	r7, #0
 80058c2:	db1d      	blt.n	8005900 <_strtol_l.constprop.0+0xb8>
 80058c4:	4581      	cmp	r9, r0
 80058c6:	d31b      	bcc.n	8005900 <_strtol_l.constprop.0+0xb8>
 80058c8:	d101      	bne.n	80058ce <_strtol_l.constprop.0+0x86>
 80058ca:	45a2      	cmp	sl, r4
 80058cc:	db18      	blt.n	8005900 <_strtol_l.constprop.0+0xb8>
 80058ce:	2701      	movs	r7, #1
 80058d0:	fb00 4003 	mla	r0, r0, r3, r4
 80058d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058d8:	e7ea      	b.n	80058b0 <_strtol_l.constprop.0+0x68>
 80058da:	2c2b      	cmp	r4, #43	; 0x2b
 80058dc:	bf04      	itt	eq
 80058de:	782c      	ldrbeq	r4, [r5, #0]
 80058e0:	1c85      	addeq	r5, r0, #2
 80058e2:	e7cd      	b.n	8005880 <_strtol_l.constprop.0+0x38>
 80058e4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80058e8:	f1bc 0f19 	cmp.w	ip, #25
 80058ec:	d801      	bhi.n	80058f2 <_strtol_l.constprop.0+0xaa>
 80058ee:	3c37      	subs	r4, #55	; 0x37
 80058f0:	e7e4      	b.n	80058bc <_strtol_l.constprop.0+0x74>
 80058f2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80058f6:	f1bc 0f19 	cmp.w	ip, #25
 80058fa:	d804      	bhi.n	8005906 <_strtol_l.constprop.0+0xbe>
 80058fc:	3c57      	subs	r4, #87	; 0x57
 80058fe:	e7dd      	b.n	80058bc <_strtol_l.constprop.0+0x74>
 8005900:	f04f 37ff 	mov.w	r7, #4294967295
 8005904:	e7e6      	b.n	80058d4 <_strtol_l.constprop.0+0x8c>
 8005906:	2f00      	cmp	r7, #0
 8005908:	da07      	bge.n	800591a <_strtol_l.constprop.0+0xd2>
 800590a:	2322      	movs	r3, #34	; 0x22
 800590c:	4670      	mov	r0, lr
 800590e:	f8c8 3000 	str.w	r3, [r8]
 8005912:	2a00      	cmp	r2, #0
 8005914:	d0a4      	beq.n	8005860 <_strtol_l.constprop.0+0x18>
 8005916:	1e69      	subs	r1, r5, #1
 8005918:	e005      	b.n	8005926 <_strtol_l.constprop.0+0xde>
 800591a:	b106      	cbz	r6, 800591e <_strtol_l.constprop.0+0xd6>
 800591c:	4240      	negs	r0, r0
 800591e:	2a00      	cmp	r2, #0
 8005920:	d09e      	beq.n	8005860 <_strtol_l.constprop.0+0x18>
 8005922:	2f00      	cmp	r7, #0
 8005924:	d1f7      	bne.n	8005916 <_strtol_l.constprop.0+0xce>
 8005926:	6011      	str	r1, [r2, #0]
 8005928:	e79a      	b.n	8005860 <_strtol_l.constprop.0+0x18>
 800592a:	2430      	movs	r4, #48	; 0x30
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1b5      	bne.n	800589c <_strtol_l.constprop.0+0x54>
 8005930:	2308      	movs	r3, #8
 8005932:	e7b3      	b.n	800589c <_strtol_l.constprop.0+0x54>
 8005934:	2c30      	cmp	r4, #48	; 0x30
 8005936:	d0a9      	beq.n	800588c <_strtol_l.constprop.0+0x44>
 8005938:	230a      	movs	r3, #10
 800593a:	e7af      	b.n	800589c <_strtol_l.constprop.0+0x54>
 800593c:	08007bd1 	.word	0x08007bd1

08005940 <strtol>:
 8005940:	4613      	mov	r3, r2
 8005942:	460a      	mov	r2, r1
 8005944:	4601      	mov	r1, r0
 8005946:	4802      	ldr	r0, [pc, #8]	; (8005950 <strtol+0x10>)
 8005948:	6800      	ldr	r0, [r0, #0]
 800594a:	f7ff bf7d 	b.w	8005848 <_strtol_l.constprop.0>
 800594e:	bf00      	nop
 8005950:	20000010 	.word	0x20000010

08005954 <rshift>:
 8005954:	6903      	ldr	r3, [r0, #16]
 8005956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800595a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800595e:	f100 0414 	add.w	r4, r0, #20
 8005962:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005966:	dd46      	ble.n	80059f6 <rshift+0xa2>
 8005968:	f011 011f 	ands.w	r1, r1, #31
 800596c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005970:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005974:	d10c      	bne.n	8005990 <rshift+0x3c>
 8005976:	4629      	mov	r1, r5
 8005978:	f100 0710 	add.w	r7, r0, #16
 800597c:	42b1      	cmp	r1, r6
 800597e:	d335      	bcc.n	80059ec <rshift+0x98>
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	1eea      	subs	r2, r5, #3
 8005986:	4296      	cmp	r6, r2
 8005988:	bf38      	it	cc
 800598a:	2300      	movcc	r3, #0
 800598c:	4423      	add	r3, r4
 800598e:	e015      	b.n	80059bc <rshift+0x68>
 8005990:	46a1      	mov	r9, r4
 8005992:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005996:	f1c1 0820 	rsb	r8, r1, #32
 800599a:	40cf      	lsrs	r7, r1
 800599c:	f105 0e04 	add.w	lr, r5, #4
 80059a0:	4576      	cmp	r6, lr
 80059a2:	46f4      	mov	ip, lr
 80059a4:	d816      	bhi.n	80059d4 <rshift+0x80>
 80059a6:	1a9a      	subs	r2, r3, r2
 80059a8:	0092      	lsls	r2, r2, #2
 80059aa:	3a04      	subs	r2, #4
 80059ac:	3501      	adds	r5, #1
 80059ae:	42ae      	cmp	r6, r5
 80059b0:	bf38      	it	cc
 80059b2:	2200      	movcc	r2, #0
 80059b4:	18a3      	adds	r3, r4, r2
 80059b6:	50a7      	str	r7, [r4, r2]
 80059b8:	b107      	cbz	r7, 80059bc <rshift+0x68>
 80059ba:	3304      	adds	r3, #4
 80059bc:	42a3      	cmp	r3, r4
 80059be:	eba3 0204 	sub.w	r2, r3, r4
 80059c2:	bf08      	it	eq
 80059c4:	2300      	moveq	r3, #0
 80059c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80059ca:	6102      	str	r2, [r0, #16]
 80059cc:	bf08      	it	eq
 80059ce:	6143      	streq	r3, [r0, #20]
 80059d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059d4:	f8dc c000 	ldr.w	ip, [ip]
 80059d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80059dc:	ea4c 0707 	orr.w	r7, ip, r7
 80059e0:	f849 7b04 	str.w	r7, [r9], #4
 80059e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80059e8:	40cf      	lsrs	r7, r1
 80059ea:	e7d9      	b.n	80059a0 <rshift+0x4c>
 80059ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80059f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80059f4:	e7c2      	b.n	800597c <rshift+0x28>
 80059f6:	4623      	mov	r3, r4
 80059f8:	e7e0      	b.n	80059bc <rshift+0x68>

080059fa <__hexdig_fun>:
 80059fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80059fe:	2b09      	cmp	r3, #9
 8005a00:	d802      	bhi.n	8005a08 <__hexdig_fun+0xe>
 8005a02:	3820      	subs	r0, #32
 8005a04:	b2c0      	uxtb	r0, r0
 8005a06:	4770      	bx	lr
 8005a08:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005a0c:	2b05      	cmp	r3, #5
 8005a0e:	d801      	bhi.n	8005a14 <__hexdig_fun+0x1a>
 8005a10:	3847      	subs	r0, #71	; 0x47
 8005a12:	e7f7      	b.n	8005a04 <__hexdig_fun+0xa>
 8005a14:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005a18:	2b05      	cmp	r3, #5
 8005a1a:	d801      	bhi.n	8005a20 <__hexdig_fun+0x26>
 8005a1c:	3827      	subs	r0, #39	; 0x27
 8005a1e:	e7f1      	b.n	8005a04 <__hexdig_fun+0xa>
 8005a20:	2000      	movs	r0, #0
 8005a22:	4770      	bx	lr

08005a24 <__gethex>:
 8005a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a28:	b08b      	sub	sp, #44	; 0x2c
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	4bb2      	ldr	r3, [pc, #712]	; (8005cf8 <__gethex+0x2d4>)
 8005a2e:	9002      	str	r0, [sp, #8]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	468b      	mov	fp, r1
 8005a34:	4618      	mov	r0, r3
 8005a36:	4690      	mov	r8, r2
 8005a38:	9303      	str	r3, [sp, #12]
 8005a3a:	f7fa fb89 	bl	8000150 <strlen>
 8005a3e:	4682      	mov	sl, r0
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	f8db 2000 	ldr.w	r2, [fp]
 8005a46:	4403      	add	r3, r0
 8005a48:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005a4c:	9306      	str	r3, [sp, #24]
 8005a4e:	1c93      	adds	r3, r2, #2
 8005a50:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005a54:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005a58:	32fe      	adds	r2, #254	; 0xfe
 8005a5a:	18d1      	adds	r1, r2, r3
 8005a5c:	461f      	mov	r7, r3
 8005a5e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005a62:	9101      	str	r1, [sp, #4]
 8005a64:	2830      	cmp	r0, #48	; 0x30
 8005a66:	d0f8      	beq.n	8005a5a <__gethex+0x36>
 8005a68:	f7ff ffc7 	bl	80059fa <__hexdig_fun>
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d13a      	bne.n	8005ae8 <__gethex+0xc4>
 8005a72:	4652      	mov	r2, sl
 8005a74:	4638      	mov	r0, r7
 8005a76:	9903      	ldr	r1, [sp, #12]
 8005a78:	f001 f868 	bl	8006b4c <strncmp>
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	d166      	bne.n	8005b50 <__gethex+0x12c>
 8005a82:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005a86:	eb07 060a 	add.w	r6, r7, sl
 8005a8a:	f7ff ffb6 	bl	80059fa <__hexdig_fun>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d060      	beq.n	8005b54 <__gethex+0x130>
 8005a92:	4633      	mov	r3, r6
 8005a94:	7818      	ldrb	r0, [r3, #0]
 8005a96:	461f      	mov	r7, r3
 8005a98:	2830      	cmp	r0, #48	; 0x30
 8005a9a:	f103 0301 	add.w	r3, r3, #1
 8005a9e:	d0f9      	beq.n	8005a94 <__gethex+0x70>
 8005aa0:	f7ff ffab 	bl	80059fa <__hexdig_fun>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	fab0 f480 	clz	r4, r0
 8005aaa:	4635      	mov	r5, r6
 8005aac:	0964      	lsrs	r4, r4, #5
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	463a      	mov	r2, r7
 8005ab2:	4616      	mov	r6, r2
 8005ab4:	7830      	ldrb	r0, [r6, #0]
 8005ab6:	3201      	adds	r2, #1
 8005ab8:	f7ff ff9f 	bl	80059fa <__hexdig_fun>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d1f8      	bne.n	8005ab2 <__gethex+0x8e>
 8005ac0:	4652      	mov	r2, sl
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	9903      	ldr	r1, [sp, #12]
 8005ac6:	f001 f841 	bl	8006b4c <strncmp>
 8005aca:	b980      	cbnz	r0, 8005aee <__gethex+0xca>
 8005acc:	b94d      	cbnz	r5, 8005ae2 <__gethex+0xbe>
 8005ace:	eb06 050a 	add.w	r5, r6, sl
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	4616      	mov	r6, r2
 8005ad6:	7830      	ldrb	r0, [r6, #0]
 8005ad8:	3201      	adds	r2, #1
 8005ada:	f7ff ff8e 	bl	80059fa <__hexdig_fun>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d1f8      	bne.n	8005ad4 <__gethex+0xb0>
 8005ae2:	1bad      	subs	r5, r5, r6
 8005ae4:	00ad      	lsls	r5, r5, #2
 8005ae6:	e004      	b.n	8005af2 <__gethex+0xce>
 8005ae8:	2400      	movs	r4, #0
 8005aea:	4625      	mov	r5, r4
 8005aec:	e7e0      	b.n	8005ab0 <__gethex+0x8c>
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	d1f7      	bne.n	8005ae2 <__gethex+0xbe>
 8005af2:	7833      	ldrb	r3, [r6, #0]
 8005af4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005af8:	2b50      	cmp	r3, #80	; 0x50
 8005afa:	d139      	bne.n	8005b70 <__gethex+0x14c>
 8005afc:	7873      	ldrb	r3, [r6, #1]
 8005afe:	2b2b      	cmp	r3, #43	; 0x2b
 8005b00:	d02a      	beq.n	8005b58 <__gethex+0x134>
 8005b02:	2b2d      	cmp	r3, #45	; 0x2d
 8005b04:	d02c      	beq.n	8005b60 <__gethex+0x13c>
 8005b06:	f04f 0900 	mov.w	r9, #0
 8005b0a:	1c71      	adds	r1, r6, #1
 8005b0c:	7808      	ldrb	r0, [r1, #0]
 8005b0e:	f7ff ff74 	bl	80059fa <__hexdig_fun>
 8005b12:	1e43      	subs	r3, r0, #1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b18      	cmp	r3, #24
 8005b18:	d82a      	bhi.n	8005b70 <__gethex+0x14c>
 8005b1a:	f1a0 0210 	sub.w	r2, r0, #16
 8005b1e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005b22:	f7ff ff6a 	bl	80059fa <__hexdig_fun>
 8005b26:	1e43      	subs	r3, r0, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b18      	cmp	r3, #24
 8005b2c:	d91b      	bls.n	8005b66 <__gethex+0x142>
 8005b2e:	f1b9 0f00 	cmp.w	r9, #0
 8005b32:	d000      	beq.n	8005b36 <__gethex+0x112>
 8005b34:	4252      	negs	r2, r2
 8005b36:	4415      	add	r5, r2
 8005b38:	f8cb 1000 	str.w	r1, [fp]
 8005b3c:	b1d4      	cbz	r4, 8005b74 <__gethex+0x150>
 8005b3e:	9b01      	ldr	r3, [sp, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf14      	ite	ne
 8005b44:	2700      	movne	r7, #0
 8005b46:	2706      	moveq	r7, #6
 8005b48:	4638      	mov	r0, r7
 8005b4a:	b00b      	add	sp, #44	; 0x2c
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b50:	463e      	mov	r6, r7
 8005b52:	4625      	mov	r5, r4
 8005b54:	2401      	movs	r4, #1
 8005b56:	e7cc      	b.n	8005af2 <__gethex+0xce>
 8005b58:	f04f 0900 	mov.w	r9, #0
 8005b5c:	1cb1      	adds	r1, r6, #2
 8005b5e:	e7d5      	b.n	8005b0c <__gethex+0xe8>
 8005b60:	f04f 0901 	mov.w	r9, #1
 8005b64:	e7fa      	b.n	8005b5c <__gethex+0x138>
 8005b66:	230a      	movs	r3, #10
 8005b68:	fb03 0202 	mla	r2, r3, r2, r0
 8005b6c:	3a10      	subs	r2, #16
 8005b6e:	e7d6      	b.n	8005b1e <__gethex+0xfa>
 8005b70:	4631      	mov	r1, r6
 8005b72:	e7e1      	b.n	8005b38 <__gethex+0x114>
 8005b74:	4621      	mov	r1, r4
 8005b76:	1bf3      	subs	r3, r6, r7
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	2b07      	cmp	r3, #7
 8005b7c:	dc0a      	bgt.n	8005b94 <__gethex+0x170>
 8005b7e:	9802      	ldr	r0, [sp, #8]
 8005b80:	f000 fa6e 	bl	8006060 <_Balloc>
 8005b84:	4604      	mov	r4, r0
 8005b86:	b940      	cbnz	r0, 8005b9a <__gethex+0x176>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	21de      	movs	r1, #222	; 0xde
 8005b8c:	4b5b      	ldr	r3, [pc, #364]	; (8005cfc <__gethex+0x2d8>)
 8005b8e:	485c      	ldr	r0, [pc, #368]	; (8005d00 <__gethex+0x2dc>)
 8005b90:	f000 fffe 	bl	8006b90 <__assert_func>
 8005b94:	3101      	adds	r1, #1
 8005b96:	105b      	asrs	r3, r3, #1
 8005b98:	e7ef      	b.n	8005b7a <__gethex+0x156>
 8005b9a:	f04f 0b00 	mov.w	fp, #0
 8005b9e:	f100 0914 	add.w	r9, r0, #20
 8005ba2:	f1ca 0301 	rsb	r3, sl, #1
 8005ba6:	f8cd 9010 	str.w	r9, [sp, #16]
 8005baa:	f8cd b004 	str.w	fp, [sp, #4]
 8005bae:	9308      	str	r3, [sp, #32]
 8005bb0:	42b7      	cmp	r7, r6
 8005bb2:	d33f      	bcc.n	8005c34 <__gethex+0x210>
 8005bb4:	9f04      	ldr	r7, [sp, #16]
 8005bb6:	9b01      	ldr	r3, [sp, #4]
 8005bb8:	f847 3b04 	str.w	r3, [r7], #4
 8005bbc:	eba7 0709 	sub.w	r7, r7, r9
 8005bc0:	10bf      	asrs	r7, r7, #2
 8005bc2:	6127      	str	r7, [r4, #16]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fb3d 	bl	8006244 <__hi0bits>
 8005bca:	017f      	lsls	r7, r7, #5
 8005bcc:	f8d8 6000 	ldr.w	r6, [r8]
 8005bd0:	1a3f      	subs	r7, r7, r0
 8005bd2:	42b7      	cmp	r7, r6
 8005bd4:	dd62      	ble.n	8005c9c <__gethex+0x278>
 8005bd6:	1bbf      	subs	r7, r7, r6
 8005bd8:	4639      	mov	r1, r7
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f000 fed7 	bl	800698e <__any_on>
 8005be0:	4682      	mov	sl, r0
 8005be2:	b1a8      	cbz	r0, 8005c10 <__gethex+0x1ec>
 8005be4:	f04f 0a01 	mov.w	sl, #1
 8005be8:	1e7b      	subs	r3, r7, #1
 8005bea:	1159      	asrs	r1, r3, #5
 8005bec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005bf0:	f003 021f 	and.w	r2, r3, #31
 8005bf4:	fa0a f202 	lsl.w	r2, sl, r2
 8005bf8:	420a      	tst	r2, r1
 8005bfa:	d009      	beq.n	8005c10 <__gethex+0x1ec>
 8005bfc:	4553      	cmp	r3, sl
 8005bfe:	dd05      	ble.n	8005c0c <__gethex+0x1e8>
 8005c00:	4620      	mov	r0, r4
 8005c02:	1eb9      	subs	r1, r7, #2
 8005c04:	f000 fec3 	bl	800698e <__any_on>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d144      	bne.n	8005c96 <__gethex+0x272>
 8005c0c:	f04f 0a02 	mov.w	sl, #2
 8005c10:	4639      	mov	r1, r7
 8005c12:	4620      	mov	r0, r4
 8005c14:	f7ff fe9e 	bl	8005954 <rshift>
 8005c18:	443d      	add	r5, r7
 8005c1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c1e:	42ab      	cmp	r3, r5
 8005c20:	da4a      	bge.n	8005cb8 <__gethex+0x294>
 8005c22:	4621      	mov	r1, r4
 8005c24:	9802      	ldr	r0, [sp, #8]
 8005c26:	f000 fa5b 	bl	80060e0 <_Bfree>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c2e:	27a3      	movs	r7, #163	; 0xa3
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	e789      	b.n	8005b48 <__gethex+0x124>
 8005c34:	1e73      	subs	r3, r6, #1
 8005c36:	9a06      	ldr	r2, [sp, #24]
 8005c38:	9307      	str	r3, [sp, #28]
 8005c3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d019      	beq.n	8005c76 <__gethex+0x252>
 8005c42:	f1bb 0f20 	cmp.w	fp, #32
 8005c46:	d107      	bne.n	8005c58 <__gethex+0x234>
 8005c48:	9b04      	ldr	r3, [sp, #16]
 8005c4a:	9a01      	ldr	r2, [sp, #4]
 8005c4c:	f843 2b04 	str.w	r2, [r3], #4
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	2300      	movs	r3, #0
 8005c54:	469b      	mov	fp, r3
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005c5c:	f7ff fecd 	bl	80059fa <__hexdig_fun>
 8005c60:	9b01      	ldr	r3, [sp, #4]
 8005c62:	f000 000f 	and.w	r0, r0, #15
 8005c66:	fa00 f00b 	lsl.w	r0, r0, fp
 8005c6a:	4303      	orrs	r3, r0
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	f10b 0b04 	add.w	fp, fp, #4
 8005c72:	9b07      	ldr	r3, [sp, #28]
 8005c74:	e00d      	b.n	8005c92 <__gethex+0x26e>
 8005c76:	9a08      	ldr	r2, [sp, #32]
 8005c78:	1e73      	subs	r3, r6, #1
 8005c7a:	4413      	add	r3, r2
 8005c7c:	42bb      	cmp	r3, r7
 8005c7e:	d3e0      	bcc.n	8005c42 <__gethex+0x21e>
 8005c80:	4618      	mov	r0, r3
 8005c82:	4652      	mov	r2, sl
 8005c84:	9903      	ldr	r1, [sp, #12]
 8005c86:	9309      	str	r3, [sp, #36]	; 0x24
 8005c88:	f000 ff60 	bl	8006b4c <strncmp>
 8005c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	d1d7      	bne.n	8005c42 <__gethex+0x21e>
 8005c92:	461e      	mov	r6, r3
 8005c94:	e78c      	b.n	8005bb0 <__gethex+0x18c>
 8005c96:	f04f 0a03 	mov.w	sl, #3
 8005c9a:	e7b9      	b.n	8005c10 <__gethex+0x1ec>
 8005c9c:	da09      	bge.n	8005cb2 <__gethex+0x28e>
 8005c9e:	1bf7      	subs	r7, r6, r7
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	463a      	mov	r2, r7
 8005ca4:	9802      	ldr	r0, [sp, #8]
 8005ca6:	f000 fc33 	bl	8006510 <__lshift>
 8005caa:	4604      	mov	r4, r0
 8005cac:	1bed      	subs	r5, r5, r7
 8005cae:	f100 0914 	add.w	r9, r0, #20
 8005cb2:	f04f 0a00 	mov.w	sl, #0
 8005cb6:	e7b0      	b.n	8005c1a <__gethex+0x1f6>
 8005cb8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005cbc:	42a8      	cmp	r0, r5
 8005cbe:	dd72      	ble.n	8005da6 <__gethex+0x382>
 8005cc0:	1b45      	subs	r5, r0, r5
 8005cc2:	42ae      	cmp	r6, r5
 8005cc4:	dc35      	bgt.n	8005d32 <__gethex+0x30e>
 8005cc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d029      	beq.n	8005d22 <__gethex+0x2fe>
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d02b      	beq.n	8005d2a <__gethex+0x306>
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d11c      	bne.n	8005d10 <__gethex+0x2ec>
 8005cd6:	42ae      	cmp	r6, r5
 8005cd8:	d11a      	bne.n	8005d10 <__gethex+0x2ec>
 8005cda:	2e01      	cmp	r6, #1
 8005cdc:	d112      	bne.n	8005d04 <__gethex+0x2e0>
 8005cde:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005ce2:	9a05      	ldr	r2, [sp, #20]
 8005ce4:	2762      	movs	r7, #98	; 0x62
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	2301      	movs	r3, #1
 8005cea:	6123      	str	r3, [r4, #16]
 8005cec:	f8c9 3000 	str.w	r3, [r9]
 8005cf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cf2:	601c      	str	r4, [r3, #0]
 8005cf4:	e728      	b.n	8005b48 <__gethex+0x124>
 8005cf6:	bf00      	nop
 8005cf8:	08007d48 	.word	0x08007d48
 8005cfc:	08007cd1 	.word	0x08007cd1
 8005d00:	08007ce2 	.word	0x08007ce2
 8005d04:	4620      	mov	r0, r4
 8005d06:	1e71      	subs	r1, r6, #1
 8005d08:	f000 fe41 	bl	800698e <__any_on>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d1e6      	bne.n	8005cde <__gethex+0x2ba>
 8005d10:	4621      	mov	r1, r4
 8005d12:	9802      	ldr	r0, [sp, #8]
 8005d14:	f000 f9e4 	bl	80060e0 <_Bfree>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005d1c:	2750      	movs	r7, #80	; 0x50
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e712      	b.n	8005b48 <__gethex+0x124>
 8005d22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1f3      	bne.n	8005d10 <__gethex+0x2ec>
 8005d28:	e7d9      	b.n	8005cde <__gethex+0x2ba>
 8005d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1d6      	bne.n	8005cde <__gethex+0x2ba>
 8005d30:	e7ee      	b.n	8005d10 <__gethex+0x2ec>
 8005d32:	1e6f      	subs	r7, r5, #1
 8005d34:	f1ba 0f00 	cmp.w	sl, #0
 8005d38:	d132      	bne.n	8005da0 <__gethex+0x37c>
 8005d3a:	b127      	cbz	r7, 8005d46 <__gethex+0x322>
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 fe25 	bl	800698e <__any_on>
 8005d44:	4682      	mov	sl, r0
 8005d46:	2101      	movs	r1, #1
 8005d48:	117b      	asrs	r3, r7, #5
 8005d4a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005d4e:	f007 071f 	and.w	r7, r7, #31
 8005d52:	fa01 f707 	lsl.w	r7, r1, r7
 8005d56:	421f      	tst	r7, r3
 8005d58:	f04f 0702 	mov.w	r7, #2
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	4620      	mov	r0, r4
 8005d60:	bf18      	it	ne
 8005d62:	f04a 0a02 	orrne.w	sl, sl, #2
 8005d66:	1b76      	subs	r6, r6, r5
 8005d68:	f7ff fdf4 	bl	8005954 <rshift>
 8005d6c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005d70:	f1ba 0f00 	cmp.w	sl, #0
 8005d74:	d048      	beq.n	8005e08 <__gethex+0x3e4>
 8005d76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d015      	beq.n	8005daa <__gethex+0x386>
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d017      	beq.n	8005db2 <__gethex+0x38e>
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d109      	bne.n	8005d9a <__gethex+0x376>
 8005d86:	f01a 0f02 	tst.w	sl, #2
 8005d8a:	d006      	beq.n	8005d9a <__gethex+0x376>
 8005d8c:	f8d9 0000 	ldr.w	r0, [r9]
 8005d90:	ea4a 0a00 	orr.w	sl, sl, r0
 8005d94:	f01a 0f01 	tst.w	sl, #1
 8005d98:	d10e      	bne.n	8005db8 <__gethex+0x394>
 8005d9a:	f047 0710 	orr.w	r7, r7, #16
 8005d9e:	e033      	b.n	8005e08 <__gethex+0x3e4>
 8005da0:	f04f 0a01 	mov.w	sl, #1
 8005da4:	e7cf      	b.n	8005d46 <__gethex+0x322>
 8005da6:	2701      	movs	r7, #1
 8005da8:	e7e2      	b.n	8005d70 <__gethex+0x34c>
 8005daa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dac:	f1c3 0301 	rsb	r3, r3, #1
 8005db0:	9315      	str	r3, [sp, #84]	; 0x54
 8005db2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f0      	beq.n	8005d9a <__gethex+0x376>
 8005db8:	f04f 0c00 	mov.w	ip, #0
 8005dbc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005dc0:	f104 0314 	add.w	r3, r4, #20
 8005dc4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005dc8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dd2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005dd6:	d01c      	beq.n	8005e12 <__gethex+0x3ee>
 8005dd8:	3201      	adds	r2, #1
 8005dda:	6002      	str	r2, [r0, #0]
 8005ddc:	2f02      	cmp	r7, #2
 8005dde:	f104 0314 	add.w	r3, r4, #20
 8005de2:	d13d      	bne.n	8005e60 <__gethex+0x43c>
 8005de4:	f8d8 2000 	ldr.w	r2, [r8]
 8005de8:	3a01      	subs	r2, #1
 8005dea:	42b2      	cmp	r2, r6
 8005dec:	d10a      	bne.n	8005e04 <__gethex+0x3e0>
 8005dee:	2201      	movs	r2, #1
 8005df0:	1171      	asrs	r1, r6, #5
 8005df2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005df6:	f006 061f 	and.w	r6, r6, #31
 8005dfa:	fa02 f606 	lsl.w	r6, r2, r6
 8005dfe:	421e      	tst	r6, r3
 8005e00:	bf18      	it	ne
 8005e02:	4617      	movne	r7, r2
 8005e04:	f047 0720 	orr.w	r7, r7, #32
 8005e08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e0a:	601c      	str	r4, [r3, #0]
 8005e0c:	9b05      	ldr	r3, [sp, #20]
 8005e0e:	601d      	str	r5, [r3, #0]
 8005e10:	e69a      	b.n	8005b48 <__gethex+0x124>
 8005e12:	4299      	cmp	r1, r3
 8005e14:	f843 cc04 	str.w	ip, [r3, #-4]
 8005e18:	d8d8      	bhi.n	8005dcc <__gethex+0x3a8>
 8005e1a:	68a3      	ldr	r3, [r4, #8]
 8005e1c:	459b      	cmp	fp, r3
 8005e1e:	db17      	blt.n	8005e50 <__gethex+0x42c>
 8005e20:	6861      	ldr	r1, [r4, #4]
 8005e22:	9802      	ldr	r0, [sp, #8]
 8005e24:	3101      	adds	r1, #1
 8005e26:	f000 f91b 	bl	8006060 <_Balloc>
 8005e2a:	4681      	mov	r9, r0
 8005e2c:	b918      	cbnz	r0, 8005e36 <__gethex+0x412>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	2184      	movs	r1, #132	; 0x84
 8005e32:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <__gethex+0x474>)
 8005e34:	e6ab      	b.n	8005b8e <__gethex+0x16a>
 8005e36:	6922      	ldr	r2, [r4, #16]
 8005e38:	f104 010c 	add.w	r1, r4, #12
 8005e3c:	3202      	adds	r2, #2
 8005e3e:	0092      	lsls	r2, r2, #2
 8005e40:	300c      	adds	r0, #12
 8005e42:	f000 f8ff 	bl	8006044 <memcpy>
 8005e46:	4621      	mov	r1, r4
 8005e48:	9802      	ldr	r0, [sp, #8]
 8005e4a:	f000 f949 	bl	80060e0 <_Bfree>
 8005e4e:	464c      	mov	r4, r9
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	6122      	str	r2, [r4, #16]
 8005e56:	2201      	movs	r2, #1
 8005e58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e5c:	615a      	str	r2, [r3, #20]
 8005e5e:	e7bd      	b.n	8005ddc <__gethex+0x3b8>
 8005e60:	6922      	ldr	r2, [r4, #16]
 8005e62:	455a      	cmp	r2, fp
 8005e64:	dd0b      	ble.n	8005e7e <__gethex+0x45a>
 8005e66:	2101      	movs	r1, #1
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f7ff fd73 	bl	8005954 <rshift>
 8005e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e72:	3501      	adds	r5, #1
 8005e74:	42ab      	cmp	r3, r5
 8005e76:	f6ff aed4 	blt.w	8005c22 <__gethex+0x1fe>
 8005e7a:	2701      	movs	r7, #1
 8005e7c:	e7c2      	b.n	8005e04 <__gethex+0x3e0>
 8005e7e:	f016 061f 	ands.w	r6, r6, #31
 8005e82:	d0fa      	beq.n	8005e7a <__gethex+0x456>
 8005e84:	4453      	add	r3, sl
 8005e86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005e8a:	f000 f9db 	bl	8006244 <__hi0bits>
 8005e8e:	f1c6 0620 	rsb	r6, r6, #32
 8005e92:	42b0      	cmp	r0, r6
 8005e94:	dbe7      	blt.n	8005e66 <__gethex+0x442>
 8005e96:	e7f0      	b.n	8005e7a <__gethex+0x456>
 8005e98:	08007cd1 	.word	0x08007cd1

08005e9c <L_shift>:
 8005e9c:	f1c2 0208 	rsb	r2, r2, #8
 8005ea0:	0092      	lsls	r2, r2, #2
 8005ea2:	b570      	push	{r4, r5, r6, lr}
 8005ea4:	f1c2 0620 	rsb	r6, r2, #32
 8005ea8:	6843      	ldr	r3, [r0, #4]
 8005eaa:	6804      	ldr	r4, [r0, #0]
 8005eac:	fa03 f506 	lsl.w	r5, r3, r6
 8005eb0:	432c      	orrs	r4, r5
 8005eb2:	40d3      	lsrs	r3, r2
 8005eb4:	6004      	str	r4, [r0, #0]
 8005eb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8005eba:	4288      	cmp	r0, r1
 8005ebc:	d3f4      	bcc.n	8005ea8 <L_shift+0xc>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}

08005ec0 <__match>:
 8005ec0:	b530      	push	{r4, r5, lr}
 8005ec2:	6803      	ldr	r3, [r0, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eca:	b914      	cbnz	r4, 8005ed2 <__match+0x12>
 8005ecc:	6003      	str	r3, [r0, #0]
 8005ece:	2001      	movs	r0, #1
 8005ed0:	bd30      	pop	{r4, r5, pc}
 8005ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005eda:	2d19      	cmp	r5, #25
 8005edc:	bf98      	it	ls
 8005ede:	3220      	addls	r2, #32
 8005ee0:	42a2      	cmp	r2, r4
 8005ee2:	d0f0      	beq.n	8005ec6 <__match+0x6>
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	e7f3      	b.n	8005ed0 <__match+0x10>

08005ee8 <__hexnan>:
 8005ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eec:	2500      	movs	r5, #0
 8005eee:	680b      	ldr	r3, [r1, #0]
 8005ef0:	4682      	mov	sl, r0
 8005ef2:	115e      	asrs	r6, r3, #5
 8005ef4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005ef8:	f013 031f 	ands.w	r3, r3, #31
 8005efc:	bf18      	it	ne
 8005efe:	3604      	addne	r6, #4
 8005f00:	1f37      	subs	r7, r6, #4
 8005f02:	46b9      	mov	r9, r7
 8005f04:	463c      	mov	r4, r7
 8005f06:	46ab      	mov	fp, r5
 8005f08:	b087      	sub	sp, #28
 8005f0a:	4690      	mov	r8, r2
 8005f0c:	6802      	ldr	r2, [r0, #0]
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	f846 5c04 	str.w	r5, [r6, #-4]
 8005f14:	9502      	str	r5, [sp, #8]
 8005f16:	7851      	ldrb	r1, [r2, #1]
 8005f18:	1c53      	adds	r3, r2, #1
 8005f1a:	9303      	str	r3, [sp, #12]
 8005f1c:	b341      	cbz	r1, 8005f70 <__hexnan+0x88>
 8005f1e:	4608      	mov	r0, r1
 8005f20:	9205      	str	r2, [sp, #20]
 8005f22:	9104      	str	r1, [sp, #16]
 8005f24:	f7ff fd69 	bl	80059fa <__hexdig_fun>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d14f      	bne.n	8005fcc <__hexnan+0xe4>
 8005f2c:	9904      	ldr	r1, [sp, #16]
 8005f2e:	9a05      	ldr	r2, [sp, #20]
 8005f30:	2920      	cmp	r1, #32
 8005f32:	d818      	bhi.n	8005f66 <__hexnan+0x7e>
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	459b      	cmp	fp, r3
 8005f38:	dd13      	ble.n	8005f62 <__hexnan+0x7a>
 8005f3a:	454c      	cmp	r4, r9
 8005f3c:	d206      	bcs.n	8005f4c <__hexnan+0x64>
 8005f3e:	2d07      	cmp	r5, #7
 8005f40:	dc04      	bgt.n	8005f4c <__hexnan+0x64>
 8005f42:	462a      	mov	r2, r5
 8005f44:	4649      	mov	r1, r9
 8005f46:	4620      	mov	r0, r4
 8005f48:	f7ff ffa8 	bl	8005e9c <L_shift>
 8005f4c:	4544      	cmp	r4, r8
 8005f4e:	d950      	bls.n	8005ff2 <__hexnan+0x10a>
 8005f50:	2300      	movs	r3, #0
 8005f52:	f1a4 0904 	sub.w	r9, r4, #4
 8005f56:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f5a:	461d      	mov	r5, r3
 8005f5c:	464c      	mov	r4, r9
 8005f5e:	f8cd b008 	str.w	fp, [sp, #8]
 8005f62:	9a03      	ldr	r2, [sp, #12]
 8005f64:	e7d7      	b.n	8005f16 <__hexnan+0x2e>
 8005f66:	2929      	cmp	r1, #41	; 0x29
 8005f68:	d156      	bne.n	8006018 <__hexnan+0x130>
 8005f6a:	3202      	adds	r2, #2
 8005f6c:	f8ca 2000 	str.w	r2, [sl]
 8005f70:	f1bb 0f00 	cmp.w	fp, #0
 8005f74:	d050      	beq.n	8006018 <__hexnan+0x130>
 8005f76:	454c      	cmp	r4, r9
 8005f78:	d206      	bcs.n	8005f88 <__hexnan+0xa0>
 8005f7a:	2d07      	cmp	r5, #7
 8005f7c:	dc04      	bgt.n	8005f88 <__hexnan+0xa0>
 8005f7e:	462a      	mov	r2, r5
 8005f80:	4649      	mov	r1, r9
 8005f82:	4620      	mov	r0, r4
 8005f84:	f7ff ff8a 	bl	8005e9c <L_shift>
 8005f88:	4544      	cmp	r4, r8
 8005f8a:	d934      	bls.n	8005ff6 <__hexnan+0x10e>
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	f1a8 0204 	sub.w	r2, r8, #4
 8005f92:	f853 1b04 	ldr.w	r1, [r3], #4
 8005f96:	429f      	cmp	r7, r3
 8005f98:	f842 1f04 	str.w	r1, [r2, #4]!
 8005f9c:	d2f9      	bcs.n	8005f92 <__hexnan+0xaa>
 8005f9e:	1b3b      	subs	r3, r7, r4
 8005fa0:	f023 0303 	bic.w	r3, r3, #3
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	3401      	adds	r4, #1
 8005fa8:	3e03      	subs	r6, #3
 8005faa:	42b4      	cmp	r4, r6
 8005fac:	bf88      	it	hi
 8005fae:	2304      	movhi	r3, #4
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4443      	add	r3, r8
 8005fb4:	f843 2b04 	str.w	r2, [r3], #4
 8005fb8:	429f      	cmp	r7, r3
 8005fba:	d2fb      	bcs.n	8005fb4 <__hexnan+0xcc>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	b91b      	cbnz	r3, 8005fc8 <__hexnan+0xe0>
 8005fc0:	4547      	cmp	r7, r8
 8005fc2:	d127      	bne.n	8006014 <__hexnan+0x12c>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	603b      	str	r3, [r7, #0]
 8005fc8:	2005      	movs	r0, #5
 8005fca:	e026      	b.n	800601a <__hexnan+0x132>
 8005fcc:	3501      	adds	r5, #1
 8005fce:	2d08      	cmp	r5, #8
 8005fd0:	f10b 0b01 	add.w	fp, fp, #1
 8005fd4:	dd06      	ble.n	8005fe4 <__hexnan+0xfc>
 8005fd6:	4544      	cmp	r4, r8
 8005fd8:	d9c3      	bls.n	8005f62 <__hexnan+0x7a>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2501      	movs	r5, #1
 8005fde:	f844 3c04 	str.w	r3, [r4, #-4]
 8005fe2:	3c04      	subs	r4, #4
 8005fe4:	6822      	ldr	r2, [r4, #0]
 8005fe6:	f000 000f 	and.w	r0, r0, #15
 8005fea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005fee:	6022      	str	r2, [r4, #0]
 8005ff0:	e7b7      	b.n	8005f62 <__hexnan+0x7a>
 8005ff2:	2508      	movs	r5, #8
 8005ff4:	e7b5      	b.n	8005f62 <__hexnan+0x7a>
 8005ff6:	9b01      	ldr	r3, [sp, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0df      	beq.n	8005fbc <__hexnan+0xd4>
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8006000:	f1c3 0320 	rsb	r3, r3, #32
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800600c:	401a      	ands	r2, r3
 800600e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006012:	e7d3      	b.n	8005fbc <__hexnan+0xd4>
 8006014:	3f04      	subs	r7, #4
 8006016:	e7d1      	b.n	8005fbc <__hexnan+0xd4>
 8006018:	2004      	movs	r0, #4
 800601a:	b007      	add	sp, #28
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006020 <__ascii_mbtowc>:
 8006020:	b082      	sub	sp, #8
 8006022:	b901      	cbnz	r1, 8006026 <__ascii_mbtowc+0x6>
 8006024:	a901      	add	r1, sp, #4
 8006026:	b142      	cbz	r2, 800603a <__ascii_mbtowc+0x1a>
 8006028:	b14b      	cbz	r3, 800603e <__ascii_mbtowc+0x1e>
 800602a:	7813      	ldrb	r3, [r2, #0]
 800602c:	600b      	str	r3, [r1, #0]
 800602e:	7812      	ldrb	r2, [r2, #0]
 8006030:	1e10      	subs	r0, r2, #0
 8006032:	bf18      	it	ne
 8006034:	2001      	movne	r0, #1
 8006036:	b002      	add	sp, #8
 8006038:	4770      	bx	lr
 800603a:	4610      	mov	r0, r2
 800603c:	e7fb      	b.n	8006036 <__ascii_mbtowc+0x16>
 800603e:	f06f 0001 	mvn.w	r0, #1
 8006042:	e7f8      	b.n	8006036 <__ascii_mbtowc+0x16>

08006044 <memcpy>:
 8006044:	440a      	add	r2, r1
 8006046:	4291      	cmp	r1, r2
 8006048:	f100 33ff 	add.w	r3, r0, #4294967295
 800604c:	d100      	bne.n	8006050 <memcpy+0xc>
 800604e:	4770      	bx	lr
 8006050:	b510      	push	{r4, lr}
 8006052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006056:	4291      	cmp	r1, r2
 8006058:	f803 4f01 	strb.w	r4, [r3, #1]!
 800605c:	d1f9      	bne.n	8006052 <memcpy+0xe>
 800605e:	bd10      	pop	{r4, pc}

08006060 <_Balloc>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006064:	4604      	mov	r4, r0
 8006066:	460d      	mov	r5, r1
 8006068:	b976      	cbnz	r6, 8006088 <_Balloc+0x28>
 800606a:	2010      	movs	r0, #16
 800606c:	f000 fdc0 	bl	8006bf0 <malloc>
 8006070:	4602      	mov	r2, r0
 8006072:	6260      	str	r0, [r4, #36]	; 0x24
 8006074:	b920      	cbnz	r0, 8006080 <_Balloc+0x20>
 8006076:	2166      	movs	r1, #102	; 0x66
 8006078:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <_Balloc+0x78>)
 800607a:	4818      	ldr	r0, [pc, #96]	; (80060dc <_Balloc+0x7c>)
 800607c:	f000 fd88 	bl	8006b90 <__assert_func>
 8006080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006084:	6006      	str	r6, [r0, #0]
 8006086:	60c6      	str	r6, [r0, #12]
 8006088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800608a:	68f3      	ldr	r3, [r6, #12]
 800608c:	b183      	cbz	r3, 80060b0 <_Balloc+0x50>
 800608e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006096:	b9b8      	cbnz	r0, 80060c8 <_Balloc+0x68>
 8006098:	2101      	movs	r1, #1
 800609a:	fa01 f605 	lsl.w	r6, r1, r5
 800609e:	1d72      	adds	r2, r6, #5
 80060a0:	4620      	mov	r0, r4
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	f000 fc94 	bl	80069d0 <_calloc_r>
 80060a8:	b160      	cbz	r0, 80060c4 <_Balloc+0x64>
 80060aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060ae:	e00e      	b.n	80060ce <_Balloc+0x6e>
 80060b0:	2221      	movs	r2, #33	; 0x21
 80060b2:	2104      	movs	r1, #4
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 fc8b 	bl	80069d0 <_calloc_r>
 80060ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060bc:	60f0      	str	r0, [r6, #12]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e4      	bne.n	800608e <_Balloc+0x2e>
 80060c4:	2000      	movs	r0, #0
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	6802      	ldr	r2, [r0, #0]
 80060ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060ce:	2300      	movs	r3, #0
 80060d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060d4:	e7f7      	b.n	80060c6 <_Balloc+0x66>
 80060d6:	bf00      	nop
 80060d8:	08007d5c 	.word	0x08007d5c
 80060dc:	08007d73 	.word	0x08007d73

080060e0 <_Bfree>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060e4:	4605      	mov	r5, r0
 80060e6:	460c      	mov	r4, r1
 80060e8:	b976      	cbnz	r6, 8006108 <_Bfree+0x28>
 80060ea:	2010      	movs	r0, #16
 80060ec:	f000 fd80 	bl	8006bf0 <malloc>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6268      	str	r0, [r5, #36]	; 0x24
 80060f4:	b920      	cbnz	r0, 8006100 <_Bfree+0x20>
 80060f6:	218a      	movs	r1, #138	; 0x8a
 80060f8:	4b08      	ldr	r3, [pc, #32]	; (800611c <_Bfree+0x3c>)
 80060fa:	4809      	ldr	r0, [pc, #36]	; (8006120 <_Bfree+0x40>)
 80060fc:	f000 fd48 	bl	8006b90 <__assert_func>
 8006100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006104:	6006      	str	r6, [r0, #0]
 8006106:	60c6      	str	r6, [r0, #12]
 8006108:	b13c      	cbz	r4, 800611a <_Bfree+0x3a>
 800610a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800610c:	6862      	ldr	r2, [r4, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006114:	6021      	str	r1, [r4, #0]
 8006116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800611a:	bd70      	pop	{r4, r5, r6, pc}
 800611c:	08007d5c 	.word	0x08007d5c
 8006120:	08007d73 	.word	0x08007d73

08006124 <__multadd>:
 8006124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006128:	4607      	mov	r7, r0
 800612a:	460c      	mov	r4, r1
 800612c:	461e      	mov	r6, r3
 800612e:	2000      	movs	r0, #0
 8006130:	690d      	ldr	r5, [r1, #16]
 8006132:	f101 0c14 	add.w	ip, r1, #20
 8006136:	f8dc 3000 	ldr.w	r3, [ip]
 800613a:	3001      	adds	r0, #1
 800613c:	b299      	uxth	r1, r3
 800613e:	fb02 6101 	mla	r1, r2, r1, r6
 8006142:	0c1e      	lsrs	r6, r3, #16
 8006144:	0c0b      	lsrs	r3, r1, #16
 8006146:	fb02 3306 	mla	r3, r2, r6, r3
 800614a:	b289      	uxth	r1, r1
 800614c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006150:	4285      	cmp	r5, r0
 8006152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006156:	f84c 1b04 	str.w	r1, [ip], #4
 800615a:	dcec      	bgt.n	8006136 <__multadd+0x12>
 800615c:	b30e      	cbz	r6, 80061a2 <__multadd+0x7e>
 800615e:	68a3      	ldr	r3, [r4, #8]
 8006160:	42ab      	cmp	r3, r5
 8006162:	dc19      	bgt.n	8006198 <__multadd+0x74>
 8006164:	6861      	ldr	r1, [r4, #4]
 8006166:	4638      	mov	r0, r7
 8006168:	3101      	adds	r1, #1
 800616a:	f7ff ff79 	bl	8006060 <_Balloc>
 800616e:	4680      	mov	r8, r0
 8006170:	b928      	cbnz	r0, 800617e <__multadd+0x5a>
 8006172:	4602      	mov	r2, r0
 8006174:	21b5      	movs	r1, #181	; 0xb5
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <__multadd+0x84>)
 8006178:	480c      	ldr	r0, [pc, #48]	; (80061ac <__multadd+0x88>)
 800617a:	f000 fd09 	bl	8006b90 <__assert_func>
 800617e:	6922      	ldr	r2, [r4, #16]
 8006180:	f104 010c 	add.w	r1, r4, #12
 8006184:	3202      	adds	r2, #2
 8006186:	0092      	lsls	r2, r2, #2
 8006188:	300c      	adds	r0, #12
 800618a:	f7ff ff5b 	bl	8006044 <memcpy>
 800618e:	4621      	mov	r1, r4
 8006190:	4638      	mov	r0, r7
 8006192:	f7ff ffa5 	bl	80060e0 <_Bfree>
 8006196:	4644      	mov	r4, r8
 8006198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800619c:	3501      	adds	r5, #1
 800619e:	615e      	str	r6, [r3, #20]
 80061a0:	6125      	str	r5, [r4, #16]
 80061a2:	4620      	mov	r0, r4
 80061a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061a8:	08007cd1 	.word	0x08007cd1
 80061ac:	08007d73 	.word	0x08007d73

080061b0 <__s2b>:
 80061b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b4:	4615      	mov	r5, r2
 80061b6:	2209      	movs	r2, #9
 80061b8:	461f      	mov	r7, r3
 80061ba:	3308      	adds	r3, #8
 80061bc:	460c      	mov	r4, r1
 80061be:	fb93 f3f2 	sdiv	r3, r3, r2
 80061c2:	4606      	mov	r6, r0
 80061c4:	2201      	movs	r2, #1
 80061c6:	2100      	movs	r1, #0
 80061c8:	429a      	cmp	r2, r3
 80061ca:	db09      	blt.n	80061e0 <__s2b+0x30>
 80061cc:	4630      	mov	r0, r6
 80061ce:	f7ff ff47 	bl	8006060 <_Balloc>
 80061d2:	b940      	cbnz	r0, 80061e6 <__s2b+0x36>
 80061d4:	4602      	mov	r2, r0
 80061d6:	21ce      	movs	r1, #206	; 0xce
 80061d8:	4b18      	ldr	r3, [pc, #96]	; (800623c <__s2b+0x8c>)
 80061da:	4819      	ldr	r0, [pc, #100]	; (8006240 <__s2b+0x90>)
 80061dc:	f000 fcd8 	bl	8006b90 <__assert_func>
 80061e0:	0052      	lsls	r2, r2, #1
 80061e2:	3101      	adds	r1, #1
 80061e4:	e7f0      	b.n	80061c8 <__s2b+0x18>
 80061e6:	9b08      	ldr	r3, [sp, #32]
 80061e8:	2d09      	cmp	r5, #9
 80061ea:	6143      	str	r3, [r0, #20]
 80061ec:	f04f 0301 	mov.w	r3, #1
 80061f0:	6103      	str	r3, [r0, #16]
 80061f2:	dd16      	ble.n	8006222 <__s2b+0x72>
 80061f4:	f104 0909 	add.w	r9, r4, #9
 80061f8:	46c8      	mov	r8, r9
 80061fa:	442c      	add	r4, r5
 80061fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006200:	4601      	mov	r1, r0
 8006202:	220a      	movs	r2, #10
 8006204:	4630      	mov	r0, r6
 8006206:	3b30      	subs	r3, #48	; 0x30
 8006208:	f7ff ff8c 	bl	8006124 <__multadd>
 800620c:	45a0      	cmp	r8, r4
 800620e:	d1f5      	bne.n	80061fc <__s2b+0x4c>
 8006210:	f1a5 0408 	sub.w	r4, r5, #8
 8006214:	444c      	add	r4, r9
 8006216:	1b2d      	subs	r5, r5, r4
 8006218:	1963      	adds	r3, r4, r5
 800621a:	42bb      	cmp	r3, r7
 800621c:	db04      	blt.n	8006228 <__s2b+0x78>
 800621e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006222:	2509      	movs	r5, #9
 8006224:	340a      	adds	r4, #10
 8006226:	e7f6      	b.n	8006216 <__s2b+0x66>
 8006228:	f814 3b01 	ldrb.w	r3, [r4], #1
 800622c:	4601      	mov	r1, r0
 800622e:	220a      	movs	r2, #10
 8006230:	4630      	mov	r0, r6
 8006232:	3b30      	subs	r3, #48	; 0x30
 8006234:	f7ff ff76 	bl	8006124 <__multadd>
 8006238:	e7ee      	b.n	8006218 <__s2b+0x68>
 800623a:	bf00      	nop
 800623c:	08007cd1 	.word	0x08007cd1
 8006240:	08007d73 	.word	0x08007d73

08006244 <__hi0bits>:
 8006244:	0c02      	lsrs	r2, r0, #16
 8006246:	0412      	lsls	r2, r2, #16
 8006248:	4603      	mov	r3, r0
 800624a:	b9ca      	cbnz	r2, 8006280 <__hi0bits+0x3c>
 800624c:	0403      	lsls	r3, r0, #16
 800624e:	2010      	movs	r0, #16
 8006250:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006254:	bf04      	itt	eq
 8006256:	021b      	lsleq	r3, r3, #8
 8006258:	3008      	addeq	r0, #8
 800625a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800625e:	bf04      	itt	eq
 8006260:	011b      	lsleq	r3, r3, #4
 8006262:	3004      	addeq	r0, #4
 8006264:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006268:	bf04      	itt	eq
 800626a:	009b      	lsleq	r3, r3, #2
 800626c:	3002      	addeq	r0, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	db05      	blt.n	800627e <__hi0bits+0x3a>
 8006272:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006276:	f100 0001 	add.w	r0, r0, #1
 800627a:	bf08      	it	eq
 800627c:	2020      	moveq	r0, #32
 800627e:	4770      	bx	lr
 8006280:	2000      	movs	r0, #0
 8006282:	e7e5      	b.n	8006250 <__hi0bits+0xc>

08006284 <__lo0bits>:
 8006284:	6803      	ldr	r3, [r0, #0]
 8006286:	4602      	mov	r2, r0
 8006288:	f013 0007 	ands.w	r0, r3, #7
 800628c:	d00b      	beq.n	80062a6 <__lo0bits+0x22>
 800628e:	07d9      	lsls	r1, r3, #31
 8006290:	d421      	bmi.n	80062d6 <__lo0bits+0x52>
 8006292:	0798      	lsls	r0, r3, #30
 8006294:	bf49      	itett	mi
 8006296:	085b      	lsrmi	r3, r3, #1
 8006298:	089b      	lsrpl	r3, r3, #2
 800629a:	2001      	movmi	r0, #1
 800629c:	6013      	strmi	r3, [r2, #0]
 800629e:	bf5c      	itt	pl
 80062a0:	2002      	movpl	r0, #2
 80062a2:	6013      	strpl	r3, [r2, #0]
 80062a4:	4770      	bx	lr
 80062a6:	b299      	uxth	r1, r3
 80062a8:	b909      	cbnz	r1, 80062ae <__lo0bits+0x2a>
 80062aa:	2010      	movs	r0, #16
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	b2d9      	uxtb	r1, r3
 80062b0:	b909      	cbnz	r1, 80062b6 <__lo0bits+0x32>
 80062b2:	3008      	adds	r0, #8
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	0719      	lsls	r1, r3, #28
 80062b8:	bf04      	itt	eq
 80062ba:	091b      	lsreq	r3, r3, #4
 80062bc:	3004      	addeq	r0, #4
 80062be:	0799      	lsls	r1, r3, #30
 80062c0:	bf04      	itt	eq
 80062c2:	089b      	lsreq	r3, r3, #2
 80062c4:	3002      	addeq	r0, #2
 80062c6:	07d9      	lsls	r1, r3, #31
 80062c8:	d403      	bmi.n	80062d2 <__lo0bits+0x4e>
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	f100 0001 	add.w	r0, r0, #1
 80062d0:	d003      	beq.n	80062da <__lo0bits+0x56>
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	4770      	bx	lr
 80062d6:	2000      	movs	r0, #0
 80062d8:	4770      	bx	lr
 80062da:	2020      	movs	r0, #32
 80062dc:	4770      	bx	lr
	...

080062e0 <__i2b>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	460c      	mov	r4, r1
 80062e4:	2101      	movs	r1, #1
 80062e6:	f7ff febb 	bl	8006060 <_Balloc>
 80062ea:	4602      	mov	r2, r0
 80062ec:	b928      	cbnz	r0, 80062fa <__i2b+0x1a>
 80062ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062f2:	4b04      	ldr	r3, [pc, #16]	; (8006304 <__i2b+0x24>)
 80062f4:	4804      	ldr	r0, [pc, #16]	; (8006308 <__i2b+0x28>)
 80062f6:	f000 fc4b 	bl	8006b90 <__assert_func>
 80062fa:	2301      	movs	r3, #1
 80062fc:	6144      	str	r4, [r0, #20]
 80062fe:	6103      	str	r3, [r0, #16]
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	08007cd1 	.word	0x08007cd1
 8006308:	08007d73 	.word	0x08007d73

0800630c <__multiply>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	4691      	mov	r9, r2
 8006312:	690a      	ldr	r2, [r1, #16]
 8006314:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006318:	460c      	mov	r4, r1
 800631a:	429a      	cmp	r2, r3
 800631c:	bfbe      	ittt	lt
 800631e:	460b      	movlt	r3, r1
 8006320:	464c      	movlt	r4, r9
 8006322:	4699      	movlt	r9, r3
 8006324:	6927      	ldr	r7, [r4, #16]
 8006326:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800632a:	68a3      	ldr	r3, [r4, #8]
 800632c:	6861      	ldr	r1, [r4, #4]
 800632e:	eb07 060a 	add.w	r6, r7, sl
 8006332:	42b3      	cmp	r3, r6
 8006334:	b085      	sub	sp, #20
 8006336:	bfb8      	it	lt
 8006338:	3101      	addlt	r1, #1
 800633a:	f7ff fe91 	bl	8006060 <_Balloc>
 800633e:	b930      	cbnz	r0, 800634e <__multiply+0x42>
 8006340:	4602      	mov	r2, r0
 8006342:	f240 115d 	movw	r1, #349	; 0x15d
 8006346:	4b43      	ldr	r3, [pc, #268]	; (8006454 <__multiply+0x148>)
 8006348:	4843      	ldr	r0, [pc, #268]	; (8006458 <__multiply+0x14c>)
 800634a:	f000 fc21 	bl	8006b90 <__assert_func>
 800634e:	f100 0514 	add.w	r5, r0, #20
 8006352:	462b      	mov	r3, r5
 8006354:	2200      	movs	r2, #0
 8006356:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800635a:	4543      	cmp	r3, r8
 800635c:	d321      	bcc.n	80063a2 <__multiply+0x96>
 800635e:	f104 0314 	add.w	r3, r4, #20
 8006362:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006366:	f109 0314 	add.w	r3, r9, #20
 800636a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800636e:	9202      	str	r2, [sp, #8]
 8006370:	1b3a      	subs	r2, r7, r4
 8006372:	3a15      	subs	r2, #21
 8006374:	f022 0203 	bic.w	r2, r2, #3
 8006378:	3204      	adds	r2, #4
 800637a:	f104 0115 	add.w	r1, r4, #21
 800637e:	428f      	cmp	r7, r1
 8006380:	bf38      	it	cc
 8006382:	2204      	movcc	r2, #4
 8006384:	9201      	str	r2, [sp, #4]
 8006386:	9a02      	ldr	r2, [sp, #8]
 8006388:	9303      	str	r3, [sp, #12]
 800638a:	429a      	cmp	r2, r3
 800638c:	d80c      	bhi.n	80063a8 <__multiply+0x9c>
 800638e:	2e00      	cmp	r6, #0
 8006390:	dd03      	ble.n	800639a <__multiply+0x8e>
 8006392:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006396:	2b00      	cmp	r3, #0
 8006398:	d059      	beq.n	800644e <__multiply+0x142>
 800639a:	6106      	str	r6, [r0, #16]
 800639c:	b005      	add	sp, #20
 800639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a2:	f843 2b04 	str.w	r2, [r3], #4
 80063a6:	e7d8      	b.n	800635a <__multiply+0x4e>
 80063a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80063ac:	f1ba 0f00 	cmp.w	sl, #0
 80063b0:	d023      	beq.n	80063fa <__multiply+0xee>
 80063b2:	46a9      	mov	r9, r5
 80063b4:	f04f 0c00 	mov.w	ip, #0
 80063b8:	f104 0e14 	add.w	lr, r4, #20
 80063bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063c0:	f8d9 1000 	ldr.w	r1, [r9]
 80063c4:	fa1f fb82 	uxth.w	fp, r2
 80063c8:	b289      	uxth	r1, r1
 80063ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80063ce:	4461      	add	r1, ip
 80063d0:	f8d9 c000 	ldr.w	ip, [r9]
 80063d4:	0c12      	lsrs	r2, r2, #16
 80063d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80063da:	fb0a c202 	mla	r2, sl, r2, ip
 80063de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063e2:	b289      	uxth	r1, r1
 80063e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063e8:	4577      	cmp	r7, lr
 80063ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063ee:	f849 1b04 	str.w	r1, [r9], #4
 80063f2:	d8e3      	bhi.n	80063bc <__multiply+0xb0>
 80063f4:	9a01      	ldr	r2, [sp, #4]
 80063f6:	f845 c002 	str.w	ip, [r5, r2]
 80063fa:	9a03      	ldr	r2, [sp, #12]
 80063fc:	3304      	adds	r3, #4
 80063fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006402:	f1b9 0f00 	cmp.w	r9, #0
 8006406:	d020      	beq.n	800644a <__multiply+0x13e>
 8006408:	46ae      	mov	lr, r5
 800640a:	f04f 0a00 	mov.w	sl, #0
 800640e:	6829      	ldr	r1, [r5, #0]
 8006410:	f104 0c14 	add.w	ip, r4, #20
 8006414:	f8bc b000 	ldrh.w	fp, [ip]
 8006418:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800641c:	b289      	uxth	r1, r1
 800641e:	fb09 220b 	mla	r2, r9, fp, r2
 8006422:	4492      	add	sl, r2
 8006424:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006428:	f84e 1b04 	str.w	r1, [lr], #4
 800642c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006430:	f8be 1000 	ldrh.w	r1, [lr]
 8006434:	0c12      	lsrs	r2, r2, #16
 8006436:	fb09 1102 	mla	r1, r9, r2, r1
 800643a:	4567      	cmp	r7, ip
 800643c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006440:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006444:	d8e6      	bhi.n	8006414 <__multiply+0x108>
 8006446:	9a01      	ldr	r2, [sp, #4]
 8006448:	50a9      	str	r1, [r5, r2]
 800644a:	3504      	adds	r5, #4
 800644c:	e79b      	b.n	8006386 <__multiply+0x7a>
 800644e:	3e01      	subs	r6, #1
 8006450:	e79d      	b.n	800638e <__multiply+0x82>
 8006452:	bf00      	nop
 8006454:	08007cd1 	.word	0x08007cd1
 8006458:	08007d73 	.word	0x08007d73

0800645c <__pow5mult>:
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	4615      	mov	r5, r2
 8006462:	f012 0203 	ands.w	r2, r2, #3
 8006466:	4606      	mov	r6, r0
 8006468:	460f      	mov	r7, r1
 800646a:	d007      	beq.n	800647c <__pow5mult+0x20>
 800646c:	4c25      	ldr	r4, [pc, #148]	; (8006504 <__pow5mult+0xa8>)
 800646e:	3a01      	subs	r2, #1
 8006470:	2300      	movs	r3, #0
 8006472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006476:	f7ff fe55 	bl	8006124 <__multadd>
 800647a:	4607      	mov	r7, r0
 800647c:	10ad      	asrs	r5, r5, #2
 800647e:	d03d      	beq.n	80064fc <__pow5mult+0xa0>
 8006480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006482:	b97c      	cbnz	r4, 80064a4 <__pow5mult+0x48>
 8006484:	2010      	movs	r0, #16
 8006486:	f000 fbb3 	bl	8006bf0 <malloc>
 800648a:	4602      	mov	r2, r0
 800648c:	6270      	str	r0, [r6, #36]	; 0x24
 800648e:	b928      	cbnz	r0, 800649c <__pow5mult+0x40>
 8006490:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006494:	4b1c      	ldr	r3, [pc, #112]	; (8006508 <__pow5mult+0xac>)
 8006496:	481d      	ldr	r0, [pc, #116]	; (800650c <__pow5mult+0xb0>)
 8006498:	f000 fb7a 	bl	8006b90 <__assert_func>
 800649c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064a0:	6004      	str	r4, [r0, #0]
 80064a2:	60c4      	str	r4, [r0, #12]
 80064a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80064a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064ac:	b94c      	cbnz	r4, 80064c2 <__pow5mult+0x66>
 80064ae:	f240 2171 	movw	r1, #625	; 0x271
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7ff ff14 	bl	80062e0 <__i2b>
 80064b8:	2300      	movs	r3, #0
 80064ba:	4604      	mov	r4, r0
 80064bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80064c0:	6003      	str	r3, [r0, #0]
 80064c2:	f04f 0900 	mov.w	r9, #0
 80064c6:	07eb      	lsls	r3, r5, #31
 80064c8:	d50a      	bpl.n	80064e0 <__pow5mult+0x84>
 80064ca:	4639      	mov	r1, r7
 80064cc:	4622      	mov	r2, r4
 80064ce:	4630      	mov	r0, r6
 80064d0:	f7ff ff1c 	bl	800630c <__multiply>
 80064d4:	4680      	mov	r8, r0
 80064d6:	4639      	mov	r1, r7
 80064d8:	4630      	mov	r0, r6
 80064da:	f7ff fe01 	bl	80060e0 <_Bfree>
 80064de:	4647      	mov	r7, r8
 80064e0:	106d      	asrs	r5, r5, #1
 80064e2:	d00b      	beq.n	80064fc <__pow5mult+0xa0>
 80064e4:	6820      	ldr	r0, [r4, #0]
 80064e6:	b938      	cbnz	r0, 80064f8 <__pow5mult+0x9c>
 80064e8:	4622      	mov	r2, r4
 80064ea:	4621      	mov	r1, r4
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7ff ff0d 	bl	800630c <__multiply>
 80064f2:	6020      	str	r0, [r4, #0]
 80064f4:	f8c0 9000 	str.w	r9, [r0]
 80064f8:	4604      	mov	r4, r0
 80064fa:	e7e4      	b.n	80064c6 <__pow5mult+0x6a>
 80064fc:	4638      	mov	r0, r7
 80064fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006502:	bf00      	nop
 8006504:	08007ec0 	.word	0x08007ec0
 8006508:	08007d5c 	.word	0x08007d5c
 800650c:	08007d73 	.word	0x08007d73

08006510 <__lshift>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	460c      	mov	r4, r1
 8006516:	4607      	mov	r7, r0
 8006518:	4691      	mov	r9, r2
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	6849      	ldr	r1, [r1, #4]
 800651e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006528:	f108 0601 	add.w	r6, r8, #1
 800652c:	42b3      	cmp	r3, r6
 800652e:	db0b      	blt.n	8006548 <__lshift+0x38>
 8006530:	4638      	mov	r0, r7
 8006532:	f7ff fd95 	bl	8006060 <_Balloc>
 8006536:	4605      	mov	r5, r0
 8006538:	b948      	cbnz	r0, 800654e <__lshift+0x3e>
 800653a:	4602      	mov	r2, r0
 800653c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006540:	4b29      	ldr	r3, [pc, #164]	; (80065e8 <__lshift+0xd8>)
 8006542:	482a      	ldr	r0, [pc, #168]	; (80065ec <__lshift+0xdc>)
 8006544:	f000 fb24 	bl	8006b90 <__assert_func>
 8006548:	3101      	adds	r1, #1
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	e7ee      	b.n	800652c <__lshift+0x1c>
 800654e:	2300      	movs	r3, #0
 8006550:	f100 0114 	add.w	r1, r0, #20
 8006554:	f100 0210 	add.w	r2, r0, #16
 8006558:	4618      	mov	r0, r3
 800655a:	4553      	cmp	r3, sl
 800655c:	db37      	blt.n	80065ce <__lshift+0xbe>
 800655e:	6920      	ldr	r0, [r4, #16]
 8006560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006564:	f104 0314 	add.w	r3, r4, #20
 8006568:	f019 091f 	ands.w	r9, r9, #31
 800656c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006570:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006574:	d02f      	beq.n	80065d6 <__lshift+0xc6>
 8006576:	468a      	mov	sl, r1
 8006578:	f04f 0c00 	mov.w	ip, #0
 800657c:	f1c9 0e20 	rsb	lr, r9, #32
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	fa02 f209 	lsl.w	r2, r2, r9
 8006586:	ea42 020c 	orr.w	r2, r2, ip
 800658a:	f84a 2b04 	str.w	r2, [sl], #4
 800658e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006592:	4298      	cmp	r0, r3
 8006594:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006598:	d8f2      	bhi.n	8006580 <__lshift+0x70>
 800659a:	1b03      	subs	r3, r0, r4
 800659c:	3b15      	subs	r3, #21
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	3304      	adds	r3, #4
 80065a4:	f104 0215 	add.w	r2, r4, #21
 80065a8:	4290      	cmp	r0, r2
 80065aa:	bf38      	it	cc
 80065ac:	2304      	movcc	r3, #4
 80065ae:	f841 c003 	str.w	ip, [r1, r3]
 80065b2:	f1bc 0f00 	cmp.w	ip, #0
 80065b6:	d001      	beq.n	80065bc <__lshift+0xac>
 80065b8:	f108 0602 	add.w	r6, r8, #2
 80065bc:	3e01      	subs	r6, #1
 80065be:	4638      	mov	r0, r7
 80065c0:	4621      	mov	r1, r4
 80065c2:	612e      	str	r6, [r5, #16]
 80065c4:	f7ff fd8c 	bl	80060e0 <_Bfree>
 80065c8:	4628      	mov	r0, r5
 80065ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80065d2:	3301      	adds	r3, #1
 80065d4:	e7c1      	b.n	800655a <__lshift+0x4a>
 80065d6:	3904      	subs	r1, #4
 80065d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065dc:	4298      	cmp	r0, r3
 80065de:	f841 2f04 	str.w	r2, [r1, #4]!
 80065e2:	d8f9      	bhi.n	80065d8 <__lshift+0xc8>
 80065e4:	e7ea      	b.n	80065bc <__lshift+0xac>
 80065e6:	bf00      	nop
 80065e8:	08007cd1 	.word	0x08007cd1
 80065ec:	08007d73 	.word	0x08007d73

080065f0 <__mcmp>:
 80065f0:	4603      	mov	r3, r0
 80065f2:	690a      	ldr	r2, [r1, #16]
 80065f4:	6900      	ldr	r0, [r0, #16]
 80065f6:	b530      	push	{r4, r5, lr}
 80065f8:	1a80      	subs	r0, r0, r2
 80065fa:	d10d      	bne.n	8006618 <__mcmp+0x28>
 80065fc:	3314      	adds	r3, #20
 80065fe:	3114      	adds	r1, #20
 8006600:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006604:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006608:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800660c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006610:	4295      	cmp	r5, r2
 8006612:	d002      	beq.n	800661a <__mcmp+0x2a>
 8006614:	d304      	bcc.n	8006620 <__mcmp+0x30>
 8006616:	2001      	movs	r0, #1
 8006618:	bd30      	pop	{r4, r5, pc}
 800661a:	42a3      	cmp	r3, r4
 800661c:	d3f4      	bcc.n	8006608 <__mcmp+0x18>
 800661e:	e7fb      	b.n	8006618 <__mcmp+0x28>
 8006620:	f04f 30ff 	mov.w	r0, #4294967295
 8006624:	e7f8      	b.n	8006618 <__mcmp+0x28>
	...

08006628 <__mdiff>:
 8006628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	460d      	mov	r5, r1
 800662e:	4607      	mov	r7, r0
 8006630:	4611      	mov	r1, r2
 8006632:	4628      	mov	r0, r5
 8006634:	4614      	mov	r4, r2
 8006636:	f7ff ffdb 	bl	80065f0 <__mcmp>
 800663a:	1e06      	subs	r6, r0, #0
 800663c:	d111      	bne.n	8006662 <__mdiff+0x3a>
 800663e:	4631      	mov	r1, r6
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff fd0d 	bl	8006060 <_Balloc>
 8006646:	4602      	mov	r2, r0
 8006648:	b928      	cbnz	r0, 8006656 <__mdiff+0x2e>
 800664a:	f240 2132 	movw	r1, #562	; 0x232
 800664e:	4b3a      	ldr	r3, [pc, #232]	; (8006738 <__mdiff+0x110>)
 8006650:	483a      	ldr	r0, [pc, #232]	; (800673c <__mdiff+0x114>)
 8006652:	f000 fa9d 	bl	8006b90 <__assert_func>
 8006656:	2301      	movs	r3, #1
 8006658:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800665c:	4610      	mov	r0, r2
 800665e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006662:	bfa4      	itt	ge
 8006664:	4623      	movge	r3, r4
 8006666:	462c      	movge	r4, r5
 8006668:	4638      	mov	r0, r7
 800666a:	6861      	ldr	r1, [r4, #4]
 800666c:	bfa6      	itte	ge
 800666e:	461d      	movge	r5, r3
 8006670:	2600      	movge	r6, #0
 8006672:	2601      	movlt	r6, #1
 8006674:	f7ff fcf4 	bl	8006060 <_Balloc>
 8006678:	4602      	mov	r2, r0
 800667a:	b918      	cbnz	r0, 8006684 <__mdiff+0x5c>
 800667c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006680:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <__mdiff+0x110>)
 8006682:	e7e5      	b.n	8006650 <__mdiff+0x28>
 8006684:	f102 0814 	add.w	r8, r2, #20
 8006688:	46c2      	mov	sl, r8
 800668a:	f04f 0c00 	mov.w	ip, #0
 800668e:	6927      	ldr	r7, [r4, #16]
 8006690:	60c6      	str	r6, [r0, #12]
 8006692:	692e      	ldr	r6, [r5, #16]
 8006694:	f104 0014 	add.w	r0, r4, #20
 8006698:	f105 0914 	add.w	r9, r5, #20
 800669c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80066a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066a4:	3410      	adds	r4, #16
 80066a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80066aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80066ae:	fa1f f18b 	uxth.w	r1, fp
 80066b2:	448c      	add	ip, r1
 80066b4:	b299      	uxth	r1, r3
 80066b6:	0c1b      	lsrs	r3, r3, #16
 80066b8:	ebac 0101 	sub.w	r1, ip, r1
 80066bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80066c4:	b289      	uxth	r1, r1
 80066c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80066ca:	454e      	cmp	r6, r9
 80066cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80066d0:	f84a 3b04 	str.w	r3, [sl], #4
 80066d4:	d8e7      	bhi.n	80066a6 <__mdiff+0x7e>
 80066d6:	1b73      	subs	r3, r6, r5
 80066d8:	3b15      	subs	r3, #21
 80066da:	f023 0303 	bic.w	r3, r3, #3
 80066de:	3515      	adds	r5, #21
 80066e0:	3304      	adds	r3, #4
 80066e2:	42ae      	cmp	r6, r5
 80066e4:	bf38      	it	cc
 80066e6:	2304      	movcc	r3, #4
 80066e8:	4418      	add	r0, r3
 80066ea:	4443      	add	r3, r8
 80066ec:	461e      	mov	r6, r3
 80066ee:	4605      	mov	r5, r0
 80066f0:	4575      	cmp	r5, lr
 80066f2:	d30e      	bcc.n	8006712 <__mdiff+0xea>
 80066f4:	f10e 0103 	add.w	r1, lr, #3
 80066f8:	1a09      	subs	r1, r1, r0
 80066fa:	f021 0103 	bic.w	r1, r1, #3
 80066fe:	3803      	subs	r0, #3
 8006700:	4586      	cmp	lr, r0
 8006702:	bf38      	it	cc
 8006704:	2100      	movcc	r1, #0
 8006706:	4419      	add	r1, r3
 8006708:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800670c:	b18b      	cbz	r3, 8006732 <__mdiff+0x10a>
 800670e:	6117      	str	r7, [r2, #16]
 8006710:	e7a4      	b.n	800665c <__mdiff+0x34>
 8006712:	f855 8b04 	ldr.w	r8, [r5], #4
 8006716:	fa1f f188 	uxth.w	r1, r8
 800671a:	4461      	add	r1, ip
 800671c:	140c      	asrs	r4, r1, #16
 800671e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006722:	b289      	uxth	r1, r1
 8006724:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006728:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800672c:	f846 1b04 	str.w	r1, [r6], #4
 8006730:	e7de      	b.n	80066f0 <__mdiff+0xc8>
 8006732:	3f01      	subs	r7, #1
 8006734:	e7e8      	b.n	8006708 <__mdiff+0xe0>
 8006736:	bf00      	nop
 8006738:	08007cd1 	.word	0x08007cd1
 800673c:	08007d73 	.word	0x08007d73

08006740 <__ulp>:
 8006740:	4b11      	ldr	r3, [pc, #68]	; (8006788 <__ulp+0x48>)
 8006742:	400b      	ands	r3, r1
 8006744:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006748:	2b00      	cmp	r3, #0
 800674a:	dd02      	ble.n	8006752 <__ulp+0x12>
 800674c:	2000      	movs	r0, #0
 800674e:	4619      	mov	r1, r3
 8006750:	4770      	bx	lr
 8006752:	425b      	negs	r3, r3
 8006754:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006758:	f04f 0000 	mov.w	r0, #0
 800675c:	f04f 0100 	mov.w	r1, #0
 8006760:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006764:	da04      	bge.n	8006770 <__ulp+0x30>
 8006766:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800676a:	fa43 f102 	asr.w	r1, r3, r2
 800676e:	4770      	bx	lr
 8006770:	f1a2 0314 	sub.w	r3, r2, #20
 8006774:	2b1e      	cmp	r3, #30
 8006776:	bfd6      	itet	le
 8006778:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800677c:	2301      	movgt	r3, #1
 800677e:	fa22 f303 	lsrle.w	r3, r2, r3
 8006782:	4618      	mov	r0, r3
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	7ff00000 	.word	0x7ff00000

0800678c <__b2d>:
 800678c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006790:	6907      	ldr	r7, [r0, #16]
 8006792:	f100 0914 	add.w	r9, r0, #20
 8006796:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800679a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800679e:	f1a7 0804 	sub.w	r8, r7, #4
 80067a2:	4630      	mov	r0, r6
 80067a4:	f7ff fd4e 	bl	8006244 <__hi0bits>
 80067a8:	f1c0 0320 	rsb	r3, r0, #32
 80067ac:	280a      	cmp	r0, #10
 80067ae:	600b      	str	r3, [r1, #0]
 80067b0:	491f      	ldr	r1, [pc, #124]	; (8006830 <__b2d+0xa4>)
 80067b2:	dc17      	bgt.n	80067e4 <__b2d+0x58>
 80067b4:	45c1      	cmp	r9, r8
 80067b6:	bf28      	it	cs
 80067b8:	2200      	movcs	r2, #0
 80067ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80067be:	fa26 f30c 	lsr.w	r3, r6, ip
 80067c2:	bf38      	it	cc
 80067c4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80067c8:	ea43 0501 	orr.w	r5, r3, r1
 80067cc:	f100 0315 	add.w	r3, r0, #21
 80067d0:	fa06 f303 	lsl.w	r3, r6, r3
 80067d4:	fa22 f20c 	lsr.w	r2, r2, ip
 80067d8:	ea43 0402 	orr.w	r4, r3, r2
 80067dc:	4620      	mov	r0, r4
 80067de:	4629      	mov	r1, r5
 80067e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067e4:	45c1      	cmp	r9, r8
 80067e6:	bf2e      	itee	cs
 80067e8:	2200      	movcs	r2, #0
 80067ea:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80067ee:	f1a7 0808 	subcc.w	r8, r7, #8
 80067f2:	f1b0 030b 	subs.w	r3, r0, #11
 80067f6:	d016      	beq.n	8006826 <__b2d+0x9a>
 80067f8:	f1c3 0720 	rsb	r7, r3, #32
 80067fc:	fa22 f107 	lsr.w	r1, r2, r7
 8006800:	45c8      	cmp	r8, r9
 8006802:	fa06 f603 	lsl.w	r6, r6, r3
 8006806:	ea46 0601 	orr.w	r6, r6, r1
 800680a:	bf94      	ite	ls
 800680c:	2100      	movls	r1, #0
 800680e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006812:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006816:	fa02 f003 	lsl.w	r0, r2, r3
 800681a:	40f9      	lsrs	r1, r7
 800681c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006820:	ea40 0401 	orr.w	r4, r0, r1
 8006824:	e7da      	b.n	80067dc <__b2d+0x50>
 8006826:	4614      	mov	r4, r2
 8006828:	ea46 0501 	orr.w	r5, r6, r1
 800682c:	e7d6      	b.n	80067dc <__b2d+0x50>
 800682e:	bf00      	nop
 8006830:	3ff00000 	.word	0x3ff00000

08006834 <__d2b>:
 8006834:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006838:	2101      	movs	r1, #1
 800683a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800683e:	4690      	mov	r8, r2
 8006840:	461d      	mov	r5, r3
 8006842:	f7ff fc0d 	bl	8006060 <_Balloc>
 8006846:	4604      	mov	r4, r0
 8006848:	b930      	cbnz	r0, 8006858 <__d2b+0x24>
 800684a:	4602      	mov	r2, r0
 800684c:	f240 310a 	movw	r1, #778	; 0x30a
 8006850:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <__d2b+0xb0>)
 8006852:	4825      	ldr	r0, [pc, #148]	; (80068e8 <__d2b+0xb4>)
 8006854:	f000 f99c 	bl	8006b90 <__assert_func>
 8006858:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800685c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006860:	bb2d      	cbnz	r5, 80068ae <__d2b+0x7a>
 8006862:	9301      	str	r3, [sp, #4]
 8006864:	f1b8 0300 	subs.w	r3, r8, #0
 8006868:	d026      	beq.n	80068b8 <__d2b+0x84>
 800686a:	4668      	mov	r0, sp
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	f7ff fd09 	bl	8006284 <__lo0bits>
 8006872:	9900      	ldr	r1, [sp, #0]
 8006874:	b1f0      	cbz	r0, 80068b4 <__d2b+0x80>
 8006876:	9a01      	ldr	r2, [sp, #4]
 8006878:	f1c0 0320 	rsb	r3, r0, #32
 800687c:	fa02 f303 	lsl.w	r3, r2, r3
 8006880:	430b      	orrs	r3, r1
 8006882:	40c2      	lsrs	r2, r0
 8006884:	6163      	str	r3, [r4, #20]
 8006886:	9201      	str	r2, [sp, #4]
 8006888:	9b01      	ldr	r3, [sp, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	bf14      	ite	ne
 800688e:	2102      	movne	r1, #2
 8006890:	2101      	moveq	r1, #1
 8006892:	61a3      	str	r3, [r4, #24]
 8006894:	6121      	str	r1, [r4, #16]
 8006896:	b1c5      	cbz	r5, 80068ca <__d2b+0x96>
 8006898:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800689c:	4405      	add	r5, r0
 800689e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068a2:	603d      	str	r5, [r7, #0]
 80068a4:	6030      	str	r0, [r6, #0]
 80068a6:	4620      	mov	r0, r4
 80068a8:	b002      	add	sp, #8
 80068aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068b2:	e7d6      	b.n	8006862 <__d2b+0x2e>
 80068b4:	6161      	str	r1, [r4, #20]
 80068b6:	e7e7      	b.n	8006888 <__d2b+0x54>
 80068b8:	a801      	add	r0, sp, #4
 80068ba:	f7ff fce3 	bl	8006284 <__lo0bits>
 80068be:	2101      	movs	r1, #1
 80068c0:	9b01      	ldr	r3, [sp, #4]
 80068c2:	6121      	str	r1, [r4, #16]
 80068c4:	6163      	str	r3, [r4, #20]
 80068c6:	3020      	adds	r0, #32
 80068c8:	e7e5      	b.n	8006896 <__d2b+0x62>
 80068ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80068ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068d2:	6038      	str	r0, [r7, #0]
 80068d4:	6918      	ldr	r0, [r3, #16]
 80068d6:	f7ff fcb5 	bl	8006244 <__hi0bits>
 80068da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80068de:	6031      	str	r1, [r6, #0]
 80068e0:	e7e1      	b.n	80068a6 <__d2b+0x72>
 80068e2:	bf00      	nop
 80068e4:	08007cd1 	.word	0x08007cd1
 80068e8:	08007d73 	.word	0x08007d73

080068ec <__ratio>:
 80068ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	4688      	mov	r8, r1
 80068f2:	4669      	mov	r1, sp
 80068f4:	4681      	mov	r9, r0
 80068f6:	f7ff ff49 	bl	800678c <__b2d>
 80068fa:	460f      	mov	r7, r1
 80068fc:	4604      	mov	r4, r0
 80068fe:	460d      	mov	r5, r1
 8006900:	4640      	mov	r0, r8
 8006902:	a901      	add	r1, sp, #4
 8006904:	f7ff ff42 	bl	800678c <__b2d>
 8006908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800690c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006910:	468b      	mov	fp, r1
 8006912:	eba3 0c02 	sub.w	ip, r3, r2
 8006916:	e9dd 3200 	ldrd	r3, r2, [sp]
 800691a:	1a9b      	subs	r3, r3, r2
 800691c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006920:	2b00      	cmp	r3, #0
 8006922:	bfd5      	itete	le
 8006924:	460a      	movle	r2, r1
 8006926:	462a      	movgt	r2, r5
 8006928:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800692c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006930:	bfd8      	it	le
 8006932:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006936:	465b      	mov	r3, fp
 8006938:	4602      	mov	r2, r0
 800693a:	4639      	mov	r1, r7
 800693c:	4620      	mov	r0, r4
 800693e:	f7f9 fef5 	bl	800072c <__aeabi_ddiv>
 8006942:	b003      	add	sp, #12
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006948 <__copybits>:
 8006948:	3901      	subs	r1, #1
 800694a:	b570      	push	{r4, r5, r6, lr}
 800694c:	1149      	asrs	r1, r1, #5
 800694e:	6914      	ldr	r4, [r2, #16]
 8006950:	3101      	adds	r1, #1
 8006952:	f102 0314 	add.w	r3, r2, #20
 8006956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800695a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800695e:	1f05      	subs	r5, r0, #4
 8006960:	42a3      	cmp	r3, r4
 8006962:	d30c      	bcc.n	800697e <__copybits+0x36>
 8006964:	1aa3      	subs	r3, r4, r2
 8006966:	3b11      	subs	r3, #17
 8006968:	f023 0303 	bic.w	r3, r3, #3
 800696c:	3211      	adds	r2, #17
 800696e:	42a2      	cmp	r2, r4
 8006970:	bf88      	it	hi
 8006972:	2300      	movhi	r3, #0
 8006974:	4418      	add	r0, r3
 8006976:	2300      	movs	r3, #0
 8006978:	4288      	cmp	r0, r1
 800697a:	d305      	bcc.n	8006988 <__copybits+0x40>
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006982:	f845 6f04 	str.w	r6, [r5, #4]!
 8006986:	e7eb      	b.n	8006960 <__copybits+0x18>
 8006988:	f840 3b04 	str.w	r3, [r0], #4
 800698c:	e7f4      	b.n	8006978 <__copybits+0x30>

0800698e <__any_on>:
 800698e:	f100 0214 	add.w	r2, r0, #20
 8006992:	6900      	ldr	r0, [r0, #16]
 8006994:	114b      	asrs	r3, r1, #5
 8006996:	4298      	cmp	r0, r3
 8006998:	b510      	push	{r4, lr}
 800699a:	db11      	blt.n	80069c0 <__any_on+0x32>
 800699c:	dd0a      	ble.n	80069b4 <__any_on+0x26>
 800699e:	f011 011f 	ands.w	r1, r1, #31
 80069a2:	d007      	beq.n	80069b4 <__any_on+0x26>
 80069a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80069a8:	fa24 f001 	lsr.w	r0, r4, r1
 80069ac:	fa00 f101 	lsl.w	r1, r0, r1
 80069b0:	428c      	cmp	r4, r1
 80069b2:	d10b      	bne.n	80069cc <__any_on+0x3e>
 80069b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d803      	bhi.n	80069c4 <__any_on+0x36>
 80069bc:	2000      	movs	r0, #0
 80069be:	bd10      	pop	{r4, pc}
 80069c0:	4603      	mov	r3, r0
 80069c2:	e7f7      	b.n	80069b4 <__any_on+0x26>
 80069c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80069c8:	2900      	cmp	r1, #0
 80069ca:	d0f5      	beq.n	80069b8 <__any_on+0x2a>
 80069cc:	2001      	movs	r0, #1
 80069ce:	e7f6      	b.n	80069be <__any_on+0x30>

080069d0 <_calloc_r>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	fba1 5402 	umull	r5, r4, r1, r2
 80069d6:	b934      	cbnz	r4, 80069e6 <_calloc_r+0x16>
 80069d8:	4629      	mov	r1, r5
 80069da:	f000 f82d 	bl	8006a38 <_malloc_r>
 80069de:	4606      	mov	r6, r0
 80069e0:	b928      	cbnz	r0, 80069ee <_calloc_r+0x1e>
 80069e2:	4630      	mov	r0, r6
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	220c      	movs	r2, #12
 80069e8:	2600      	movs	r6, #0
 80069ea:	6002      	str	r2, [r0, #0]
 80069ec:	e7f9      	b.n	80069e2 <_calloc_r+0x12>
 80069ee:	462a      	mov	r2, r5
 80069f0:	4621      	mov	r1, r4
 80069f2:	f7fe f8d1 	bl	8004b98 <memset>
 80069f6:	e7f4      	b.n	80069e2 <_calloc_r+0x12>

080069f8 <sbrk_aligned>:
 80069f8:	b570      	push	{r4, r5, r6, lr}
 80069fa:	4e0e      	ldr	r6, [pc, #56]	; (8006a34 <sbrk_aligned+0x3c>)
 80069fc:	460c      	mov	r4, r1
 80069fe:	6831      	ldr	r1, [r6, #0]
 8006a00:	4605      	mov	r5, r0
 8006a02:	b911      	cbnz	r1, 8006a0a <sbrk_aligned+0x12>
 8006a04:	f000 f892 	bl	8006b2c <_sbrk_r>
 8006a08:	6030      	str	r0, [r6, #0]
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 f88d 	bl	8006b2c <_sbrk_r>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d00a      	beq.n	8006a2c <sbrk_aligned+0x34>
 8006a16:	1cc4      	adds	r4, r0, #3
 8006a18:	f024 0403 	bic.w	r4, r4, #3
 8006a1c:	42a0      	cmp	r0, r4
 8006a1e:	d007      	beq.n	8006a30 <sbrk_aligned+0x38>
 8006a20:	1a21      	subs	r1, r4, r0
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 f882 	bl	8006b2c <_sbrk_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d101      	bne.n	8006a30 <sbrk_aligned+0x38>
 8006a2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006a30:	4620      	mov	r0, r4
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	200002f4 	.word	0x200002f4

08006a38 <_malloc_r>:
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3c:	1ccd      	adds	r5, r1, #3
 8006a3e:	f025 0503 	bic.w	r5, r5, #3
 8006a42:	3508      	adds	r5, #8
 8006a44:	2d0c      	cmp	r5, #12
 8006a46:	bf38      	it	cc
 8006a48:	250c      	movcc	r5, #12
 8006a4a:	2d00      	cmp	r5, #0
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	db01      	blt.n	8006a54 <_malloc_r+0x1c>
 8006a50:	42a9      	cmp	r1, r5
 8006a52:	d905      	bls.n	8006a60 <_malloc_r+0x28>
 8006a54:	230c      	movs	r3, #12
 8006a56:	2600      	movs	r6, #0
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a60:	4e2e      	ldr	r6, [pc, #184]	; (8006b1c <_malloc_r+0xe4>)
 8006a62:	f000 f8cd 	bl	8006c00 <__malloc_lock>
 8006a66:	6833      	ldr	r3, [r6, #0]
 8006a68:	461c      	mov	r4, r3
 8006a6a:	bb34      	cbnz	r4, 8006aba <_malloc_r+0x82>
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	4638      	mov	r0, r7
 8006a70:	f7ff ffc2 	bl	80069f8 <sbrk_aligned>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	4604      	mov	r4, r0
 8006a78:	d14d      	bne.n	8006b16 <_malloc_r+0xde>
 8006a7a:	6834      	ldr	r4, [r6, #0]
 8006a7c:	4626      	mov	r6, r4
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	d140      	bne.n	8006b04 <_malloc_r+0xcc>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	4631      	mov	r1, r6
 8006a86:	4638      	mov	r0, r7
 8006a88:	eb04 0803 	add.w	r8, r4, r3
 8006a8c:	f000 f84e 	bl	8006b2c <_sbrk_r>
 8006a90:	4580      	cmp	r8, r0
 8006a92:	d13a      	bne.n	8006b0a <_malloc_r+0xd2>
 8006a94:	6821      	ldr	r1, [r4, #0]
 8006a96:	3503      	adds	r5, #3
 8006a98:	1a6d      	subs	r5, r5, r1
 8006a9a:	f025 0503 	bic.w	r5, r5, #3
 8006a9e:	3508      	adds	r5, #8
 8006aa0:	2d0c      	cmp	r5, #12
 8006aa2:	bf38      	it	cc
 8006aa4:	250c      	movcc	r5, #12
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	f7ff ffa5 	bl	80069f8 <sbrk_aligned>
 8006aae:	3001      	adds	r0, #1
 8006ab0:	d02b      	beq.n	8006b0a <_malloc_r+0xd2>
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	442b      	add	r3, r5
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	e00e      	b.n	8006ad8 <_malloc_r+0xa0>
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	1b52      	subs	r2, r2, r5
 8006abe:	d41e      	bmi.n	8006afe <_malloc_r+0xc6>
 8006ac0:	2a0b      	cmp	r2, #11
 8006ac2:	d916      	bls.n	8006af2 <_malloc_r+0xba>
 8006ac4:	1961      	adds	r1, r4, r5
 8006ac6:	42a3      	cmp	r3, r4
 8006ac8:	6025      	str	r5, [r4, #0]
 8006aca:	bf18      	it	ne
 8006acc:	6059      	strne	r1, [r3, #4]
 8006ace:	6863      	ldr	r3, [r4, #4]
 8006ad0:	bf08      	it	eq
 8006ad2:	6031      	streq	r1, [r6, #0]
 8006ad4:	5162      	str	r2, [r4, r5]
 8006ad6:	604b      	str	r3, [r1, #4]
 8006ad8:	4638      	mov	r0, r7
 8006ada:	f104 060b 	add.w	r6, r4, #11
 8006ade:	f000 f895 	bl	8006c0c <__malloc_unlock>
 8006ae2:	f026 0607 	bic.w	r6, r6, #7
 8006ae6:	1d23      	adds	r3, r4, #4
 8006ae8:	1af2      	subs	r2, r6, r3
 8006aea:	d0b6      	beq.n	8006a5a <_malloc_r+0x22>
 8006aec:	1b9b      	subs	r3, r3, r6
 8006aee:	50a3      	str	r3, [r4, r2]
 8006af0:	e7b3      	b.n	8006a5a <_malloc_r+0x22>
 8006af2:	6862      	ldr	r2, [r4, #4]
 8006af4:	42a3      	cmp	r3, r4
 8006af6:	bf0c      	ite	eq
 8006af8:	6032      	streq	r2, [r6, #0]
 8006afa:	605a      	strne	r2, [r3, #4]
 8006afc:	e7ec      	b.n	8006ad8 <_malloc_r+0xa0>
 8006afe:	4623      	mov	r3, r4
 8006b00:	6864      	ldr	r4, [r4, #4]
 8006b02:	e7b2      	b.n	8006a6a <_malloc_r+0x32>
 8006b04:	4634      	mov	r4, r6
 8006b06:	6876      	ldr	r6, [r6, #4]
 8006b08:	e7b9      	b.n	8006a7e <_malloc_r+0x46>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	f000 f87c 	bl	8006c0c <__malloc_unlock>
 8006b14:	e7a1      	b.n	8006a5a <_malloc_r+0x22>
 8006b16:	6025      	str	r5, [r4, #0]
 8006b18:	e7de      	b.n	8006ad8 <_malloc_r+0xa0>
 8006b1a:	bf00      	nop
 8006b1c:	200002f0 	.word	0x200002f0

08006b20 <nan>:
 8006b20:	2000      	movs	r0, #0
 8006b22:	4901      	ldr	r1, [pc, #4]	; (8006b28 <nan+0x8>)
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	7ff80000 	.word	0x7ff80000

08006b2c <_sbrk_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4d05      	ldr	r5, [pc, #20]	; (8006b48 <_sbrk_r+0x1c>)
 8006b32:	4604      	mov	r4, r0
 8006b34:	4608      	mov	r0, r1
 8006b36:	602b      	str	r3, [r5, #0]
 8006b38:	f7fb f84a 	bl	8001bd0 <_sbrk>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d102      	bne.n	8006b46 <_sbrk_r+0x1a>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	b103      	cbz	r3, 8006b46 <_sbrk_r+0x1a>
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	200002f8 	.word	0x200002f8

08006b4c <strncmp>:
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	b510      	push	{r4, lr}
 8006b50:	b172      	cbz	r2, 8006b70 <strncmp+0x24>
 8006b52:	3901      	subs	r1, #1
 8006b54:	1884      	adds	r4, r0, r2
 8006b56:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006b5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006b5e:	4290      	cmp	r0, r2
 8006b60:	d101      	bne.n	8006b66 <strncmp+0x1a>
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	d101      	bne.n	8006b6a <strncmp+0x1e>
 8006b66:	1a80      	subs	r0, r0, r2
 8006b68:	bd10      	pop	{r4, pc}
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d1f3      	bne.n	8006b56 <strncmp+0xa>
 8006b6e:	e7fa      	b.n	8006b66 <strncmp+0x1a>
 8006b70:	4610      	mov	r0, r2
 8006b72:	e7f9      	b.n	8006b68 <strncmp+0x1c>

08006b74 <__ascii_wctomb>:
 8006b74:	4603      	mov	r3, r0
 8006b76:	4608      	mov	r0, r1
 8006b78:	b141      	cbz	r1, 8006b8c <__ascii_wctomb+0x18>
 8006b7a:	2aff      	cmp	r2, #255	; 0xff
 8006b7c:	d904      	bls.n	8006b88 <__ascii_wctomb+0x14>
 8006b7e:	228a      	movs	r2, #138	; 0x8a
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	4770      	bx	lr
 8006b88:	2001      	movs	r0, #1
 8006b8a:	700a      	strb	r2, [r1, #0]
 8006b8c:	4770      	bx	lr
	...

08006b90 <__assert_func>:
 8006b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b92:	4614      	mov	r4, r2
 8006b94:	461a      	mov	r2, r3
 8006b96:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <__assert_func+0x2c>)
 8006b98:	4605      	mov	r5, r0
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68d8      	ldr	r0, [r3, #12]
 8006b9e:	b14c      	cbz	r4, 8006bb4 <__assert_func+0x24>
 8006ba0:	4b07      	ldr	r3, [pc, #28]	; (8006bc0 <__assert_func+0x30>)
 8006ba2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ba6:	9100      	str	r1, [sp, #0]
 8006ba8:	462b      	mov	r3, r5
 8006baa:	4906      	ldr	r1, [pc, #24]	; (8006bc4 <__assert_func+0x34>)
 8006bac:	f000 f80e 	bl	8006bcc <fiprintf>
 8006bb0:	f000 fc28 	bl	8007404 <abort>
 8006bb4:	4b04      	ldr	r3, [pc, #16]	; (8006bc8 <__assert_func+0x38>)
 8006bb6:	461c      	mov	r4, r3
 8006bb8:	e7f3      	b.n	8006ba2 <__assert_func+0x12>
 8006bba:	bf00      	nop
 8006bbc:	20000010 	.word	0x20000010
 8006bc0:	08007ecc 	.word	0x08007ecc
 8006bc4:	08007ed9 	.word	0x08007ed9
 8006bc8:	08007f07 	.word	0x08007f07

08006bcc <fiprintf>:
 8006bcc:	b40e      	push	{r1, r2, r3}
 8006bce:	b503      	push	{r0, r1, lr}
 8006bd0:	4601      	mov	r1, r0
 8006bd2:	ab03      	add	r3, sp, #12
 8006bd4:	4805      	ldr	r0, [pc, #20]	; (8006bec <fiprintf+0x20>)
 8006bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bda:	6800      	ldr	r0, [r0, #0]
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	f000 f88b 	bl	8006cf8 <_vfiprintf_r>
 8006be2:	b002      	add	sp, #8
 8006be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006be8:	b003      	add	sp, #12
 8006bea:	4770      	bx	lr
 8006bec:	20000010 	.word	0x20000010

08006bf0 <malloc>:
 8006bf0:	4b02      	ldr	r3, [pc, #8]	; (8006bfc <malloc+0xc>)
 8006bf2:	4601      	mov	r1, r0
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	f7ff bf1f 	b.w	8006a38 <_malloc_r>
 8006bfa:	bf00      	nop
 8006bfc:	20000010 	.word	0x20000010

08006c00 <__malloc_lock>:
 8006c00:	4801      	ldr	r0, [pc, #4]	; (8006c08 <__malloc_lock+0x8>)
 8006c02:	f000 bdbb 	b.w	800777c <__retarget_lock_acquire_recursive>
 8006c06:	bf00      	nop
 8006c08:	200002fc 	.word	0x200002fc

08006c0c <__malloc_unlock>:
 8006c0c:	4801      	ldr	r0, [pc, #4]	; (8006c14 <__malloc_unlock+0x8>)
 8006c0e:	f000 bdb6 	b.w	800777e <__retarget_lock_release_recursive>
 8006c12:	bf00      	nop
 8006c14:	200002fc 	.word	0x200002fc

08006c18 <_free_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4605      	mov	r5, r0
 8006c1c:	2900      	cmp	r1, #0
 8006c1e:	d040      	beq.n	8006ca2 <_free_r+0x8a>
 8006c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c24:	1f0c      	subs	r4, r1, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bfb8      	it	lt
 8006c2a:	18e4      	addlt	r4, r4, r3
 8006c2c:	f7ff ffe8 	bl	8006c00 <__malloc_lock>
 8006c30:	4a1c      	ldr	r2, [pc, #112]	; (8006ca4 <_free_r+0x8c>)
 8006c32:	6813      	ldr	r3, [r2, #0]
 8006c34:	b933      	cbnz	r3, 8006c44 <_free_r+0x2c>
 8006c36:	6063      	str	r3, [r4, #4]
 8006c38:	6014      	str	r4, [r2, #0]
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c40:	f7ff bfe4 	b.w	8006c0c <__malloc_unlock>
 8006c44:	42a3      	cmp	r3, r4
 8006c46:	d908      	bls.n	8006c5a <_free_r+0x42>
 8006c48:	6820      	ldr	r0, [r4, #0]
 8006c4a:	1821      	adds	r1, r4, r0
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	bf01      	itttt	eq
 8006c50:	6819      	ldreq	r1, [r3, #0]
 8006c52:	685b      	ldreq	r3, [r3, #4]
 8006c54:	1809      	addeq	r1, r1, r0
 8006c56:	6021      	streq	r1, [r4, #0]
 8006c58:	e7ed      	b.n	8006c36 <_free_r+0x1e>
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	b10b      	cbz	r3, 8006c64 <_free_r+0x4c>
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	d9fa      	bls.n	8006c5a <_free_r+0x42>
 8006c64:	6811      	ldr	r1, [r2, #0]
 8006c66:	1850      	adds	r0, r2, r1
 8006c68:	42a0      	cmp	r0, r4
 8006c6a:	d10b      	bne.n	8006c84 <_free_r+0x6c>
 8006c6c:	6820      	ldr	r0, [r4, #0]
 8006c6e:	4401      	add	r1, r0
 8006c70:	1850      	adds	r0, r2, r1
 8006c72:	4283      	cmp	r3, r0
 8006c74:	6011      	str	r1, [r2, #0]
 8006c76:	d1e0      	bne.n	8006c3a <_free_r+0x22>
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	4401      	add	r1, r0
 8006c7e:	6011      	str	r1, [r2, #0]
 8006c80:	6053      	str	r3, [r2, #4]
 8006c82:	e7da      	b.n	8006c3a <_free_r+0x22>
 8006c84:	d902      	bls.n	8006c8c <_free_r+0x74>
 8006c86:	230c      	movs	r3, #12
 8006c88:	602b      	str	r3, [r5, #0]
 8006c8a:	e7d6      	b.n	8006c3a <_free_r+0x22>
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	1821      	adds	r1, r4, r0
 8006c90:	428b      	cmp	r3, r1
 8006c92:	bf01      	itttt	eq
 8006c94:	6819      	ldreq	r1, [r3, #0]
 8006c96:	685b      	ldreq	r3, [r3, #4]
 8006c98:	1809      	addeq	r1, r1, r0
 8006c9a:	6021      	streq	r1, [r4, #0]
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	6054      	str	r4, [r2, #4]
 8006ca0:	e7cb      	b.n	8006c3a <_free_r+0x22>
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	200002f0 	.word	0x200002f0

08006ca8 <__sfputc_r>:
 8006ca8:	6893      	ldr	r3, [r2, #8]
 8006caa:	b410      	push	{r4}
 8006cac:	3b01      	subs	r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	6093      	str	r3, [r2, #8]
 8006cb2:	da07      	bge.n	8006cc4 <__sfputc_r+0x1c>
 8006cb4:	6994      	ldr	r4, [r2, #24]
 8006cb6:	42a3      	cmp	r3, r4
 8006cb8:	db01      	blt.n	8006cbe <__sfputc_r+0x16>
 8006cba:	290a      	cmp	r1, #10
 8006cbc:	d102      	bne.n	8006cc4 <__sfputc_r+0x1c>
 8006cbe:	bc10      	pop	{r4}
 8006cc0:	f000 bae0 	b.w	8007284 <__swbuf_r>
 8006cc4:	6813      	ldr	r3, [r2, #0]
 8006cc6:	1c58      	adds	r0, r3, #1
 8006cc8:	6010      	str	r0, [r2, #0]
 8006cca:	7019      	strb	r1, [r3, #0]
 8006ccc:	4608      	mov	r0, r1
 8006cce:	bc10      	pop	{r4}
 8006cd0:	4770      	bx	lr

08006cd2 <__sfputs_r>:
 8006cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	460f      	mov	r7, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	18d5      	adds	r5, r2, r3
 8006cdc:	42ac      	cmp	r4, r5
 8006cde:	d101      	bne.n	8006ce4 <__sfputs_r+0x12>
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	e007      	b.n	8006cf4 <__sfputs_r+0x22>
 8006ce4:	463a      	mov	r2, r7
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cec:	f7ff ffdc 	bl	8006ca8 <__sfputc_r>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d1f3      	bne.n	8006cdc <__sfputs_r+0xa>
 8006cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cf8 <_vfiprintf_r>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	460d      	mov	r5, r1
 8006cfe:	4614      	mov	r4, r2
 8006d00:	4698      	mov	r8, r3
 8006d02:	4606      	mov	r6, r0
 8006d04:	b09d      	sub	sp, #116	; 0x74
 8006d06:	b118      	cbz	r0, 8006d10 <_vfiprintf_r+0x18>
 8006d08:	6983      	ldr	r3, [r0, #24]
 8006d0a:	b90b      	cbnz	r3, 8006d10 <_vfiprintf_r+0x18>
 8006d0c:	f000 fc98 	bl	8007640 <__sinit>
 8006d10:	4b89      	ldr	r3, [pc, #548]	; (8006f38 <_vfiprintf_r+0x240>)
 8006d12:	429d      	cmp	r5, r3
 8006d14:	d11b      	bne.n	8006d4e <_vfiprintf_r+0x56>
 8006d16:	6875      	ldr	r5, [r6, #4]
 8006d18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d1a:	07d9      	lsls	r1, r3, #31
 8006d1c:	d405      	bmi.n	8006d2a <_vfiprintf_r+0x32>
 8006d1e:	89ab      	ldrh	r3, [r5, #12]
 8006d20:	059a      	lsls	r2, r3, #22
 8006d22:	d402      	bmi.n	8006d2a <_vfiprintf_r+0x32>
 8006d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d26:	f000 fd29 	bl	800777c <__retarget_lock_acquire_recursive>
 8006d2a:	89ab      	ldrh	r3, [r5, #12]
 8006d2c:	071b      	lsls	r3, r3, #28
 8006d2e:	d501      	bpl.n	8006d34 <_vfiprintf_r+0x3c>
 8006d30:	692b      	ldr	r3, [r5, #16]
 8006d32:	b9eb      	cbnz	r3, 8006d70 <_vfiprintf_r+0x78>
 8006d34:	4629      	mov	r1, r5
 8006d36:	4630      	mov	r0, r6
 8006d38:	f000 faf6 	bl	8007328 <__swsetup_r>
 8006d3c:	b1c0      	cbz	r0, 8006d70 <_vfiprintf_r+0x78>
 8006d3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d40:	07dc      	lsls	r4, r3, #31
 8006d42:	d50e      	bpl.n	8006d62 <_vfiprintf_r+0x6a>
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	b01d      	add	sp, #116	; 0x74
 8006d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4e:	4b7b      	ldr	r3, [pc, #492]	; (8006f3c <_vfiprintf_r+0x244>)
 8006d50:	429d      	cmp	r5, r3
 8006d52:	d101      	bne.n	8006d58 <_vfiprintf_r+0x60>
 8006d54:	68b5      	ldr	r5, [r6, #8]
 8006d56:	e7df      	b.n	8006d18 <_vfiprintf_r+0x20>
 8006d58:	4b79      	ldr	r3, [pc, #484]	; (8006f40 <_vfiprintf_r+0x248>)
 8006d5a:	429d      	cmp	r5, r3
 8006d5c:	bf08      	it	eq
 8006d5e:	68f5      	ldreq	r5, [r6, #12]
 8006d60:	e7da      	b.n	8006d18 <_vfiprintf_r+0x20>
 8006d62:	89ab      	ldrh	r3, [r5, #12]
 8006d64:	0598      	lsls	r0, r3, #22
 8006d66:	d4ed      	bmi.n	8006d44 <_vfiprintf_r+0x4c>
 8006d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d6a:	f000 fd08 	bl	800777e <__retarget_lock_release_recursive>
 8006d6e:	e7e9      	b.n	8006d44 <_vfiprintf_r+0x4c>
 8006d70:	2300      	movs	r3, #0
 8006d72:	9309      	str	r3, [sp, #36]	; 0x24
 8006d74:	2320      	movs	r3, #32
 8006d76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d7a:	2330      	movs	r3, #48	; 0x30
 8006d7c:	f04f 0901 	mov.w	r9, #1
 8006d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d84:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f44 <_vfiprintf_r+0x24c>
 8006d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	469a      	mov	sl, r3
 8006d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d94:	b10a      	cbz	r2, 8006d9a <_vfiprintf_r+0xa2>
 8006d96:	2a25      	cmp	r2, #37	; 0x25
 8006d98:	d1f9      	bne.n	8006d8e <_vfiprintf_r+0x96>
 8006d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d9e:	d00b      	beq.n	8006db8 <_vfiprintf_r+0xc0>
 8006da0:	465b      	mov	r3, fp
 8006da2:	4622      	mov	r2, r4
 8006da4:	4629      	mov	r1, r5
 8006da6:	4630      	mov	r0, r6
 8006da8:	f7ff ff93 	bl	8006cd2 <__sfputs_r>
 8006dac:	3001      	adds	r0, #1
 8006dae:	f000 80aa 	beq.w	8006f06 <_vfiprintf_r+0x20e>
 8006db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006db4:	445a      	add	r2, fp
 8006db6:	9209      	str	r2, [sp, #36]	; 0x24
 8006db8:	f89a 3000 	ldrb.w	r3, [sl]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80a2 	beq.w	8006f06 <_vfiprintf_r+0x20e>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dcc:	f10a 0a01 	add.w	sl, sl, #1
 8006dd0:	9304      	str	r3, [sp, #16]
 8006dd2:	9307      	str	r3, [sp, #28]
 8006dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8006dda:	4654      	mov	r4, sl
 8006ddc:	2205      	movs	r2, #5
 8006dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de2:	4858      	ldr	r0, [pc, #352]	; (8006f44 <_vfiprintf_r+0x24c>)
 8006de4:	f000 fd32 	bl	800784c <memchr>
 8006de8:	9a04      	ldr	r2, [sp, #16]
 8006dea:	b9d8      	cbnz	r0, 8006e24 <_vfiprintf_r+0x12c>
 8006dec:	06d1      	lsls	r1, r2, #27
 8006dee:	bf44      	itt	mi
 8006df0:	2320      	movmi	r3, #32
 8006df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006df6:	0713      	lsls	r3, r2, #28
 8006df8:	bf44      	itt	mi
 8006dfa:	232b      	movmi	r3, #43	; 0x2b
 8006dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e00:	f89a 3000 	ldrb.w	r3, [sl]
 8006e04:	2b2a      	cmp	r3, #42	; 0x2a
 8006e06:	d015      	beq.n	8006e34 <_vfiprintf_r+0x13c>
 8006e08:	4654      	mov	r4, sl
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	f04f 0c0a 	mov.w	ip, #10
 8006e10:	9a07      	ldr	r2, [sp, #28]
 8006e12:	4621      	mov	r1, r4
 8006e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e18:	3b30      	subs	r3, #48	; 0x30
 8006e1a:	2b09      	cmp	r3, #9
 8006e1c:	d94e      	bls.n	8006ebc <_vfiprintf_r+0x1c4>
 8006e1e:	b1b0      	cbz	r0, 8006e4e <_vfiprintf_r+0x156>
 8006e20:	9207      	str	r2, [sp, #28]
 8006e22:	e014      	b.n	8006e4e <_vfiprintf_r+0x156>
 8006e24:	eba0 0308 	sub.w	r3, r0, r8
 8006e28:	fa09 f303 	lsl.w	r3, r9, r3
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	46a2      	mov	sl, r4
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	e7d2      	b.n	8006dda <_vfiprintf_r+0xe2>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	1d19      	adds	r1, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	9103      	str	r1, [sp, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfbb      	ittet	lt
 8006e40:	425b      	neglt	r3, r3
 8006e42:	f042 0202 	orrlt.w	r2, r2, #2
 8006e46:	9307      	strge	r3, [sp, #28]
 8006e48:	9307      	strlt	r3, [sp, #28]
 8006e4a:	bfb8      	it	lt
 8006e4c:	9204      	strlt	r2, [sp, #16]
 8006e4e:	7823      	ldrb	r3, [r4, #0]
 8006e50:	2b2e      	cmp	r3, #46	; 0x2e
 8006e52:	d10c      	bne.n	8006e6e <_vfiprintf_r+0x176>
 8006e54:	7863      	ldrb	r3, [r4, #1]
 8006e56:	2b2a      	cmp	r3, #42	; 0x2a
 8006e58:	d135      	bne.n	8006ec6 <_vfiprintf_r+0x1ce>
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	3402      	adds	r4, #2
 8006e5e:	1d1a      	adds	r2, r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	9203      	str	r2, [sp, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bfb8      	it	lt
 8006e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e6c:	9305      	str	r3, [sp, #20]
 8006e6e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006f48 <_vfiprintf_r+0x250>
 8006e72:	2203      	movs	r2, #3
 8006e74:	4650      	mov	r0, sl
 8006e76:	7821      	ldrb	r1, [r4, #0]
 8006e78:	f000 fce8 	bl	800784c <memchr>
 8006e7c:	b140      	cbz	r0, 8006e90 <_vfiprintf_r+0x198>
 8006e7e:	2340      	movs	r3, #64	; 0x40
 8006e80:	eba0 000a 	sub.w	r0, r0, sl
 8006e84:	fa03 f000 	lsl.w	r0, r3, r0
 8006e88:	9b04      	ldr	r3, [sp, #16]
 8006e8a:	3401      	adds	r4, #1
 8006e8c:	4303      	orrs	r3, r0
 8006e8e:	9304      	str	r3, [sp, #16]
 8006e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e94:	2206      	movs	r2, #6
 8006e96:	482d      	ldr	r0, [pc, #180]	; (8006f4c <_vfiprintf_r+0x254>)
 8006e98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e9c:	f000 fcd6 	bl	800784c <memchr>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d03f      	beq.n	8006f24 <_vfiprintf_r+0x22c>
 8006ea4:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <_vfiprintf_r+0x258>)
 8006ea6:	bb1b      	cbnz	r3, 8006ef0 <_vfiprintf_r+0x1f8>
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	3307      	adds	r3, #7
 8006eac:	f023 0307 	bic.w	r3, r3, #7
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	9303      	str	r3, [sp, #12]
 8006eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb6:	443b      	add	r3, r7
 8006eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eba:	e767      	b.n	8006d8c <_vfiprintf_r+0x94>
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec4:	e7a5      	b.n	8006e12 <_vfiprintf_r+0x11a>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f04f 0c0a 	mov.w	ip, #10
 8006ecc:	4619      	mov	r1, r3
 8006ece:	3401      	adds	r4, #1
 8006ed0:	9305      	str	r3, [sp, #20]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ed8:	3a30      	subs	r2, #48	; 0x30
 8006eda:	2a09      	cmp	r2, #9
 8006edc:	d903      	bls.n	8006ee6 <_vfiprintf_r+0x1ee>
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0c5      	beq.n	8006e6e <_vfiprintf_r+0x176>
 8006ee2:	9105      	str	r1, [sp, #20]
 8006ee4:	e7c3      	b.n	8006e6e <_vfiprintf_r+0x176>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	2301      	movs	r3, #1
 8006eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eee:	e7f0      	b.n	8006ed2 <_vfiprintf_r+0x1da>
 8006ef0:	ab03      	add	r3, sp, #12
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	4b16      	ldr	r3, [pc, #88]	; (8006f54 <_vfiprintf_r+0x25c>)
 8006efa:	a904      	add	r1, sp, #16
 8006efc:	f3af 8000 	nop.w
 8006f00:	4607      	mov	r7, r0
 8006f02:	1c78      	adds	r0, r7, #1
 8006f04:	d1d6      	bne.n	8006eb4 <_vfiprintf_r+0x1bc>
 8006f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f08:	07d9      	lsls	r1, r3, #31
 8006f0a:	d405      	bmi.n	8006f18 <_vfiprintf_r+0x220>
 8006f0c:	89ab      	ldrh	r3, [r5, #12]
 8006f0e:	059a      	lsls	r2, r3, #22
 8006f10:	d402      	bmi.n	8006f18 <_vfiprintf_r+0x220>
 8006f12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f14:	f000 fc33 	bl	800777e <__retarget_lock_release_recursive>
 8006f18:	89ab      	ldrh	r3, [r5, #12]
 8006f1a:	065b      	lsls	r3, r3, #25
 8006f1c:	f53f af12 	bmi.w	8006d44 <_vfiprintf_r+0x4c>
 8006f20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f22:	e711      	b.n	8006d48 <_vfiprintf_r+0x50>
 8006f24:	ab03      	add	r3, sp, #12
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <_vfiprintf_r+0x25c>)
 8006f2e:	a904      	add	r1, sp, #16
 8006f30:	f000 f882 	bl	8007038 <_printf_i>
 8006f34:	e7e4      	b.n	8006f00 <_vfiprintf_r+0x208>
 8006f36:	bf00      	nop
 8006f38:	08007f5c 	.word	0x08007f5c
 8006f3c:	08007f7c 	.word	0x08007f7c
 8006f40:	08007f3c 	.word	0x08007f3c
 8006f44:	08007f08 	.word	0x08007f08
 8006f48:	08007f0e 	.word	0x08007f0e
 8006f4c:	08007f12 	.word	0x08007f12
 8006f50:	00000000 	.word	0x00000000
 8006f54:	08006cd3 	.word	0x08006cd3

08006f58 <_printf_common>:
 8006f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	4699      	mov	r9, r3
 8006f60:	688a      	ldr	r2, [r1, #8]
 8006f62:	690b      	ldr	r3, [r1, #16]
 8006f64:	4607      	mov	r7, r0
 8006f66:	4293      	cmp	r3, r2
 8006f68:	bfb8      	it	lt
 8006f6a:	4613      	movlt	r3, r2
 8006f6c:	6033      	str	r3, [r6, #0]
 8006f6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f72:	460c      	mov	r4, r1
 8006f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f78:	b10a      	cbz	r2, 8006f7e <_printf_common+0x26>
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	6033      	str	r3, [r6, #0]
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	0699      	lsls	r1, r3, #26
 8006f82:	bf42      	ittt	mi
 8006f84:	6833      	ldrmi	r3, [r6, #0]
 8006f86:	3302      	addmi	r3, #2
 8006f88:	6033      	strmi	r3, [r6, #0]
 8006f8a:	6825      	ldr	r5, [r4, #0]
 8006f8c:	f015 0506 	ands.w	r5, r5, #6
 8006f90:	d106      	bne.n	8006fa0 <_printf_common+0x48>
 8006f92:	f104 0a19 	add.w	sl, r4, #25
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	6832      	ldr	r2, [r6, #0]
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	42ab      	cmp	r3, r5
 8006f9e:	dc28      	bgt.n	8006ff2 <_printf_common+0x9a>
 8006fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fa4:	1e13      	subs	r3, r2, #0
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	bf18      	it	ne
 8006faa:	2301      	movne	r3, #1
 8006fac:	0692      	lsls	r2, r2, #26
 8006fae:	d42d      	bmi.n	800700c <_printf_common+0xb4>
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fb8:	47c0      	blx	r8
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d020      	beq.n	8007000 <_printf_common+0xa8>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	68e5      	ldr	r5, [r4, #12]
 8006fc2:	f003 0306 	and.w	r3, r3, #6
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	bf18      	it	ne
 8006fca:	2500      	movne	r5, #0
 8006fcc:	6832      	ldr	r2, [r6, #0]
 8006fce:	f04f 0600 	mov.w	r6, #0
 8006fd2:	68a3      	ldr	r3, [r4, #8]
 8006fd4:	bf08      	it	eq
 8006fd6:	1aad      	subeq	r5, r5, r2
 8006fd8:	6922      	ldr	r2, [r4, #16]
 8006fda:	bf08      	it	eq
 8006fdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	bfc4      	itt	gt
 8006fe4:	1a9b      	subgt	r3, r3, r2
 8006fe6:	18ed      	addgt	r5, r5, r3
 8006fe8:	341a      	adds	r4, #26
 8006fea:	42b5      	cmp	r5, r6
 8006fec:	d11a      	bne.n	8007024 <_printf_common+0xcc>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	e008      	b.n	8007004 <_printf_common+0xac>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	47c0      	blx	r8
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d103      	bne.n	8007008 <_printf_common+0xb0>
 8007000:	f04f 30ff 	mov.w	r0, #4294967295
 8007004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007008:	3501      	adds	r5, #1
 800700a:	e7c4      	b.n	8006f96 <_printf_common+0x3e>
 800700c:	2030      	movs	r0, #48	; 0x30
 800700e:	18e1      	adds	r1, r4, r3
 8007010:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800701a:	4422      	add	r2, r4
 800701c:	3302      	adds	r3, #2
 800701e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007022:	e7c5      	b.n	8006fb0 <_printf_common+0x58>
 8007024:	2301      	movs	r3, #1
 8007026:	4622      	mov	r2, r4
 8007028:	4649      	mov	r1, r9
 800702a:	4638      	mov	r0, r7
 800702c:	47c0      	blx	r8
 800702e:	3001      	adds	r0, #1
 8007030:	d0e6      	beq.n	8007000 <_printf_common+0xa8>
 8007032:	3601      	adds	r6, #1
 8007034:	e7d9      	b.n	8006fea <_printf_common+0x92>
	...

08007038 <_printf_i>:
 8007038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800703c:	7e0f      	ldrb	r7, [r1, #24]
 800703e:	4691      	mov	r9, r2
 8007040:	2f78      	cmp	r7, #120	; 0x78
 8007042:	4680      	mov	r8, r0
 8007044:	460c      	mov	r4, r1
 8007046:	469a      	mov	sl, r3
 8007048:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800704a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800704e:	d807      	bhi.n	8007060 <_printf_i+0x28>
 8007050:	2f62      	cmp	r7, #98	; 0x62
 8007052:	d80a      	bhi.n	800706a <_printf_i+0x32>
 8007054:	2f00      	cmp	r7, #0
 8007056:	f000 80d9 	beq.w	800720c <_printf_i+0x1d4>
 800705a:	2f58      	cmp	r7, #88	; 0x58
 800705c:	f000 80a4 	beq.w	80071a8 <_printf_i+0x170>
 8007060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007068:	e03a      	b.n	80070e0 <_printf_i+0xa8>
 800706a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800706e:	2b15      	cmp	r3, #21
 8007070:	d8f6      	bhi.n	8007060 <_printf_i+0x28>
 8007072:	a101      	add	r1, pc, #4	; (adr r1, 8007078 <_printf_i+0x40>)
 8007074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007078:	080070d1 	.word	0x080070d1
 800707c:	080070e5 	.word	0x080070e5
 8007080:	08007061 	.word	0x08007061
 8007084:	08007061 	.word	0x08007061
 8007088:	08007061 	.word	0x08007061
 800708c:	08007061 	.word	0x08007061
 8007090:	080070e5 	.word	0x080070e5
 8007094:	08007061 	.word	0x08007061
 8007098:	08007061 	.word	0x08007061
 800709c:	08007061 	.word	0x08007061
 80070a0:	08007061 	.word	0x08007061
 80070a4:	080071f3 	.word	0x080071f3
 80070a8:	08007115 	.word	0x08007115
 80070ac:	080071d5 	.word	0x080071d5
 80070b0:	08007061 	.word	0x08007061
 80070b4:	08007061 	.word	0x08007061
 80070b8:	08007215 	.word	0x08007215
 80070bc:	08007061 	.word	0x08007061
 80070c0:	08007115 	.word	0x08007115
 80070c4:	08007061 	.word	0x08007061
 80070c8:	08007061 	.word	0x08007061
 80070cc:	080071dd 	.word	0x080071dd
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	1d1a      	adds	r2, r3, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	602a      	str	r2, [r5, #0]
 80070d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e0:	2301      	movs	r3, #1
 80070e2:	e0a4      	b.n	800722e <_printf_i+0x1f6>
 80070e4:	6820      	ldr	r0, [r4, #0]
 80070e6:	6829      	ldr	r1, [r5, #0]
 80070e8:	0606      	lsls	r6, r0, #24
 80070ea:	f101 0304 	add.w	r3, r1, #4
 80070ee:	d50a      	bpl.n	8007106 <_printf_i+0xce>
 80070f0:	680e      	ldr	r6, [r1, #0]
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	2e00      	cmp	r6, #0
 80070f6:	da03      	bge.n	8007100 <_printf_i+0xc8>
 80070f8:	232d      	movs	r3, #45	; 0x2d
 80070fa:	4276      	negs	r6, r6
 80070fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007100:	230a      	movs	r3, #10
 8007102:	485e      	ldr	r0, [pc, #376]	; (800727c <_printf_i+0x244>)
 8007104:	e019      	b.n	800713a <_printf_i+0x102>
 8007106:	680e      	ldr	r6, [r1, #0]
 8007108:	f010 0f40 	tst.w	r0, #64	; 0x40
 800710c:	602b      	str	r3, [r5, #0]
 800710e:	bf18      	it	ne
 8007110:	b236      	sxthne	r6, r6
 8007112:	e7ef      	b.n	80070f4 <_printf_i+0xbc>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	6820      	ldr	r0, [r4, #0]
 8007118:	1d19      	adds	r1, r3, #4
 800711a:	6029      	str	r1, [r5, #0]
 800711c:	0601      	lsls	r1, r0, #24
 800711e:	d501      	bpl.n	8007124 <_printf_i+0xec>
 8007120:	681e      	ldr	r6, [r3, #0]
 8007122:	e002      	b.n	800712a <_printf_i+0xf2>
 8007124:	0646      	lsls	r6, r0, #25
 8007126:	d5fb      	bpl.n	8007120 <_printf_i+0xe8>
 8007128:	881e      	ldrh	r6, [r3, #0]
 800712a:	2f6f      	cmp	r7, #111	; 0x6f
 800712c:	bf0c      	ite	eq
 800712e:	2308      	moveq	r3, #8
 8007130:	230a      	movne	r3, #10
 8007132:	4852      	ldr	r0, [pc, #328]	; (800727c <_printf_i+0x244>)
 8007134:	2100      	movs	r1, #0
 8007136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800713a:	6865      	ldr	r5, [r4, #4]
 800713c:	2d00      	cmp	r5, #0
 800713e:	bfa8      	it	ge
 8007140:	6821      	ldrge	r1, [r4, #0]
 8007142:	60a5      	str	r5, [r4, #8]
 8007144:	bfa4      	itt	ge
 8007146:	f021 0104 	bicge.w	r1, r1, #4
 800714a:	6021      	strge	r1, [r4, #0]
 800714c:	b90e      	cbnz	r6, 8007152 <_printf_i+0x11a>
 800714e:	2d00      	cmp	r5, #0
 8007150:	d04d      	beq.n	80071ee <_printf_i+0x1b6>
 8007152:	4615      	mov	r5, r2
 8007154:	fbb6 f1f3 	udiv	r1, r6, r3
 8007158:	fb03 6711 	mls	r7, r3, r1, r6
 800715c:	5dc7      	ldrb	r7, [r0, r7]
 800715e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007162:	4637      	mov	r7, r6
 8007164:	42bb      	cmp	r3, r7
 8007166:	460e      	mov	r6, r1
 8007168:	d9f4      	bls.n	8007154 <_printf_i+0x11c>
 800716a:	2b08      	cmp	r3, #8
 800716c:	d10b      	bne.n	8007186 <_printf_i+0x14e>
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	07de      	lsls	r6, r3, #31
 8007172:	d508      	bpl.n	8007186 <_printf_i+0x14e>
 8007174:	6923      	ldr	r3, [r4, #16]
 8007176:	6861      	ldr	r1, [r4, #4]
 8007178:	4299      	cmp	r1, r3
 800717a:	bfde      	ittt	le
 800717c:	2330      	movle	r3, #48	; 0x30
 800717e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007182:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007186:	1b52      	subs	r2, r2, r5
 8007188:	6122      	str	r2, [r4, #16]
 800718a:	464b      	mov	r3, r9
 800718c:	4621      	mov	r1, r4
 800718e:	4640      	mov	r0, r8
 8007190:	f8cd a000 	str.w	sl, [sp]
 8007194:	aa03      	add	r2, sp, #12
 8007196:	f7ff fedf 	bl	8006f58 <_printf_common>
 800719a:	3001      	adds	r0, #1
 800719c:	d14c      	bne.n	8007238 <_printf_i+0x200>
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
 80071a2:	b004      	add	sp, #16
 80071a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a8:	4834      	ldr	r0, [pc, #208]	; (800727c <_printf_i+0x244>)
 80071aa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071ae:	6829      	ldr	r1, [r5, #0]
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	f851 6b04 	ldr.w	r6, [r1], #4
 80071b6:	6029      	str	r1, [r5, #0]
 80071b8:	061d      	lsls	r5, r3, #24
 80071ba:	d514      	bpl.n	80071e6 <_printf_i+0x1ae>
 80071bc:	07df      	lsls	r7, r3, #31
 80071be:	bf44      	itt	mi
 80071c0:	f043 0320 	orrmi.w	r3, r3, #32
 80071c4:	6023      	strmi	r3, [r4, #0]
 80071c6:	b91e      	cbnz	r6, 80071d0 <_printf_i+0x198>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	f023 0320 	bic.w	r3, r3, #32
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	2310      	movs	r3, #16
 80071d2:	e7af      	b.n	8007134 <_printf_i+0xfc>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	f043 0320 	orr.w	r3, r3, #32
 80071da:	6023      	str	r3, [r4, #0]
 80071dc:	2378      	movs	r3, #120	; 0x78
 80071de:	4828      	ldr	r0, [pc, #160]	; (8007280 <_printf_i+0x248>)
 80071e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071e4:	e7e3      	b.n	80071ae <_printf_i+0x176>
 80071e6:	0659      	lsls	r1, r3, #25
 80071e8:	bf48      	it	mi
 80071ea:	b2b6      	uxthmi	r6, r6
 80071ec:	e7e6      	b.n	80071bc <_printf_i+0x184>
 80071ee:	4615      	mov	r5, r2
 80071f0:	e7bb      	b.n	800716a <_printf_i+0x132>
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	6826      	ldr	r6, [r4, #0]
 80071f6:	1d18      	adds	r0, r3, #4
 80071f8:	6961      	ldr	r1, [r4, #20]
 80071fa:	6028      	str	r0, [r5, #0]
 80071fc:	0635      	lsls	r5, r6, #24
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	d501      	bpl.n	8007206 <_printf_i+0x1ce>
 8007202:	6019      	str	r1, [r3, #0]
 8007204:	e002      	b.n	800720c <_printf_i+0x1d4>
 8007206:	0670      	lsls	r0, r6, #25
 8007208:	d5fb      	bpl.n	8007202 <_printf_i+0x1ca>
 800720a:	8019      	strh	r1, [r3, #0]
 800720c:	2300      	movs	r3, #0
 800720e:	4615      	mov	r5, r2
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	e7ba      	b.n	800718a <_printf_i+0x152>
 8007214:	682b      	ldr	r3, [r5, #0]
 8007216:	2100      	movs	r1, #0
 8007218:	1d1a      	adds	r2, r3, #4
 800721a:	602a      	str	r2, [r5, #0]
 800721c:	681d      	ldr	r5, [r3, #0]
 800721e:	6862      	ldr	r2, [r4, #4]
 8007220:	4628      	mov	r0, r5
 8007222:	f000 fb13 	bl	800784c <memchr>
 8007226:	b108      	cbz	r0, 800722c <_printf_i+0x1f4>
 8007228:	1b40      	subs	r0, r0, r5
 800722a:	6060      	str	r0, [r4, #4]
 800722c:	6863      	ldr	r3, [r4, #4]
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	2300      	movs	r3, #0
 8007232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007236:	e7a8      	b.n	800718a <_printf_i+0x152>
 8007238:	462a      	mov	r2, r5
 800723a:	4649      	mov	r1, r9
 800723c:	4640      	mov	r0, r8
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	47d0      	blx	sl
 8007242:	3001      	adds	r0, #1
 8007244:	d0ab      	beq.n	800719e <_printf_i+0x166>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	079b      	lsls	r3, r3, #30
 800724a:	d413      	bmi.n	8007274 <_printf_i+0x23c>
 800724c:	68e0      	ldr	r0, [r4, #12]
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	4298      	cmp	r0, r3
 8007252:	bfb8      	it	lt
 8007254:	4618      	movlt	r0, r3
 8007256:	e7a4      	b.n	80071a2 <_printf_i+0x16a>
 8007258:	2301      	movs	r3, #1
 800725a:	4632      	mov	r2, r6
 800725c:	4649      	mov	r1, r9
 800725e:	4640      	mov	r0, r8
 8007260:	47d0      	blx	sl
 8007262:	3001      	adds	r0, #1
 8007264:	d09b      	beq.n	800719e <_printf_i+0x166>
 8007266:	3501      	adds	r5, #1
 8007268:	68e3      	ldr	r3, [r4, #12]
 800726a:	9903      	ldr	r1, [sp, #12]
 800726c:	1a5b      	subs	r3, r3, r1
 800726e:	42ab      	cmp	r3, r5
 8007270:	dcf2      	bgt.n	8007258 <_printf_i+0x220>
 8007272:	e7eb      	b.n	800724c <_printf_i+0x214>
 8007274:	2500      	movs	r5, #0
 8007276:	f104 0619 	add.w	r6, r4, #25
 800727a:	e7f5      	b.n	8007268 <_printf_i+0x230>
 800727c:	08007f19 	.word	0x08007f19
 8007280:	08007f2a 	.word	0x08007f2a

08007284 <__swbuf_r>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	460e      	mov	r6, r1
 8007288:	4614      	mov	r4, r2
 800728a:	4605      	mov	r5, r0
 800728c:	b118      	cbz	r0, 8007296 <__swbuf_r+0x12>
 800728e:	6983      	ldr	r3, [r0, #24]
 8007290:	b90b      	cbnz	r3, 8007296 <__swbuf_r+0x12>
 8007292:	f000 f9d5 	bl	8007640 <__sinit>
 8007296:	4b21      	ldr	r3, [pc, #132]	; (800731c <__swbuf_r+0x98>)
 8007298:	429c      	cmp	r4, r3
 800729a:	d12b      	bne.n	80072f4 <__swbuf_r+0x70>
 800729c:	686c      	ldr	r4, [r5, #4]
 800729e:	69a3      	ldr	r3, [r4, #24]
 80072a0:	60a3      	str	r3, [r4, #8]
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	071a      	lsls	r2, r3, #28
 80072a6:	d52f      	bpl.n	8007308 <__swbuf_r+0x84>
 80072a8:	6923      	ldr	r3, [r4, #16]
 80072aa:	b36b      	cbz	r3, 8007308 <__swbuf_r+0x84>
 80072ac:	6923      	ldr	r3, [r4, #16]
 80072ae:	6820      	ldr	r0, [r4, #0]
 80072b0:	b2f6      	uxtb	r6, r6
 80072b2:	1ac0      	subs	r0, r0, r3
 80072b4:	6963      	ldr	r3, [r4, #20]
 80072b6:	4637      	mov	r7, r6
 80072b8:	4283      	cmp	r3, r0
 80072ba:	dc04      	bgt.n	80072c6 <__swbuf_r+0x42>
 80072bc:	4621      	mov	r1, r4
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f92a 	bl	8007518 <_fflush_r>
 80072c4:	bb30      	cbnz	r0, 8007314 <__swbuf_r+0x90>
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	3001      	adds	r0, #1
 80072ca:	3b01      	subs	r3, #1
 80072cc:	60a3      	str	r3, [r4, #8]
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	6022      	str	r2, [r4, #0]
 80072d4:	701e      	strb	r6, [r3, #0]
 80072d6:	6963      	ldr	r3, [r4, #20]
 80072d8:	4283      	cmp	r3, r0
 80072da:	d004      	beq.n	80072e6 <__swbuf_r+0x62>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	07db      	lsls	r3, r3, #31
 80072e0:	d506      	bpl.n	80072f0 <__swbuf_r+0x6c>
 80072e2:	2e0a      	cmp	r6, #10
 80072e4:	d104      	bne.n	80072f0 <__swbuf_r+0x6c>
 80072e6:	4621      	mov	r1, r4
 80072e8:	4628      	mov	r0, r5
 80072ea:	f000 f915 	bl	8007518 <_fflush_r>
 80072ee:	b988      	cbnz	r0, 8007314 <__swbuf_r+0x90>
 80072f0:	4638      	mov	r0, r7
 80072f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <__swbuf_r+0x9c>)
 80072f6:	429c      	cmp	r4, r3
 80072f8:	d101      	bne.n	80072fe <__swbuf_r+0x7a>
 80072fa:	68ac      	ldr	r4, [r5, #8]
 80072fc:	e7cf      	b.n	800729e <__swbuf_r+0x1a>
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <__swbuf_r+0xa0>)
 8007300:	429c      	cmp	r4, r3
 8007302:	bf08      	it	eq
 8007304:	68ec      	ldreq	r4, [r5, #12]
 8007306:	e7ca      	b.n	800729e <__swbuf_r+0x1a>
 8007308:	4621      	mov	r1, r4
 800730a:	4628      	mov	r0, r5
 800730c:	f000 f80c 	bl	8007328 <__swsetup_r>
 8007310:	2800      	cmp	r0, #0
 8007312:	d0cb      	beq.n	80072ac <__swbuf_r+0x28>
 8007314:	f04f 37ff 	mov.w	r7, #4294967295
 8007318:	e7ea      	b.n	80072f0 <__swbuf_r+0x6c>
 800731a:	bf00      	nop
 800731c:	08007f5c 	.word	0x08007f5c
 8007320:	08007f7c 	.word	0x08007f7c
 8007324:	08007f3c 	.word	0x08007f3c

08007328 <__swsetup_r>:
 8007328:	4b32      	ldr	r3, [pc, #200]	; (80073f4 <__swsetup_r+0xcc>)
 800732a:	b570      	push	{r4, r5, r6, lr}
 800732c:	681d      	ldr	r5, [r3, #0]
 800732e:	4606      	mov	r6, r0
 8007330:	460c      	mov	r4, r1
 8007332:	b125      	cbz	r5, 800733e <__swsetup_r+0x16>
 8007334:	69ab      	ldr	r3, [r5, #24]
 8007336:	b913      	cbnz	r3, 800733e <__swsetup_r+0x16>
 8007338:	4628      	mov	r0, r5
 800733a:	f000 f981 	bl	8007640 <__sinit>
 800733e:	4b2e      	ldr	r3, [pc, #184]	; (80073f8 <__swsetup_r+0xd0>)
 8007340:	429c      	cmp	r4, r3
 8007342:	d10f      	bne.n	8007364 <__swsetup_r+0x3c>
 8007344:	686c      	ldr	r4, [r5, #4]
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800734c:	0719      	lsls	r1, r3, #28
 800734e:	d42c      	bmi.n	80073aa <__swsetup_r+0x82>
 8007350:	06dd      	lsls	r5, r3, #27
 8007352:	d411      	bmi.n	8007378 <__swsetup_r+0x50>
 8007354:	2309      	movs	r3, #9
 8007356:	6033      	str	r3, [r6, #0]
 8007358:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	e03e      	b.n	80073e2 <__swsetup_r+0xba>
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <__swsetup_r+0xd4>)
 8007366:	429c      	cmp	r4, r3
 8007368:	d101      	bne.n	800736e <__swsetup_r+0x46>
 800736a:	68ac      	ldr	r4, [r5, #8]
 800736c:	e7eb      	b.n	8007346 <__swsetup_r+0x1e>
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <__swsetup_r+0xd8>)
 8007370:	429c      	cmp	r4, r3
 8007372:	bf08      	it	eq
 8007374:	68ec      	ldreq	r4, [r5, #12]
 8007376:	e7e6      	b.n	8007346 <__swsetup_r+0x1e>
 8007378:	0758      	lsls	r0, r3, #29
 800737a:	d512      	bpl.n	80073a2 <__swsetup_r+0x7a>
 800737c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800737e:	b141      	cbz	r1, 8007392 <__swsetup_r+0x6a>
 8007380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007384:	4299      	cmp	r1, r3
 8007386:	d002      	beq.n	800738e <__swsetup_r+0x66>
 8007388:	4630      	mov	r0, r6
 800738a:	f7ff fc45 	bl	8006c18 <_free_r>
 800738e:	2300      	movs	r3, #0
 8007390:	6363      	str	r3, [r4, #52]	; 0x34
 8007392:	89a3      	ldrh	r3, [r4, #12]
 8007394:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	2300      	movs	r3, #0
 800739c:	6063      	str	r3, [r4, #4]
 800739e:	6923      	ldr	r3, [r4, #16]
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	f043 0308 	orr.w	r3, r3, #8
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	b94b      	cbnz	r3, 80073c2 <__swsetup_r+0x9a>
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073b8:	d003      	beq.n	80073c2 <__swsetup_r+0x9a>
 80073ba:	4621      	mov	r1, r4
 80073bc:	4630      	mov	r0, r6
 80073be:	f000 fa05 	bl	80077cc <__smakebuf_r>
 80073c2:	89a0      	ldrh	r0, [r4, #12]
 80073c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073c8:	f010 0301 	ands.w	r3, r0, #1
 80073cc:	d00a      	beq.n	80073e4 <__swsetup_r+0xbc>
 80073ce:	2300      	movs	r3, #0
 80073d0:	60a3      	str	r3, [r4, #8]
 80073d2:	6963      	ldr	r3, [r4, #20]
 80073d4:	425b      	negs	r3, r3
 80073d6:	61a3      	str	r3, [r4, #24]
 80073d8:	6923      	ldr	r3, [r4, #16]
 80073da:	b943      	cbnz	r3, 80073ee <__swsetup_r+0xc6>
 80073dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073e0:	d1ba      	bne.n	8007358 <__swsetup_r+0x30>
 80073e2:	bd70      	pop	{r4, r5, r6, pc}
 80073e4:	0781      	lsls	r1, r0, #30
 80073e6:	bf58      	it	pl
 80073e8:	6963      	ldrpl	r3, [r4, #20]
 80073ea:	60a3      	str	r3, [r4, #8]
 80073ec:	e7f4      	b.n	80073d8 <__swsetup_r+0xb0>
 80073ee:	2000      	movs	r0, #0
 80073f0:	e7f7      	b.n	80073e2 <__swsetup_r+0xba>
 80073f2:	bf00      	nop
 80073f4:	20000010 	.word	0x20000010
 80073f8:	08007f5c 	.word	0x08007f5c
 80073fc:	08007f7c 	.word	0x08007f7c
 8007400:	08007f3c 	.word	0x08007f3c

08007404 <abort>:
 8007404:	2006      	movs	r0, #6
 8007406:	b508      	push	{r3, lr}
 8007408:	f000 fa56 	bl	80078b8 <raise>
 800740c:	2001      	movs	r0, #1
 800740e:	f7fa fb6c 	bl	8001aea <_exit>
	...

08007414 <__sflush_r>:
 8007414:	898a      	ldrh	r2, [r1, #12]
 8007416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007418:	4605      	mov	r5, r0
 800741a:	0710      	lsls	r0, r2, #28
 800741c:	460c      	mov	r4, r1
 800741e:	d457      	bmi.n	80074d0 <__sflush_r+0xbc>
 8007420:	684b      	ldr	r3, [r1, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	dc04      	bgt.n	8007430 <__sflush_r+0x1c>
 8007426:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007428:	2b00      	cmp	r3, #0
 800742a:	dc01      	bgt.n	8007430 <__sflush_r+0x1c>
 800742c:	2000      	movs	r0, #0
 800742e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007432:	2e00      	cmp	r6, #0
 8007434:	d0fa      	beq.n	800742c <__sflush_r+0x18>
 8007436:	2300      	movs	r3, #0
 8007438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800743c:	682f      	ldr	r7, [r5, #0]
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	d032      	beq.n	80074a8 <__sflush_r+0x94>
 8007442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	075a      	lsls	r2, r3, #29
 8007448:	d505      	bpl.n	8007456 <__sflush_r+0x42>
 800744a:	6863      	ldr	r3, [r4, #4]
 800744c:	1ac0      	subs	r0, r0, r3
 800744e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007450:	b10b      	cbz	r3, 8007456 <__sflush_r+0x42>
 8007452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007454:	1ac0      	subs	r0, r0, r3
 8007456:	2300      	movs	r3, #0
 8007458:	4602      	mov	r2, r0
 800745a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800745c:	4628      	mov	r0, r5
 800745e:	6a21      	ldr	r1, [r4, #32]
 8007460:	47b0      	blx	r6
 8007462:	1c43      	adds	r3, r0, #1
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	d106      	bne.n	8007476 <__sflush_r+0x62>
 8007468:	6829      	ldr	r1, [r5, #0]
 800746a:	291d      	cmp	r1, #29
 800746c:	d82c      	bhi.n	80074c8 <__sflush_r+0xb4>
 800746e:	4a29      	ldr	r2, [pc, #164]	; (8007514 <__sflush_r+0x100>)
 8007470:	40ca      	lsrs	r2, r1
 8007472:	07d6      	lsls	r6, r2, #31
 8007474:	d528      	bpl.n	80074c8 <__sflush_r+0xb4>
 8007476:	2200      	movs	r2, #0
 8007478:	6062      	str	r2, [r4, #4]
 800747a:	6922      	ldr	r2, [r4, #16]
 800747c:	04d9      	lsls	r1, r3, #19
 800747e:	6022      	str	r2, [r4, #0]
 8007480:	d504      	bpl.n	800748c <__sflush_r+0x78>
 8007482:	1c42      	adds	r2, r0, #1
 8007484:	d101      	bne.n	800748a <__sflush_r+0x76>
 8007486:	682b      	ldr	r3, [r5, #0]
 8007488:	b903      	cbnz	r3, 800748c <__sflush_r+0x78>
 800748a:	6560      	str	r0, [r4, #84]	; 0x54
 800748c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800748e:	602f      	str	r7, [r5, #0]
 8007490:	2900      	cmp	r1, #0
 8007492:	d0cb      	beq.n	800742c <__sflush_r+0x18>
 8007494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007498:	4299      	cmp	r1, r3
 800749a:	d002      	beq.n	80074a2 <__sflush_r+0x8e>
 800749c:	4628      	mov	r0, r5
 800749e:	f7ff fbbb 	bl	8006c18 <_free_r>
 80074a2:	2000      	movs	r0, #0
 80074a4:	6360      	str	r0, [r4, #52]	; 0x34
 80074a6:	e7c2      	b.n	800742e <__sflush_r+0x1a>
 80074a8:	6a21      	ldr	r1, [r4, #32]
 80074aa:	2301      	movs	r3, #1
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b0      	blx	r6
 80074b0:	1c41      	adds	r1, r0, #1
 80074b2:	d1c7      	bne.n	8007444 <__sflush_r+0x30>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0c4      	beq.n	8007444 <__sflush_r+0x30>
 80074ba:	2b1d      	cmp	r3, #29
 80074bc:	d001      	beq.n	80074c2 <__sflush_r+0xae>
 80074be:	2b16      	cmp	r3, #22
 80074c0:	d101      	bne.n	80074c6 <__sflush_r+0xb2>
 80074c2:	602f      	str	r7, [r5, #0]
 80074c4:	e7b2      	b.n	800742c <__sflush_r+0x18>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074cc:	81a3      	strh	r3, [r4, #12]
 80074ce:	e7ae      	b.n	800742e <__sflush_r+0x1a>
 80074d0:	690f      	ldr	r7, [r1, #16]
 80074d2:	2f00      	cmp	r7, #0
 80074d4:	d0aa      	beq.n	800742c <__sflush_r+0x18>
 80074d6:	0793      	lsls	r3, r2, #30
 80074d8:	bf18      	it	ne
 80074da:	2300      	movne	r3, #0
 80074dc:	680e      	ldr	r6, [r1, #0]
 80074de:	bf08      	it	eq
 80074e0:	694b      	ldreq	r3, [r1, #20]
 80074e2:	1bf6      	subs	r6, r6, r7
 80074e4:	600f      	str	r7, [r1, #0]
 80074e6:	608b      	str	r3, [r1, #8]
 80074e8:	2e00      	cmp	r6, #0
 80074ea:	dd9f      	ble.n	800742c <__sflush_r+0x18>
 80074ec:	4633      	mov	r3, r6
 80074ee:	463a      	mov	r2, r7
 80074f0:	4628      	mov	r0, r5
 80074f2:	6a21      	ldr	r1, [r4, #32]
 80074f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80074f8:	47e0      	blx	ip
 80074fa:	2800      	cmp	r0, #0
 80074fc:	dc06      	bgt.n	800750c <__sflush_r+0xf8>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	f04f 30ff 	mov.w	r0, #4294967295
 8007504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007508:	81a3      	strh	r3, [r4, #12]
 800750a:	e790      	b.n	800742e <__sflush_r+0x1a>
 800750c:	4407      	add	r7, r0
 800750e:	1a36      	subs	r6, r6, r0
 8007510:	e7ea      	b.n	80074e8 <__sflush_r+0xd4>
 8007512:	bf00      	nop
 8007514:	20400001 	.word	0x20400001

08007518 <_fflush_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	690b      	ldr	r3, [r1, #16]
 800751c:	4605      	mov	r5, r0
 800751e:	460c      	mov	r4, r1
 8007520:	b913      	cbnz	r3, 8007528 <_fflush_r+0x10>
 8007522:	2500      	movs	r5, #0
 8007524:	4628      	mov	r0, r5
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	b118      	cbz	r0, 8007532 <_fflush_r+0x1a>
 800752a:	6983      	ldr	r3, [r0, #24]
 800752c:	b90b      	cbnz	r3, 8007532 <_fflush_r+0x1a>
 800752e:	f000 f887 	bl	8007640 <__sinit>
 8007532:	4b14      	ldr	r3, [pc, #80]	; (8007584 <_fflush_r+0x6c>)
 8007534:	429c      	cmp	r4, r3
 8007536:	d11b      	bne.n	8007570 <_fflush_r+0x58>
 8007538:	686c      	ldr	r4, [r5, #4]
 800753a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0ef      	beq.n	8007522 <_fflush_r+0xa>
 8007542:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007544:	07d0      	lsls	r0, r2, #31
 8007546:	d404      	bmi.n	8007552 <_fflush_r+0x3a>
 8007548:	0599      	lsls	r1, r3, #22
 800754a:	d402      	bmi.n	8007552 <_fflush_r+0x3a>
 800754c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754e:	f000 f915 	bl	800777c <__retarget_lock_acquire_recursive>
 8007552:	4628      	mov	r0, r5
 8007554:	4621      	mov	r1, r4
 8007556:	f7ff ff5d 	bl	8007414 <__sflush_r>
 800755a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800755c:	4605      	mov	r5, r0
 800755e:	07da      	lsls	r2, r3, #31
 8007560:	d4e0      	bmi.n	8007524 <_fflush_r+0xc>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	059b      	lsls	r3, r3, #22
 8007566:	d4dd      	bmi.n	8007524 <_fflush_r+0xc>
 8007568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756a:	f000 f908 	bl	800777e <__retarget_lock_release_recursive>
 800756e:	e7d9      	b.n	8007524 <_fflush_r+0xc>
 8007570:	4b05      	ldr	r3, [pc, #20]	; (8007588 <_fflush_r+0x70>)
 8007572:	429c      	cmp	r4, r3
 8007574:	d101      	bne.n	800757a <_fflush_r+0x62>
 8007576:	68ac      	ldr	r4, [r5, #8]
 8007578:	e7df      	b.n	800753a <_fflush_r+0x22>
 800757a:	4b04      	ldr	r3, [pc, #16]	; (800758c <_fflush_r+0x74>)
 800757c:	429c      	cmp	r4, r3
 800757e:	bf08      	it	eq
 8007580:	68ec      	ldreq	r4, [r5, #12]
 8007582:	e7da      	b.n	800753a <_fflush_r+0x22>
 8007584:	08007f5c 	.word	0x08007f5c
 8007588:	08007f7c 	.word	0x08007f7c
 800758c:	08007f3c 	.word	0x08007f3c

08007590 <std>:
 8007590:	2300      	movs	r3, #0
 8007592:	b510      	push	{r4, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	e9c0 3300 	strd	r3, r3, [r0]
 800759a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800759e:	6083      	str	r3, [r0, #8]
 80075a0:	8181      	strh	r1, [r0, #12]
 80075a2:	6643      	str	r3, [r0, #100]	; 0x64
 80075a4:	81c2      	strh	r2, [r0, #14]
 80075a6:	6183      	str	r3, [r0, #24]
 80075a8:	4619      	mov	r1, r3
 80075aa:	2208      	movs	r2, #8
 80075ac:	305c      	adds	r0, #92	; 0x5c
 80075ae:	f7fd faf3 	bl	8004b98 <memset>
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <std+0x38>)
 80075b4:	6224      	str	r4, [r4, #32]
 80075b6:	6263      	str	r3, [r4, #36]	; 0x24
 80075b8:	4b04      	ldr	r3, [pc, #16]	; (80075cc <std+0x3c>)
 80075ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80075bc:	4b04      	ldr	r3, [pc, #16]	; (80075d0 <std+0x40>)
 80075be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075c0:	4b04      	ldr	r3, [pc, #16]	; (80075d4 <std+0x44>)
 80075c2:	6323      	str	r3, [r4, #48]	; 0x30
 80075c4:	bd10      	pop	{r4, pc}
 80075c6:	bf00      	nop
 80075c8:	080078f1 	.word	0x080078f1
 80075cc:	08007913 	.word	0x08007913
 80075d0:	0800794b 	.word	0x0800794b
 80075d4:	0800796f 	.word	0x0800796f

080075d8 <_cleanup_r>:
 80075d8:	4901      	ldr	r1, [pc, #4]	; (80075e0 <_cleanup_r+0x8>)
 80075da:	f000 b8af 	b.w	800773c <_fwalk_reent>
 80075de:	bf00      	nop
 80075e0:	08007519 	.word	0x08007519

080075e4 <__sfmoreglue>:
 80075e4:	2268      	movs	r2, #104	; 0x68
 80075e6:	b570      	push	{r4, r5, r6, lr}
 80075e8:	1e4d      	subs	r5, r1, #1
 80075ea:	4355      	muls	r5, r2
 80075ec:	460e      	mov	r6, r1
 80075ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075f2:	f7ff fa21 	bl	8006a38 <_malloc_r>
 80075f6:	4604      	mov	r4, r0
 80075f8:	b140      	cbz	r0, 800760c <__sfmoreglue+0x28>
 80075fa:	2100      	movs	r1, #0
 80075fc:	e9c0 1600 	strd	r1, r6, [r0]
 8007600:	300c      	adds	r0, #12
 8007602:	60a0      	str	r0, [r4, #8]
 8007604:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007608:	f7fd fac6 	bl	8004b98 <memset>
 800760c:	4620      	mov	r0, r4
 800760e:	bd70      	pop	{r4, r5, r6, pc}

08007610 <__sfp_lock_acquire>:
 8007610:	4801      	ldr	r0, [pc, #4]	; (8007618 <__sfp_lock_acquire+0x8>)
 8007612:	f000 b8b3 	b.w	800777c <__retarget_lock_acquire_recursive>
 8007616:	bf00      	nop
 8007618:	200002fd 	.word	0x200002fd

0800761c <__sfp_lock_release>:
 800761c:	4801      	ldr	r0, [pc, #4]	; (8007624 <__sfp_lock_release+0x8>)
 800761e:	f000 b8ae 	b.w	800777e <__retarget_lock_release_recursive>
 8007622:	bf00      	nop
 8007624:	200002fd 	.word	0x200002fd

08007628 <__sinit_lock_acquire>:
 8007628:	4801      	ldr	r0, [pc, #4]	; (8007630 <__sinit_lock_acquire+0x8>)
 800762a:	f000 b8a7 	b.w	800777c <__retarget_lock_acquire_recursive>
 800762e:	bf00      	nop
 8007630:	200002fe 	.word	0x200002fe

08007634 <__sinit_lock_release>:
 8007634:	4801      	ldr	r0, [pc, #4]	; (800763c <__sinit_lock_release+0x8>)
 8007636:	f000 b8a2 	b.w	800777e <__retarget_lock_release_recursive>
 800763a:	bf00      	nop
 800763c:	200002fe 	.word	0x200002fe

08007640 <__sinit>:
 8007640:	b510      	push	{r4, lr}
 8007642:	4604      	mov	r4, r0
 8007644:	f7ff fff0 	bl	8007628 <__sinit_lock_acquire>
 8007648:	69a3      	ldr	r3, [r4, #24]
 800764a:	b11b      	cbz	r3, 8007654 <__sinit+0x14>
 800764c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007650:	f7ff bff0 	b.w	8007634 <__sinit_lock_release>
 8007654:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007658:	6523      	str	r3, [r4, #80]	; 0x50
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <__sinit+0x68>)
 800765c:	4a13      	ldr	r2, [pc, #76]	; (80076ac <__sinit+0x6c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	62a2      	str	r2, [r4, #40]	; 0x28
 8007662:	42a3      	cmp	r3, r4
 8007664:	bf08      	it	eq
 8007666:	2301      	moveq	r3, #1
 8007668:	4620      	mov	r0, r4
 800766a:	bf08      	it	eq
 800766c:	61a3      	streq	r3, [r4, #24]
 800766e:	f000 f81f 	bl	80076b0 <__sfp>
 8007672:	6060      	str	r0, [r4, #4]
 8007674:	4620      	mov	r0, r4
 8007676:	f000 f81b 	bl	80076b0 <__sfp>
 800767a:	60a0      	str	r0, [r4, #8]
 800767c:	4620      	mov	r0, r4
 800767e:	f000 f817 	bl	80076b0 <__sfp>
 8007682:	2200      	movs	r2, #0
 8007684:	2104      	movs	r1, #4
 8007686:	60e0      	str	r0, [r4, #12]
 8007688:	6860      	ldr	r0, [r4, #4]
 800768a:	f7ff ff81 	bl	8007590 <std>
 800768e:	2201      	movs	r2, #1
 8007690:	2109      	movs	r1, #9
 8007692:	68a0      	ldr	r0, [r4, #8]
 8007694:	f7ff ff7c 	bl	8007590 <std>
 8007698:	2202      	movs	r2, #2
 800769a:	2112      	movs	r1, #18
 800769c:	68e0      	ldr	r0, [r4, #12]
 800769e:	f7ff ff77 	bl	8007590 <std>
 80076a2:	2301      	movs	r3, #1
 80076a4:	61a3      	str	r3, [r4, #24]
 80076a6:	e7d1      	b.n	800764c <__sinit+0xc>
 80076a8:	08007b6c 	.word	0x08007b6c
 80076ac:	080075d9 	.word	0x080075d9

080076b0 <__sfp>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	4607      	mov	r7, r0
 80076b4:	f7ff ffac 	bl	8007610 <__sfp_lock_acquire>
 80076b8:	4b1e      	ldr	r3, [pc, #120]	; (8007734 <__sfp+0x84>)
 80076ba:	681e      	ldr	r6, [r3, #0]
 80076bc:	69b3      	ldr	r3, [r6, #24]
 80076be:	b913      	cbnz	r3, 80076c6 <__sfp+0x16>
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff ffbd 	bl	8007640 <__sinit>
 80076c6:	3648      	adds	r6, #72	; 0x48
 80076c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	d503      	bpl.n	80076d8 <__sfp+0x28>
 80076d0:	6833      	ldr	r3, [r6, #0]
 80076d2:	b30b      	cbz	r3, 8007718 <__sfp+0x68>
 80076d4:	6836      	ldr	r6, [r6, #0]
 80076d6:	e7f7      	b.n	80076c8 <__sfp+0x18>
 80076d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076dc:	b9d5      	cbnz	r5, 8007714 <__sfp+0x64>
 80076de:	4b16      	ldr	r3, [pc, #88]	; (8007738 <__sfp+0x88>)
 80076e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076e4:	60e3      	str	r3, [r4, #12]
 80076e6:	6665      	str	r5, [r4, #100]	; 0x64
 80076e8:	f000 f847 	bl	800777a <__retarget_lock_init_recursive>
 80076ec:	f7ff ff96 	bl	800761c <__sfp_lock_release>
 80076f0:	2208      	movs	r2, #8
 80076f2:	4629      	mov	r1, r5
 80076f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076fc:	6025      	str	r5, [r4, #0]
 80076fe:	61a5      	str	r5, [r4, #24]
 8007700:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007704:	f7fd fa48 	bl	8004b98 <memset>
 8007708:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800770c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007710:	4620      	mov	r0, r4
 8007712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007714:	3468      	adds	r4, #104	; 0x68
 8007716:	e7d9      	b.n	80076cc <__sfp+0x1c>
 8007718:	2104      	movs	r1, #4
 800771a:	4638      	mov	r0, r7
 800771c:	f7ff ff62 	bl	80075e4 <__sfmoreglue>
 8007720:	4604      	mov	r4, r0
 8007722:	6030      	str	r0, [r6, #0]
 8007724:	2800      	cmp	r0, #0
 8007726:	d1d5      	bne.n	80076d4 <__sfp+0x24>
 8007728:	f7ff ff78 	bl	800761c <__sfp_lock_release>
 800772c:	230c      	movs	r3, #12
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	e7ee      	b.n	8007710 <__sfp+0x60>
 8007732:	bf00      	nop
 8007734:	08007b6c 	.word	0x08007b6c
 8007738:	ffff0001 	.word	0xffff0001

0800773c <_fwalk_reent>:
 800773c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007740:	4606      	mov	r6, r0
 8007742:	4688      	mov	r8, r1
 8007744:	2700      	movs	r7, #0
 8007746:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800774a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800774e:	f1b9 0901 	subs.w	r9, r9, #1
 8007752:	d505      	bpl.n	8007760 <_fwalk_reent+0x24>
 8007754:	6824      	ldr	r4, [r4, #0]
 8007756:	2c00      	cmp	r4, #0
 8007758:	d1f7      	bne.n	800774a <_fwalk_reent+0xe>
 800775a:	4638      	mov	r0, r7
 800775c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007760:	89ab      	ldrh	r3, [r5, #12]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d907      	bls.n	8007776 <_fwalk_reent+0x3a>
 8007766:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800776a:	3301      	adds	r3, #1
 800776c:	d003      	beq.n	8007776 <_fwalk_reent+0x3a>
 800776e:	4629      	mov	r1, r5
 8007770:	4630      	mov	r0, r6
 8007772:	47c0      	blx	r8
 8007774:	4307      	orrs	r7, r0
 8007776:	3568      	adds	r5, #104	; 0x68
 8007778:	e7e9      	b.n	800774e <_fwalk_reent+0x12>

0800777a <__retarget_lock_init_recursive>:
 800777a:	4770      	bx	lr

0800777c <__retarget_lock_acquire_recursive>:
 800777c:	4770      	bx	lr

0800777e <__retarget_lock_release_recursive>:
 800777e:	4770      	bx	lr

08007780 <__swhatbuf_r>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	460e      	mov	r6, r1
 8007784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007788:	4614      	mov	r4, r2
 800778a:	2900      	cmp	r1, #0
 800778c:	461d      	mov	r5, r3
 800778e:	b096      	sub	sp, #88	; 0x58
 8007790:	da08      	bge.n	80077a4 <__swhatbuf_r+0x24>
 8007792:	2200      	movs	r2, #0
 8007794:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007798:	602a      	str	r2, [r5, #0]
 800779a:	061a      	lsls	r2, r3, #24
 800779c:	d410      	bmi.n	80077c0 <__swhatbuf_r+0x40>
 800779e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a2:	e00e      	b.n	80077c2 <__swhatbuf_r+0x42>
 80077a4:	466a      	mov	r2, sp
 80077a6:	f000 f909 	bl	80079bc <_fstat_r>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	dbf1      	blt.n	8007792 <__swhatbuf_r+0x12>
 80077ae:	9a01      	ldr	r2, [sp, #4]
 80077b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077b8:	425a      	negs	r2, r3
 80077ba:	415a      	adcs	r2, r3
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	e7ee      	b.n	800779e <__swhatbuf_r+0x1e>
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	2000      	movs	r0, #0
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	b016      	add	sp, #88	; 0x58
 80077c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080077cc <__smakebuf_r>:
 80077cc:	898b      	ldrh	r3, [r1, #12]
 80077ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077d0:	079d      	lsls	r5, r3, #30
 80077d2:	4606      	mov	r6, r0
 80077d4:	460c      	mov	r4, r1
 80077d6:	d507      	bpl.n	80077e8 <__smakebuf_r+0x1c>
 80077d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	2301      	movs	r3, #1
 80077e2:	6163      	str	r3, [r4, #20]
 80077e4:	b002      	add	sp, #8
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	466a      	mov	r2, sp
 80077ea:	ab01      	add	r3, sp, #4
 80077ec:	f7ff ffc8 	bl	8007780 <__swhatbuf_r>
 80077f0:	9900      	ldr	r1, [sp, #0]
 80077f2:	4605      	mov	r5, r0
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff f91f 	bl	8006a38 <_malloc_r>
 80077fa:	b948      	cbnz	r0, 8007810 <__smakebuf_r+0x44>
 80077fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007800:	059a      	lsls	r2, r3, #22
 8007802:	d4ef      	bmi.n	80077e4 <__smakebuf_r+0x18>
 8007804:	f023 0303 	bic.w	r3, r3, #3
 8007808:	f043 0302 	orr.w	r3, r3, #2
 800780c:	81a3      	strh	r3, [r4, #12]
 800780e:	e7e3      	b.n	80077d8 <__smakebuf_r+0xc>
 8007810:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <__smakebuf_r+0x7c>)
 8007812:	62b3      	str	r3, [r6, #40]	; 0x28
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	6020      	str	r0, [r4, #0]
 8007818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781c:	81a3      	strh	r3, [r4, #12]
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	6120      	str	r0, [r4, #16]
 8007822:	6163      	str	r3, [r4, #20]
 8007824:	9b01      	ldr	r3, [sp, #4]
 8007826:	b15b      	cbz	r3, 8007840 <__smakebuf_r+0x74>
 8007828:	4630      	mov	r0, r6
 800782a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800782e:	f000 f8d7 	bl	80079e0 <_isatty_r>
 8007832:	b128      	cbz	r0, 8007840 <__smakebuf_r+0x74>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	89a0      	ldrh	r0, [r4, #12]
 8007842:	4305      	orrs	r5, r0
 8007844:	81a5      	strh	r5, [r4, #12]
 8007846:	e7cd      	b.n	80077e4 <__smakebuf_r+0x18>
 8007848:	080075d9 	.word	0x080075d9

0800784c <memchr>:
 800784c:	4603      	mov	r3, r0
 800784e:	b510      	push	{r4, lr}
 8007850:	b2c9      	uxtb	r1, r1
 8007852:	4402      	add	r2, r0
 8007854:	4293      	cmp	r3, r2
 8007856:	4618      	mov	r0, r3
 8007858:	d101      	bne.n	800785e <memchr+0x12>
 800785a:	2000      	movs	r0, #0
 800785c:	e003      	b.n	8007866 <memchr+0x1a>
 800785e:	7804      	ldrb	r4, [r0, #0]
 8007860:	3301      	adds	r3, #1
 8007862:	428c      	cmp	r4, r1
 8007864:	d1f6      	bne.n	8007854 <memchr+0x8>
 8007866:	bd10      	pop	{r4, pc}

08007868 <_raise_r>:
 8007868:	291f      	cmp	r1, #31
 800786a:	b538      	push	{r3, r4, r5, lr}
 800786c:	4604      	mov	r4, r0
 800786e:	460d      	mov	r5, r1
 8007870:	d904      	bls.n	800787c <_raise_r+0x14>
 8007872:	2316      	movs	r3, #22
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800787e:	b112      	cbz	r2, 8007886 <_raise_r+0x1e>
 8007880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007884:	b94b      	cbnz	r3, 800789a <_raise_r+0x32>
 8007886:	4620      	mov	r0, r4
 8007888:	f000 f830 	bl	80078ec <_getpid_r>
 800788c:	462a      	mov	r2, r5
 800788e:	4601      	mov	r1, r0
 8007890:	4620      	mov	r0, r4
 8007892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007896:	f000 b817 	b.w	80078c8 <_kill_r>
 800789a:	2b01      	cmp	r3, #1
 800789c:	d00a      	beq.n	80078b4 <_raise_r+0x4c>
 800789e:	1c59      	adds	r1, r3, #1
 80078a0:	d103      	bne.n	80078aa <_raise_r+0x42>
 80078a2:	2316      	movs	r3, #22
 80078a4:	6003      	str	r3, [r0, #0]
 80078a6:	2001      	movs	r0, #1
 80078a8:	e7e7      	b.n	800787a <_raise_r+0x12>
 80078aa:	2400      	movs	r4, #0
 80078ac:	4628      	mov	r0, r5
 80078ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078b2:	4798      	blx	r3
 80078b4:	2000      	movs	r0, #0
 80078b6:	e7e0      	b.n	800787a <_raise_r+0x12>

080078b8 <raise>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <raise+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f7ff bfd3 	b.w	8007868 <_raise_r>
 80078c2:	bf00      	nop
 80078c4:	20000010 	.word	0x20000010

080078c8 <_kill_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	2300      	movs	r3, #0
 80078cc:	4d06      	ldr	r5, [pc, #24]	; (80078e8 <_kill_r+0x20>)
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	602b      	str	r3, [r5, #0]
 80078d6:	f7fa f8f8 	bl	8001aca <_kill>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d102      	bne.n	80078e4 <_kill_r+0x1c>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	b103      	cbz	r3, 80078e4 <_kill_r+0x1c>
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	bd38      	pop	{r3, r4, r5, pc}
 80078e6:	bf00      	nop
 80078e8:	200002f8 	.word	0x200002f8

080078ec <_getpid_r>:
 80078ec:	f7fa b8e6 	b.w	8001abc <_getpid>

080078f0 <__sread>:
 80078f0:	b510      	push	{r4, lr}
 80078f2:	460c      	mov	r4, r1
 80078f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f8:	f000 f894 	bl	8007a24 <_read_r>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	bfab      	itete	ge
 8007900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007902:	89a3      	ldrhlt	r3, [r4, #12]
 8007904:	181b      	addge	r3, r3, r0
 8007906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800790a:	bfac      	ite	ge
 800790c:	6563      	strge	r3, [r4, #84]	; 0x54
 800790e:	81a3      	strhlt	r3, [r4, #12]
 8007910:	bd10      	pop	{r4, pc}

08007912 <__swrite>:
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	461f      	mov	r7, r3
 8007918:	898b      	ldrh	r3, [r1, #12]
 800791a:	4605      	mov	r5, r0
 800791c:	05db      	lsls	r3, r3, #23
 800791e:	460c      	mov	r4, r1
 8007920:	4616      	mov	r6, r2
 8007922:	d505      	bpl.n	8007930 <__swrite+0x1e>
 8007924:	2302      	movs	r3, #2
 8007926:	2200      	movs	r2, #0
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	f000 f868 	bl	8007a00 <_lseek_r>
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	4632      	mov	r2, r6
 8007934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	4628      	mov	r0, r5
 800793c:	463b      	mov	r3, r7
 800793e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007946:	f000 b817 	b.w	8007978 <_write_r>

0800794a <__sseek>:
 800794a:	b510      	push	{r4, lr}
 800794c:	460c      	mov	r4, r1
 800794e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007952:	f000 f855 	bl	8007a00 <_lseek_r>
 8007956:	1c43      	adds	r3, r0, #1
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	bf15      	itete	ne
 800795c:	6560      	strne	r0, [r4, #84]	; 0x54
 800795e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007966:	81a3      	strheq	r3, [r4, #12]
 8007968:	bf18      	it	ne
 800796a:	81a3      	strhne	r3, [r4, #12]
 800796c:	bd10      	pop	{r4, pc}

0800796e <__sclose>:
 800796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007972:	f000 b813 	b.w	800799c <_close_r>
	...

08007978 <_write_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4604      	mov	r4, r0
 800797c:	4608      	mov	r0, r1
 800797e:	4611      	mov	r1, r2
 8007980:	2200      	movs	r2, #0
 8007982:	4d05      	ldr	r5, [pc, #20]	; (8007998 <_write_r+0x20>)
 8007984:	602a      	str	r2, [r5, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	f7fa f8d6 	bl	8001b38 <_write>
 800798c:	1c43      	adds	r3, r0, #1
 800798e:	d102      	bne.n	8007996 <_write_r+0x1e>
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	b103      	cbz	r3, 8007996 <_write_r+0x1e>
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	bd38      	pop	{r3, r4, r5, pc}
 8007998:	200002f8 	.word	0x200002f8

0800799c <_close_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	2300      	movs	r3, #0
 80079a0:	4d05      	ldr	r5, [pc, #20]	; (80079b8 <_close_r+0x1c>)
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	602b      	str	r3, [r5, #0]
 80079a8:	f7fa f8e2 	bl	8001b70 <_close>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_close_r+0x1a>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_close_r+0x1a>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	200002f8 	.word	0x200002f8

080079bc <_fstat_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	2300      	movs	r3, #0
 80079c0:	4d06      	ldr	r5, [pc, #24]	; (80079dc <_fstat_r+0x20>)
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	4611      	mov	r1, r2
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	f7fa f8dc 	bl	8001b86 <_fstat>
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	d102      	bne.n	80079d8 <_fstat_r+0x1c>
 80079d2:	682b      	ldr	r3, [r5, #0]
 80079d4:	b103      	cbz	r3, 80079d8 <_fstat_r+0x1c>
 80079d6:	6023      	str	r3, [r4, #0]
 80079d8:	bd38      	pop	{r3, r4, r5, pc}
 80079da:	bf00      	nop
 80079dc:	200002f8 	.word	0x200002f8

080079e0 <_isatty_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	2300      	movs	r3, #0
 80079e4:	4d05      	ldr	r5, [pc, #20]	; (80079fc <_isatty_r+0x1c>)
 80079e6:	4604      	mov	r4, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	f7fa f8da 	bl	8001ba4 <_isatty>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_isatty_r+0x1a>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_isatty_r+0x1a>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	200002f8 	.word	0x200002f8

08007a00 <_lseek_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4604      	mov	r4, r0
 8007a04:	4608      	mov	r0, r1
 8007a06:	4611      	mov	r1, r2
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4d05      	ldr	r5, [pc, #20]	; (8007a20 <_lseek_r+0x20>)
 8007a0c:	602a      	str	r2, [r5, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f7fa f8d2 	bl	8001bb8 <_lseek>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_lseek_r+0x1e>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_lseek_r+0x1e>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	200002f8 	.word	0x200002f8

08007a24 <_read_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4d05      	ldr	r5, [pc, #20]	; (8007a44 <_read_r+0x20>)
 8007a30:	602a      	str	r2, [r5, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f7fa f863 	bl	8001afe <_read>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_read_r+0x1e>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_read_r+0x1e>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	200002f8 	.word	0x200002f8

08007a48 <_init>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr

08007a54 <_fini>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr
